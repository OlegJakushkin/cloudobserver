<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:mxmlY="http://www.yahoo.com/astra/2006/mxml"
	xmlns:broadcastservice="services.broadcastservice.*" 
	creationComplete="init(event)"  
	width="396"
	height="132"
	verticalScrollPolicy="off" 
	horizontalScrollPolicy="off" 
	>
	
	<broadcastservice:BroadcastService
		id="broadcastService"
		fault="Alert.show('Вещание приостановленно. По причине ошибки. Сообщите об ошибке Вашему администратору. ' + event.fault.faultString  ); timerSetNextFrames.stop(); Selector1.selectedIndex = -1; Broad.selected = false;"
		showBusyCursor="false"
		/>
	
	<mx:CallResponder
		id="WriteFrameResult"
		result="WriteFrameResult_resultHandler(event)"
		fault="'Сервер не отвечает. Вещание приостановленно. По причине ошибки. Сообщите об ошибке Вашему администратору. ' + event.fault.faultString  ); timerSetNextFrames.stop(); Selector1.selectedIndex = -1; Broad.selected = false;"
		/>
	
	<mx:Fade 
		id="fadeOut"
		duration="1000"
		alphaFrom="1.0"
		alphaTo="0.0"
		/>
	
	<mx:Fade
		id="fadeIn"
		duration="1000"
		alphaFrom="0.0" 
		alphaTo="1.0"
		/>
	
	<mxmlY:AutoCompleteManager 
		shareData="true"
		autoFillEnabled="true"
		autoSave="true"
		id="autoCompleteMgr" 
		target="{WSDLAddress}"
		minCharsForCompletion="0"
		/>
	
	<mx:Script>
		<![CDATA[
		
	import mx.events.StateChangeEvent;
	import mx.graphics.codec.PNGEncoder;
	import spark.components.ToggleButton;
	import flashx.textLayout.events.SelectionEvent;
	import mx.events.IndexChangedEvent;
	import mx.events.NumericStepperEvent;
	import mx.events.NumericStepperEvent;
	import mx.events.ItemClickEvent;
	import mx.events.FlexEvent;
	import mx.events.ResourceEvent;
	import mx.rpc.events.ResultEvent;
	import com.adobe.images.JPGEncoder;
	import flash.display.*;
	import flash.events.*;
	import flash.geom.Rectangle;
	import flash.net.*;
	import flash.text.*;
	import flash.utils.ByteArray;
	import flash.utils.getTimer;
	import hurlant.jpeg.as3_jpeg_wrapper;
    import mx.controls.Alert;
    import mx.utils.ObjectUtil;
    import mx.binding.utils.BindingUtils;
    import mx.graphics.codec.JPEGEncoder; 
    import mx.controls.Image; 
    import flash.filesystem.File;
    import flash.filesystem.FileMode;
    import flash.filesystem.FileStream;
    import mx.core.UIComponent;
    import mx.controls.Alert;
    import mx.controls.SWFLoader;
    import com.adobe.images.JPGEncoder;
    import mx.rpc.events.FaultEvent;
    import mx.rpc.events.ResultEvent;
    import flash.display.BitmapData;
	import flash.geom.Matrix;
	import flash.utils.ByteArray;
	import flash.utils.Endian;
    import flash.media.Camera;
    import mx.controls.Alert;
    import mx.events.ListEvent;
    import mx.utils.ObjectUtil;
  	import flash.media.Video;
  	import mx.core.UIComponent; 	
  	import flash.display.Bitmap;
    import mx.events.CloseEvent;
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.utils.Timer;
    import flash.events.TimerEvent;
    import flash.events.ActivityEvent;
	import flash.utils.Timer;
    import flash.events.TimerEvent;
    import flash.display.Sprite;
    import mx.core.Window;
    import flash.media.Camera;
    import mx.controls.Alert;
    import mx.events.ListEvent;
    import mx.utils.ObjectUtil;
  	import flash.media.Video;
  	import mx.core.UIComponent; 	
  	import flash.display.Bitmap;
    import mx.events.CloseEvent;
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.utils.Timer;
    import flash.events.TimerEvent;
    import flash.events.ActivityEvent;
    
    private var camera2:Camera;
	private var fr:FileReference;
	private var fr2:FileReference;
	private var connectionIdle:Boolean= new Boolean(true);
	private var camera:Camera;
	private	var imData:ByteArray = new ByteArray;
	private var array:Array = new Array(Camera.names.length);
	
	public var timesec:Timer = new Timer(1000, 0);
	public var contRecieve:int = new int;
 	public var contSend:int = new int;
   	public var videoHolder:UIComponent;
 	public var video:Video;
   	public var videoHolder2:UIComponent;
 	public var video2:Video;
		
	  [Bindable]
    public var timerSetNextFrames:Timer = new Timer(300, 0);

	public function FileOpt():void{
	
			fr2 = new FileReference();
	
		}  
    private function onSave(e:Event):void{
             		
		var textReportName:String = "Report.txt";
		
		}
		
	private function CalculateAll(e:Event):void{
		
			as3JpegWay(e);
			CJpegWay(e);
			DreadnoughtBitmapWay(e);
			
		}

	private function as3JpegWay(e:Event):ByteArray {
	
			var bmpdata:BitmapData = new BitmapData(mySource.width,  mySource.height);
     	    bmpdata.draw(myCanvas); 
			var timer:int = getTimer();
			var s:JPGEncoder = new JPGEncoder();
			var jpg:ByteArray = s.encode(bmpdata);
			return jpg;
				
		}
		
	private function as3PNGWay(e:Event):ByteArray {
			
	        var bmpdata:BitmapData = new BitmapData(mySource.width,  mySource.height);
            bmpdata.draw(myCanvas); 
			var timer:int = getTimer();
			var s:PNGEncoder = new PNGEncoder();
			var png:ByteArray = s.encode(bmpdata);
			return png;
			
		}
		
	private function CJpegWay(e:Event):ByteArray {
				
		    var bmpdata:BitmapData = new BitmapData(mySource.width,  mySource.height);
      	    bmpdata.draw(myCanvas); 
			var timer:int = getTimer();
			var ba:ByteArray = bmpdata.getPixels(new Rectangle(0,0, bi.width , bi.height));
			var ret:ByteArray = as3_jpeg_wrapper.write_jpeg_file(ba, bi.width , bi.height, 3, 2);	
			return ret;
				
			}
			
	private function DreadnoughtBitmapWay(e:Event):ByteArray {
		
			var timer:int = getTimer();
		    var bmpdata:BitmapData = new BitmapData(mySource.width,  mySource.height);
            bmpdata.draw(myCanvas); 	
			var arr:ByteArray = new Bitmap(bmpdata).bitmapData.getPixels(new Rectangle(0,0, bmpdata.width, bmpdata.height));
		    return arr;
		
		}

	public static function encode(bitmapData:BitmapData):ByteArray {
		
			var bmpWidth:int = bitmapData.width;
			var bmpHeight:int = bitmapData.height;
			var imageBytes:ByteArray = bitmapData.getPixels(bitmapData.rect);
			var imageSize:int = imageBytes.length;
			var imageDataOffset:int = 0x36;
			var fileSize:int = imageSize + imageDataOffset;
			var bmpBytes:ByteArray = new ByteArray();
			bmpBytes.endian = Endian.LITTLE_ENDIAN; 
			bmpBytes.length = fileSize;
			bmpBytes.writeByte(0x42);
			bmpBytes.writeByte(0x4D); 
			bmpBytes.writeInt(fileSize);
			bmpBytes.position = 0x0A; 
			bmpBytes.writeInt(imageDataOffset);
			bmpBytes.writeInt(0x28); 
			bmpBytes.position = 0x12; 
			bmpBytes.writeInt(bmpWidth);
			bmpBytes.writeInt(bmpHeight);
			bmpBytes.writeShort(1);
			bmpBytes.writeShort(32);
			bmpBytes.writeInt(0); 
			bmpBytes.writeInt(imageSize);
			bmpBytes.writeUnsignedInt(0x2e30); 
			bmpBytes.writeUnsignedInt(0x2e30);
			bmpBytes.position = imageDataOffset;
			var col:int = bmpWidth;
			var row:int = bmpHeight;
			var rowLength:int = col * 4;
			try {
				imageBytes.position = 0;
				while (row--) {
				
					bmpBytes.position = imageDataOffset + row*rowLength;
					
				
					col = bmpWidth;
					while (col--) {
						bmpBytes.writeInt(imageBytes.readInt());
					}
				}
				
			}catch(error:Error){
			}
			return bmpBytes;
		}
		
			protected function button5_clickHandler(event:MouseEvent):void
			{
				WriteFrameResult.token = broadcastService.WriteFrame(parseInt(cameraIDTextInput4.text),Select(event));
			}

			protected function SetNextFrames_clickHandler(event:Event):void
			{
				timerf();
				 timerSetNextFrames.addEventListener("timer", RecTime);
            timerSetNextFrames.start();
			}
			
	public function RecTime(e:TimerEvent):void{
		WriteFrameResult.token = broadcastService.WriteFrame(parseInt(cameraIDTextInput4.text),Select(e));       
      
}
	private function applicationExitHandler(event:Event):void
    	{
    		
            var openedWindows:Array = NativeApplication.nativeApplication.openedWindows;
            for (var i:int = 0; i < openedWindows.length; i ++) 
            {
            	openedWindows[i].close();
            }
    	}

	protected function init(event:FlexEvent):void
			{
				
			OptionsT.visible = false;
			this.addEventListener(Event.CLOSING, applicationExitHandler);
			videoHolder = new UIComponent();             
  		    camera = Camera.getCamera(data.toString());             
            video = new Video(cnvWebcam.width ,cnvWebcam.height);            
 	        video.attachCamera(camera);                
 	        videoHolder.addChild(video);
 	        cnvWebcam.addChild(videoHolder);  
 	        videoHolder2 = new UIComponent();             
  		    camera2 = Camera.getCamera(data.toString());             
            video2 = new Video(bi.width ,bi.height);            
 	        video2.attachCamera(camera2);                
 	        videoHolder2.addChild(video2);
 	        bi.addChild(videoHolder2);    
 	        CamName.text = camera.name;
 	        FileOpt();
			}

  
 protected function timerf():void
 {
 	
 	timesec.stop();
 	contRecieve = 0;
 	contSend = 0;
    timesec.addEventListener(TimerEvent.TIMER, copp);
 	timesec.start();
 
 }
 
 protected function copp(e:Event):void
 {
 	
 	LastBALaTimerRecieve.text = contRecieve.toString();
 	LastBALaTimerSend.text = contSend.toString();
 	contRecieve = 0;
 	contSend = 0;
 }
 
			protected function Select(e:Event):ByteArray
			{
	
				if(Selector.selectedIndex == 1){	
					imData = CJpegWay(e);
				}
				 if(Selector.selectedIndex == 2){
					imData = as3PNGWay(e);
				}
				 if(Selector.selectedIndex == 0){
					imData = DreadnoughtBitmapWay(e);
				}
				contSend++;
				LastBALa.text = imData.length.toString();
				return imData;
			}

			protected function Fps_changeHandler():Number
			{
			
			  	var delay:Number;
			    delay = Number(1000 / Fps.value);
				timerSetNextFrames.delay =  delay;
				return delay;
			}		

        public function timerHandlerBmp(event:TimerEvent):void {

         DreadnoughtBitmapWay(event);
        }
        
        public function timerHandlerJpeg(event:TimerEvent):void {
     
          CJpegWay(event);
        }

		protected function Selector1_itemClickHandler(event:ItemClickEvent):void
		{
				
			Broad.selected = true;
			SetNextFrames_clickHandler(event);
		}

		protected function Broad_clickHandler(event:MouseEvent):void
		{      
				{
			if(Broad.selected == true)
				{	
					SetNextFrames_clickHandler(event);
					Selector1.selectedIndex = 0
				}
				if(Broad.selected == false)
				{
						timerSetNextFrames.stop();
						Selector1.selectedIndex = -1;
				}
		}
		}

		protected function Selector1_doubleClickHandler(event:MouseEvent):void
		{
			Broad.selected = false;
			timerSetNextFrames.stop();
			Selector1.selectedIndex = -1
		}

		protected function Selector0_clickHandler(event:MouseEvent):void
		{     
			var openedWindows:Array = NativeApplication.nativeApplication.openedWindows;
            for (var i:int = 1; i < openedWindows.length; i ++) 
            {
                openedWindows[i].close();
            }
			var config:Window = new Window();
			config.title = "Опции Камеры: " + CamName.text.toString() + ".";
			config.type = NativeWindowType.UTILITY;
			config.minimizable = false;
			config.maximizable = false;
			config.resizable = false;
			config.verticalScrollPolicy = "off";
			config.horizontalScrollPolicy = "off";
			config.showStatusBar = false
			config.addChild(OptionsT);
			config.width = OptionsT.width;
			config.height = OptionsT.height;
			OptionsT.visible = true;
			config.open()
		}


		protected function WriteFrameResult_resultHandler(event:ResultEvent):void
		{
			contRecieve++;
		}

		protected function ConnectButton_clickHandler(event:MouseEvent):void
		{
			{
			if(ConnectButton.selected == true)
			{	
				broadcastService.wsdl = (WSDLAddress.text.toString() + "?wsdl").toString();		
				broadcastService.serviceControl.initialize();
			}
				if(ConnectButton.selected == false)
				{
					broadcastService.serviceControl.disconnect();	
				}
		}
		}


		protected function CamW_changeHandler(event:NumericStepperEvent):void
		{
			myCanvas.width = CamW.value;
			videoHolder2 = new UIComponent();             
  		    camera2 = Camera.getCamera(data.toString());             
            video2 = new Video(bi.width ,bi.height);            
 	        video2.attachCamera(camera2);                
 	        videoHolder2.addChild(video2);
 	        bi.addChild(videoHolder2);
		}


		protected function CamH_changeHandler(event:NumericStepperEvent):void
		{
			myCanvas.height = CamH.value;
			videoHolder2 = new UIComponent();             
  		    camera2 = Camera.getCamera(data.toString());             
            video2 = new Video(bi.width ,bi.height);            
 	        video2.attachCamera(camera2);                
 	        videoHolder2.addChild(video2);
 	        bi.addChild(videoHolder2);
		}

	]]>
	</mx:Script>
	
	<mx:ApplicationControlBar 
		dock="false"
		fillAlphas="[0.53, 0.58]"
		x="455"
		y="10"
		>
		
		<mx:Canvas 
			width="100%" 
			height="100%"
			id="myCanvas"
			> 
			
			<mx:Button  
				id="mySource"   
				width="100%" 
				height="100%"
				/>
			
			<mx:Canvas
				id="bi"
				width="600" 
				height="600" 
				backgroundColor="#EE0000"
				>
				
			</mx:Canvas>
			
		</mx:Canvas>
		
	</mx:ApplicationControlBar>
	
	<mx:Canvas
		right="0"
		bottom="0"
		>
		
		
		<mx:Form 
			defaultButton="{button5}"
			id="OptionsT"
			visible="true" 
			>
			
			<mx:FormItem
				label="Service address"
				>
				
				<mx:TextInput 
					id="WSDLAddress"
					width="100%"
					/>
				
			</mx:FormItem>
			
			<mx:CheckBox
				label="Подключиться к веб сервису"
				mouseOver="ConnectButton_clickHandler(event)" 
				id="ConnectButton" click="ConnectButton_clickHandler(event)"
				/>
			
			<mx:FormItem 
				label="CameraID"
				>
				
				<mx:TextInput 
					id="cameraIDTextInput4"
					text="1"
					maxChars="3000"
					editable="true" 
					enabled="true"
					width="59"
					/>
				
			</mx:FormItem>
			
			<mx:FormItem 
				label="Количество кадров в секунду"
				>
				
				<mx:NumericStepper 
					id="Fps"
					value="5" 
					minimum="1"
					maximum="30"
					stepSize="1"
					enabled="true"
					change="Fps_changeHandler()"
					/>
				
			</mx:FormItem>
			
			<mx:FormItem
				label="Опции вещания" 
				>
				
				<mx:ToggleButtonBar
					id="Selector"
					selectedIndex="1"
					>
					
					<mx:dataProvider>
						
						<mx:Array>
							
							<mx:String>BMP</mx:String>
							<mx:String>JPEG</mx:String>
							<mx:String>PNG</mx:String>
							
						</mx:Array>
						
					</mx:dataProvider>
					
				</mx:ToggleButtonBar>
				
			</mx:FormItem>
			
			<mx:FormItem
				label="Кадр" 
				width="508"
				>
				
				<mx:HBox 
					width="100%"
					>
					
					<mx:Label
						text="Ширина"
						/>
					
					<mx:NumericStepper 
						id="CamW" 
						change="CamW_changeHandler(event)"
						maximum="1000"
						minimum="1"
						value="600"
						/>
					
					<mx:Label 
						text="Высота"
						/>
					
					<mx:NumericStepper 
						id="CamH"
						change="CamH_changeHandler(event)"
						maximum="1000"
						minimum="1"
						value="600"
						/>
					
				</mx:HBox>
				
			</mx:FormItem>
			
			<mx:HBox
				width="100%"
				height="24"
				verticalAlign="middle"
				horizontalAlign="center"
				>
				
				<mx:Button 
					label="Послать один кадр"
					id="button5"
					click="button5_clickHandler(event)"
					width="167"
					/>
				
				<mx:CheckBox 
					id="Broad" 
					mouseOver="Broad_clickHandler(event)"
					click="Broad_clickHandler(event)"
					label="Потоковое вещание"
					/>
				
			</mx:HBox>
			
			<mx:HBox 
				width="100%"
				>
				
				<mx:FormItem 
					label="Обьем последнего кадка"
					>
					
					<mx:Text 
						id="LastBALa"
						text="Отправка кадов еще не начиналась"
						/>
					
				</mx:FormItem>
				
			</mx:HBox>
			
			<mx:FormItem 
				label="Частота отправки кадров"
				toolTip="в секунду"
				>
				
				<mx:Text
					id="LastBALaTimerSend"
					text="0"
					/>
				
			</mx:FormItem>
			
			<mx:FormItem 
				label="Частота  получения ответов"
				toolTip="в секунду"
				>
				
				<mx:Text 
					id="LastBALaTimerRecieve"
					text="0"
					/>
				
			</mx:FormItem>
			
			<mx:FormItem
				label="Текущие размеры броузера" 
				>
				
				<mx:Text 
					id="LastBALa0"
					text="{'ширина: ' + bi.width.toString() + ' , высота: ' + bi.height.toString() }"
					/>
				
			</mx:FormItem>
			
		</mx:Form>
		
	</mx:Canvas>
	
	<mx:Button 
		id="Selector0" 
		label="Опции" 
		click="Selector0_clickHandler(event)" 
		x="275"
		y="60"
		/>
	
	<mx:ToggleButtonBar 
		id="Selector1" 
		doubleClickEnabled="true"
		doubleClick="Selector1_doubleClickHandler(event)"
		selectedIndex="-1" 
		itemClick="Selector1_itemClickHandler(event);"
		x="126"
		y="59"
		>
		
		<mx:dataProvider>
			
			<mx:Array>
				
				<mx:String>Потоковое вещание</mx:String>
				
			</mx:Array>
			
		</mx:dataProvider>
		
	</mx:ToggleButtonBar>
	
	<mx:Panel
		width="100"
		height="108" 
		layout="absolute"
		title="Вешание"
		backgroundAlpha="0.0"
		x="4" 
		y="8"
		horizontalAlign="center"
		verticalAlign="middle"
		>
		
		<mx:Image  
			source="assets/TV.png" 
			horizontalCenter="0" 
			verticalCenter="0"
			scaleContent="true" autoLoad="true" y="71" width="45" x="70" height="46">
		</mx:Image>
		
		<mx:Canvas
			id="cnvWebcam" 
			visible="true" 
			left="0" 
			right="0" 
			top="0"
			bottom="0"
			>
			
		</mx:Canvas>
		
	</mx:Panel>
	
	<mx:Label 
		x="127"
		y="15"
		text="Название"
		id="CamName"
		/>
	
</mx:Canvas>
