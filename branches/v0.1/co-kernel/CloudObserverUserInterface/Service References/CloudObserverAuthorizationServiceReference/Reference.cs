//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40624.0
// 
namespace CloudObserverUserInterface.CloudObserverAuthorizationServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CloudObserverAuthorizationServiceReference.ICloudObserverAuthorizationService")]
    public interface ICloudObserverAuthorizationService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverAuthorizationService/UserIsEmailAvailable", ReplyAction="http://tempuri.org/ICloudObserverAuthorizationService/UserIsEmailAvailableRespons" +
            "e")]
        System.IAsyncResult BeginUserIsEmailAvailable(string email, System.AsyncCallback callback, object asyncState);
        
        bool EndUserIsEmailAvailable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverAuthorizationService/UserLogin", ReplyAction="http://tempuri.org/ICloudObserverAuthorizationService/UserLoginResponse")]
        System.IAsyncResult BeginUserLogin(string email, string password, System.AsyncCallback callback, object asyncState);
        
        bool EndUserLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverAuthorizationService/UserAdd", ReplyAction="http://tempuri.org/ICloudObserverAuthorizationService/UserAddResponse")]
        System.IAsyncResult BeginUserAdd(string email, string password, string name, string description, byte[] icon, System.AsyncCallback callback, object asyncState);
        
        int EndUserAdd(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface ICloudObserverAuthorizationServiceChannel : CloudObserverUserInterface.CloudObserverAuthorizationServiceReference.ICloudObserverAuthorizationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class UserIsEmailAvailableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UserIsEmailAvailableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class UserLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UserLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class UserAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UserAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class CloudObserverAuthorizationServiceClient : System.ServiceModel.ClientBase<CloudObserverUserInterface.CloudObserverAuthorizationServiceReference.ICloudObserverAuthorizationService>, CloudObserverUserInterface.CloudObserverAuthorizationServiceReference.ICloudObserverAuthorizationService {
        
        private BeginOperationDelegate onBeginUserIsEmailAvailableDelegate;
        
        private EndOperationDelegate onEndUserIsEmailAvailableDelegate;
        
        private System.Threading.SendOrPostCallback onUserIsEmailAvailableCompletedDelegate;
        
        private BeginOperationDelegate onBeginUserLoginDelegate;
        
        private EndOperationDelegate onEndUserLoginDelegate;
        
        private System.Threading.SendOrPostCallback onUserLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginUserAddDelegate;
        
        private EndOperationDelegate onEndUserAddDelegate;
        
        private System.Threading.SendOrPostCallback onUserAddCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public CloudObserverAuthorizationServiceClient() {
        }
        
        public CloudObserverAuthorizationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CloudObserverAuthorizationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CloudObserverAuthorizationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CloudObserverAuthorizationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<UserIsEmailAvailableCompletedEventArgs> UserIsEmailAvailableCompleted;
        
        public event System.EventHandler<UserLoginCompletedEventArgs> UserLoginCompleted;
        
        public event System.EventHandler<UserAddCompletedEventArgs> UserAddCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverAuthorizationServiceReference.ICloudObserverAuthorizationService.BeginUserIsEmailAvailable(string email, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUserIsEmailAvailable(email, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool CloudObserverUserInterface.CloudObserverAuthorizationServiceReference.ICloudObserverAuthorizationService.EndUserIsEmailAvailable(System.IAsyncResult result) {
            return base.Channel.EndUserIsEmailAvailable(result);
        }
        
        private System.IAsyncResult OnBeginUserIsEmailAvailable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string email = ((string)(inValues[0]));
            return ((CloudObserverUserInterface.CloudObserverAuthorizationServiceReference.ICloudObserverAuthorizationService)(this)).BeginUserIsEmailAvailable(email, callback, asyncState);
        }
        
        private object[] OnEndUserIsEmailAvailable(System.IAsyncResult result) {
            bool retVal = ((CloudObserverUserInterface.CloudObserverAuthorizationServiceReference.ICloudObserverAuthorizationService)(this)).EndUserIsEmailAvailable(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUserIsEmailAvailableCompleted(object state) {
            if ((this.UserIsEmailAvailableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UserIsEmailAvailableCompleted(this, new UserIsEmailAvailableCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UserIsEmailAvailableAsync(string email) {
            this.UserIsEmailAvailableAsync(email, null);
        }
        
        public void UserIsEmailAvailableAsync(string email, object userState) {
            if ((this.onBeginUserIsEmailAvailableDelegate == null)) {
                this.onBeginUserIsEmailAvailableDelegate = new BeginOperationDelegate(this.OnBeginUserIsEmailAvailable);
            }
            if ((this.onEndUserIsEmailAvailableDelegate == null)) {
                this.onEndUserIsEmailAvailableDelegate = new EndOperationDelegate(this.OnEndUserIsEmailAvailable);
            }
            if ((this.onUserIsEmailAvailableCompletedDelegate == null)) {
                this.onUserIsEmailAvailableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUserIsEmailAvailableCompleted);
            }
            base.InvokeAsync(this.onBeginUserIsEmailAvailableDelegate, new object[] {
                        email}, this.onEndUserIsEmailAvailableDelegate, this.onUserIsEmailAvailableCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverAuthorizationServiceReference.ICloudObserverAuthorizationService.BeginUserLogin(string email, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUserLogin(email, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool CloudObserverUserInterface.CloudObserverAuthorizationServiceReference.ICloudObserverAuthorizationService.EndUserLogin(System.IAsyncResult result) {
            return base.Channel.EndUserLogin(result);
        }
        
        private System.IAsyncResult OnBeginUserLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string email = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((CloudObserverUserInterface.CloudObserverAuthorizationServiceReference.ICloudObserverAuthorizationService)(this)).BeginUserLogin(email, password, callback, asyncState);
        }
        
        private object[] OnEndUserLogin(System.IAsyncResult result) {
            bool retVal = ((CloudObserverUserInterface.CloudObserverAuthorizationServiceReference.ICloudObserverAuthorizationService)(this)).EndUserLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUserLoginCompleted(object state) {
            if ((this.UserLoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UserLoginCompleted(this, new UserLoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UserLoginAsync(string email, string password) {
            this.UserLoginAsync(email, password, null);
        }
        
        public void UserLoginAsync(string email, string password, object userState) {
            if ((this.onBeginUserLoginDelegate == null)) {
                this.onBeginUserLoginDelegate = new BeginOperationDelegate(this.OnBeginUserLogin);
            }
            if ((this.onEndUserLoginDelegate == null)) {
                this.onEndUserLoginDelegate = new EndOperationDelegate(this.OnEndUserLogin);
            }
            if ((this.onUserLoginCompletedDelegate == null)) {
                this.onUserLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUserLoginCompleted);
            }
            base.InvokeAsync(this.onBeginUserLoginDelegate, new object[] {
                        email,
                        password}, this.onEndUserLoginDelegate, this.onUserLoginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverAuthorizationServiceReference.ICloudObserverAuthorizationService.BeginUserAdd(string email, string password, string name, string description, byte[] icon, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUserAdd(email, password, name, description, icon, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int CloudObserverUserInterface.CloudObserverAuthorizationServiceReference.ICloudObserverAuthorizationService.EndUserAdd(System.IAsyncResult result) {
            return base.Channel.EndUserAdd(result);
        }
        
        private System.IAsyncResult OnBeginUserAdd(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string email = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            string name = ((string)(inValues[2]));
            string description = ((string)(inValues[3]));
            byte[] icon = ((byte[])(inValues[4]));
            return ((CloudObserverUserInterface.CloudObserverAuthorizationServiceReference.ICloudObserverAuthorizationService)(this)).BeginUserAdd(email, password, name, description, icon, callback, asyncState);
        }
        
        private object[] OnEndUserAdd(System.IAsyncResult result) {
            int retVal = ((CloudObserverUserInterface.CloudObserverAuthorizationServiceReference.ICloudObserverAuthorizationService)(this)).EndUserAdd(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUserAddCompleted(object state) {
            if ((this.UserAddCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UserAddCompleted(this, new UserAddCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UserAddAsync(string email, string password, string name, string description, byte[] icon) {
            this.UserAddAsync(email, password, name, description, icon, null);
        }
        
        public void UserAddAsync(string email, string password, string name, string description, byte[] icon, object userState) {
            if ((this.onBeginUserAddDelegate == null)) {
                this.onBeginUserAddDelegate = new BeginOperationDelegate(this.OnBeginUserAdd);
            }
            if ((this.onEndUserAddDelegate == null)) {
                this.onEndUserAddDelegate = new EndOperationDelegate(this.OnEndUserAdd);
            }
            if ((this.onUserAddCompletedDelegate == null)) {
                this.onUserAddCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUserAddCompleted);
            }
            base.InvokeAsync(this.onBeginUserAddDelegate, new object[] {
                        email,
                        password,
                        name,
                        description,
                        icon}, this.onEndUserAddDelegate, this.onUserAddCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override CloudObserverUserInterface.CloudObserverAuthorizationServiceReference.ICloudObserverAuthorizationService CreateChannel() {
            return new CloudObserverAuthorizationServiceClientChannel(this);
        }
        
        private class CloudObserverAuthorizationServiceClientChannel : ChannelBase<CloudObserverUserInterface.CloudObserverAuthorizationServiceReference.ICloudObserverAuthorizationService>, CloudObserverUserInterface.CloudObserverAuthorizationServiceReference.ICloudObserverAuthorizationService {
            
            public CloudObserverAuthorizationServiceClientChannel(System.ServiceModel.ClientBase<CloudObserverUserInterface.CloudObserverAuthorizationServiceReference.ICloudObserverAuthorizationService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginUserIsEmailAvailable(string email, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = email;
                System.IAsyncResult _result = base.BeginInvoke("UserIsEmailAvailable", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndUserIsEmailAvailable(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("UserIsEmailAvailable", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUserLogin(string email, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = email;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("UserLogin", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndUserLogin(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("UserLogin", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUserAdd(string email, string password, string name, string description, byte[] icon, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = email;
                _args[1] = password;
                _args[2] = name;
                _args[3] = description;
                _args[4] = icon;
                System.IAsyncResult _result = base.BeginInvoke("UserAdd", _args, callback, asyncState);
                return _result;
            }
            
            public int EndUserAdd(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("UserAdd", _args, result)));
                return _result;
            }
        }
    }
}
