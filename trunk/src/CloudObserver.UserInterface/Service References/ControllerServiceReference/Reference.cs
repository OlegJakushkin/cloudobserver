//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40624.0
// 
namespace CloudObserver.UserInterface.ControllerServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceType", Namespace="http://schemas.datacontract.org/2004/07/CloudObserver.Services")]
    public enum ServiceType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownService = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ControllerService = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AuthenticationService = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AccountsService = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BroadcastService = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StorageService = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IPCamerasService = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TestSoundService = 7,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ControllerServiceReference.ControllerServiceContract")]
    public interface ControllerServiceContract {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ControllerServiceContract/GetServiceUri", ReplyAction="http://tempuri.org/ControllerServiceContract/GetServiceUriResponse")]
        System.IAsyncResult BeginGetServiceUri(CloudObserver.UserInterface.ControllerServiceReference.ServiceType serviceType, System.AsyncCallback callback, object asyncState);
        
        string EndGetServiceUri(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ControllerServiceContract/SetServiceUri", ReplyAction="http://tempuri.org/ControllerServiceContract/SetServiceUriResponse")]
        System.IAsyncResult BeginSetServiceUri(CloudObserver.UserInterface.ControllerServiceReference.ServiceType serviceType, string serviceUri, System.AsyncCallback callback, object asyncState);
        
        void EndSetServiceUri(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface ControllerServiceContractChannel : CloudObserver.UserInterface.ControllerServiceReference.ControllerServiceContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetServiceUriCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetServiceUriCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class ControllerServiceContractClient : System.ServiceModel.ClientBase<CloudObserver.UserInterface.ControllerServiceReference.ControllerServiceContract>, CloudObserver.UserInterface.ControllerServiceReference.ControllerServiceContract {
        
        private BeginOperationDelegate onBeginGetServiceUriDelegate;
        
        private EndOperationDelegate onEndGetServiceUriDelegate;
        
        private System.Threading.SendOrPostCallback onGetServiceUriCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetServiceUriDelegate;
        
        private EndOperationDelegate onEndSetServiceUriDelegate;
        
        private System.Threading.SendOrPostCallback onSetServiceUriCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ControllerServiceContractClient() {
        }
        
        public ControllerServiceContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ControllerServiceContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ControllerServiceContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ControllerServiceContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetServiceUriCompletedEventArgs> GetServiceUriCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetServiceUriCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserver.UserInterface.ControllerServiceReference.ControllerServiceContract.BeginGetServiceUri(CloudObserver.UserInterface.ControllerServiceReference.ServiceType serviceType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetServiceUri(serviceType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string CloudObserver.UserInterface.ControllerServiceReference.ControllerServiceContract.EndGetServiceUri(System.IAsyncResult result) {
            return base.Channel.EndGetServiceUri(result);
        }
        
        private System.IAsyncResult OnBeginGetServiceUri(object[] inValues, System.AsyncCallback callback, object asyncState) {
            CloudObserver.UserInterface.ControllerServiceReference.ServiceType serviceType = ((CloudObserver.UserInterface.ControllerServiceReference.ServiceType)(inValues[0]));
            return ((CloudObserver.UserInterface.ControllerServiceReference.ControllerServiceContract)(this)).BeginGetServiceUri(serviceType, callback, asyncState);
        }
        
        private object[] OnEndGetServiceUri(System.IAsyncResult result) {
            string retVal = ((CloudObserver.UserInterface.ControllerServiceReference.ControllerServiceContract)(this)).EndGetServiceUri(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetServiceUriCompleted(object state) {
            if ((this.GetServiceUriCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetServiceUriCompleted(this, new GetServiceUriCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetServiceUriAsync(CloudObserver.UserInterface.ControllerServiceReference.ServiceType serviceType) {
            this.GetServiceUriAsync(serviceType, null);
        }
        
        public void GetServiceUriAsync(CloudObserver.UserInterface.ControllerServiceReference.ServiceType serviceType, object userState) {
            if ((this.onBeginGetServiceUriDelegate == null)) {
                this.onBeginGetServiceUriDelegate = new BeginOperationDelegate(this.OnBeginGetServiceUri);
            }
            if ((this.onEndGetServiceUriDelegate == null)) {
                this.onEndGetServiceUriDelegate = new EndOperationDelegate(this.OnEndGetServiceUri);
            }
            if ((this.onGetServiceUriCompletedDelegate == null)) {
                this.onGetServiceUriCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetServiceUriCompleted);
            }
            base.InvokeAsync(this.onBeginGetServiceUriDelegate, new object[] {
                        serviceType}, this.onEndGetServiceUriDelegate, this.onGetServiceUriCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserver.UserInterface.ControllerServiceReference.ControllerServiceContract.BeginSetServiceUri(CloudObserver.UserInterface.ControllerServiceReference.ServiceType serviceType, string serviceUri, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetServiceUri(serviceType, serviceUri, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void CloudObserver.UserInterface.ControllerServiceReference.ControllerServiceContract.EndSetServiceUri(System.IAsyncResult result) {
            base.Channel.EndSetServiceUri(result);
        }
        
        private System.IAsyncResult OnBeginSetServiceUri(object[] inValues, System.AsyncCallback callback, object asyncState) {
            CloudObserver.UserInterface.ControllerServiceReference.ServiceType serviceType = ((CloudObserver.UserInterface.ControllerServiceReference.ServiceType)(inValues[0]));
            string serviceUri = ((string)(inValues[1]));
            return ((CloudObserver.UserInterface.ControllerServiceReference.ControllerServiceContract)(this)).BeginSetServiceUri(serviceType, serviceUri, callback, asyncState);
        }
        
        private object[] OnEndSetServiceUri(System.IAsyncResult result) {
            ((CloudObserver.UserInterface.ControllerServiceReference.ControllerServiceContract)(this)).EndSetServiceUri(result);
            return null;
        }
        
        private void OnSetServiceUriCompleted(object state) {
            if ((this.SetServiceUriCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetServiceUriCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetServiceUriAsync(CloudObserver.UserInterface.ControllerServiceReference.ServiceType serviceType, string serviceUri) {
            this.SetServiceUriAsync(serviceType, serviceUri, null);
        }
        
        public void SetServiceUriAsync(CloudObserver.UserInterface.ControllerServiceReference.ServiceType serviceType, string serviceUri, object userState) {
            if ((this.onBeginSetServiceUriDelegate == null)) {
                this.onBeginSetServiceUriDelegate = new BeginOperationDelegate(this.OnBeginSetServiceUri);
            }
            if ((this.onEndSetServiceUriDelegate == null)) {
                this.onEndSetServiceUriDelegate = new EndOperationDelegate(this.OnEndSetServiceUri);
            }
            if ((this.onSetServiceUriCompletedDelegate == null)) {
                this.onSetServiceUriCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetServiceUriCompleted);
            }
            base.InvokeAsync(this.onBeginSetServiceUriDelegate, new object[] {
                        serviceType,
                        serviceUri}, this.onEndSetServiceUriDelegate, this.onSetServiceUriCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override CloudObserver.UserInterface.ControllerServiceReference.ControllerServiceContract CreateChannel() {
            return new ControllerServiceContractClientChannel(this);
        }
        
        private class ControllerServiceContractClientChannel : ChannelBase<CloudObserver.UserInterface.ControllerServiceReference.ControllerServiceContract>, CloudObserver.UserInterface.ControllerServiceReference.ControllerServiceContract {
            
            public ControllerServiceContractClientChannel(System.ServiceModel.ClientBase<CloudObserver.UserInterface.ControllerServiceReference.ControllerServiceContract> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetServiceUri(CloudObserver.UserInterface.ControllerServiceReference.ServiceType serviceType, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = serviceType;
                System.IAsyncResult _result = base.BeginInvoke("GetServiceUri", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetServiceUri(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetServiceUri", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSetServiceUri(CloudObserver.UserInterface.ControllerServiceReference.ServiceType serviceType, string serviceUri, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = serviceType;
                _args[1] = serviceUri;
                System.IAsyncResult _result = base.BeginInvoke("SetServiceUri", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSetServiceUri(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SetServiceUri", _args, result);
            }
        }
    }
}
