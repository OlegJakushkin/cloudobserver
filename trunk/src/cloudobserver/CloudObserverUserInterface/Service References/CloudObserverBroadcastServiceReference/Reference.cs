//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40624.0
// 
namespace CloudObserverUserInterface.CloudObserverBroadcastServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CloudObserverBroadcastServiceReference.ICloudObserverBroadcastService")]
    public interface ICloudObserverBroadcastService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverBroadcastService/BindMeToCamera", ReplyAction="http://tempuri.org/ICloudObserverBroadcastService/BindMeToCameraResponse")]
        System.IAsyncResult BeginBindMeToCamera(int clientID, int cameraID, string UID, System.AsyncCallback callback, object asyncState);
        
        void EndBindMeToCamera(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverBroadcastService/SetMeAsCamera", ReplyAction="http://tempuri.org/ICloudObserverBroadcastService/SetMeAsCameraResponse")]
        System.IAsyncResult BeginSetMeAsCamera(int cameraID, string UID, System.AsyncCallback callback, object asyncState);
        
        void EndSetMeAsCamera(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverBroadcastService/GetNextFrame", ReplyAction="http://tempuri.org/ICloudObserverBroadcastService/GetNextFrameResponse")]
        System.IAsyncResult BeginGetNextFrame(int cameraID, string UID, System.AsyncCallback callback, object asyncState);
        
        byte[] EndGetNextFrame(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverBroadcastService/SetNextFrame", ReplyAction="http://tempuri.org/ICloudObserverBroadcastService/SetNextFrameResponse")]
        System.IAsyncResult BeginSetNextFrame(byte[] frame, string UID, System.AsyncCallback callback, object asyncState);
        
        void EndSetNextFrame(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface ICloudObserverBroadcastServiceChannel : CloudObserverUserInterface.CloudObserverBroadcastServiceReference.ICloudObserverBroadcastService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetNextFrameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNextFrameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class CloudObserverBroadcastServiceClient : System.ServiceModel.ClientBase<CloudObserverUserInterface.CloudObserverBroadcastServiceReference.ICloudObserverBroadcastService>, CloudObserverUserInterface.CloudObserverBroadcastServiceReference.ICloudObserverBroadcastService {
        
        private BeginOperationDelegate onBeginBindMeToCameraDelegate;
        
        private EndOperationDelegate onEndBindMeToCameraDelegate;
        
        private System.Threading.SendOrPostCallback onBindMeToCameraCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetMeAsCameraDelegate;
        
        private EndOperationDelegate onEndSetMeAsCameraDelegate;
        
        private System.Threading.SendOrPostCallback onSetMeAsCameraCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNextFrameDelegate;
        
        private EndOperationDelegate onEndGetNextFrameDelegate;
        
        private System.Threading.SendOrPostCallback onGetNextFrameCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetNextFrameDelegate;
        
        private EndOperationDelegate onEndSetNextFrameDelegate;
        
        private System.Threading.SendOrPostCallback onSetNextFrameCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public CloudObserverBroadcastServiceClient() {
        }
        
        public CloudObserverBroadcastServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CloudObserverBroadcastServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CloudObserverBroadcastServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CloudObserverBroadcastServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> BindMeToCameraCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetMeAsCameraCompleted;
        
        public event System.EventHandler<GetNextFrameCompletedEventArgs> GetNextFrameCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetNextFrameCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverBroadcastServiceReference.ICloudObserverBroadcastService.BeginBindMeToCamera(int clientID, int cameraID, string UID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBindMeToCamera(clientID, cameraID, UID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void CloudObserverUserInterface.CloudObserverBroadcastServiceReference.ICloudObserverBroadcastService.EndBindMeToCamera(System.IAsyncResult result) {
            base.Channel.EndBindMeToCamera(result);
        }
        
        private System.IAsyncResult OnBeginBindMeToCamera(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int clientID = ((int)(inValues[0]));
            int cameraID = ((int)(inValues[1]));
            string UID = ((string)(inValues[2]));
            return ((CloudObserverUserInterface.CloudObserverBroadcastServiceReference.ICloudObserverBroadcastService)(this)).BeginBindMeToCamera(clientID, cameraID, UID, callback, asyncState);
        }
        
        private object[] OnEndBindMeToCamera(System.IAsyncResult result) {
            ((CloudObserverUserInterface.CloudObserverBroadcastServiceReference.ICloudObserverBroadcastService)(this)).EndBindMeToCamera(result);
            return null;
        }
        
        private void OnBindMeToCameraCompleted(object state) {
            if ((this.BindMeToCameraCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BindMeToCameraCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BindMeToCameraAsync(int clientID, int cameraID, string UID) {
            this.BindMeToCameraAsync(clientID, cameraID, UID, null);
        }
        
        public void BindMeToCameraAsync(int clientID, int cameraID, string UID, object userState) {
            if ((this.onBeginBindMeToCameraDelegate == null)) {
                this.onBeginBindMeToCameraDelegate = new BeginOperationDelegate(this.OnBeginBindMeToCamera);
            }
            if ((this.onEndBindMeToCameraDelegate == null)) {
                this.onEndBindMeToCameraDelegate = new EndOperationDelegate(this.OnEndBindMeToCamera);
            }
            if ((this.onBindMeToCameraCompletedDelegate == null)) {
                this.onBindMeToCameraCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBindMeToCameraCompleted);
            }
            base.InvokeAsync(this.onBeginBindMeToCameraDelegate, new object[] {
                        clientID,
                        cameraID,
                        UID}, this.onEndBindMeToCameraDelegate, this.onBindMeToCameraCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverBroadcastServiceReference.ICloudObserverBroadcastService.BeginSetMeAsCamera(int cameraID, string UID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetMeAsCamera(cameraID, UID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void CloudObserverUserInterface.CloudObserverBroadcastServiceReference.ICloudObserverBroadcastService.EndSetMeAsCamera(System.IAsyncResult result) {
            base.Channel.EndSetMeAsCamera(result);
        }
        
        private System.IAsyncResult OnBeginSetMeAsCamera(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int cameraID = ((int)(inValues[0]));
            string UID = ((string)(inValues[1]));
            return ((CloudObserverUserInterface.CloudObserverBroadcastServiceReference.ICloudObserverBroadcastService)(this)).BeginSetMeAsCamera(cameraID, UID, callback, asyncState);
        }
        
        private object[] OnEndSetMeAsCamera(System.IAsyncResult result) {
            ((CloudObserverUserInterface.CloudObserverBroadcastServiceReference.ICloudObserverBroadcastService)(this)).EndSetMeAsCamera(result);
            return null;
        }
        
        private void OnSetMeAsCameraCompleted(object state) {
            if ((this.SetMeAsCameraCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetMeAsCameraCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetMeAsCameraAsync(int cameraID, string UID) {
            this.SetMeAsCameraAsync(cameraID, UID, null);
        }
        
        public void SetMeAsCameraAsync(int cameraID, string UID, object userState) {
            if ((this.onBeginSetMeAsCameraDelegate == null)) {
                this.onBeginSetMeAsCameraDelegate = new BeginOperationDelegate(this.OnBeginSetMeAsCamera);
            }
            if ((this.onEndSetMeAsCameraDelegate == null)) {
                this.onEndSetMeAsCameraDelegate = new EndOperationDelegate(this.OnEndSetMeAsCamera);
            }
            if ((this.onSetMeAsCameraCompletedDelegate == null)) {
                this.onSetMeAsCameraCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetMeAsCameraCompleted);
            }
            base.InvokeAsync(this.onBeginSetMeAsCameraDelegate, new object[] {
                        cameraID,
                        UID}, this.onEndSetMeAsCameraDelegate, this.onSetMeAsCameraCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverBroadcastServiceReference.ICloudObserverBroadcastService.BeginGetNextFrame(int cameraID, string UID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNextFrame(cameraID, UID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] CloudObserverUserInterface.CloudObserverBroadcastServiceReference.ICloudObserverBroadcastService.EndGetNextFrame(System.IAsyncResult result) {
            return base.Channel.EndGetNextFrame(result);
        }
        
        private System.IAsyncResult OnBeginGetNextFrame(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int cameraID = ((int)(inValues[0]));
            string UID = ((string)(inValues[1]));
            return ((CloudObserverUserInterface.CloudObserverBroadcastServiceReference.ICloudObserverBroadcastService)(this)).BeginGetNextFrame(cameraID, UID, callback, asyncState);
        }
        
        private object[] OnEndGetNextFrame(System.IAsyncResult result) {
            byte[] retVal = ((CloudObserverUserInterface.CloudObserverBroadcastServiceReference.ICloudObserverBroadcastService)(this)).EndGetNextFrame(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNextFrameCompleted(object state) {
            if ((this.GetNextFrameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNextFrameCompleted(this, new GetNextFrameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNextFrameAsync(int cameraID, string UID) {
            this.GetNextFrameAsync(cameraID, UID, null);
        }
        
        public void GetNextFrameAsync(int cameraID, string UID, object userState) {
            if ((this.onBeginGetNextFrameDelegate == null)) {
                this.onBeginGetNextFrameDelegate = new BeginOperationDelegate(this.OnBeginGetNextFrame);
            }
            if ((this.onEndGetNextFrameDelegate == null)) {
                this.onEndGetNextFrameDelegate = new EndOperationDelegate(this.OnEndGetNextFrame);
            }
            if ((this.onGetNextFrameCompletedDelegate == null)) {
                this.onGetNextFrameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNextFrameCompleted);
            }
            base.InvokeAsync(this.onBeginGetNextFrameDelegate, new object[] {
                        cameraID,
                        UID}, this.onEndGetNextFrameDelegate, this.onGetNextFrameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverBroadcastServiceReference.ICloudObserverBroadcastService.BeginSetNextFrame(byte[] frame, string UID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetNextFrame(frame, UID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void CloudObserverUserInterface.CloudObserverBroadcastServiceReference.ICloudObserverBroadcastService.EndSetNextFrame(System.IAsyncResult result) {
            base.Channel.EndSetNextFrame(result);
        }
        
        private System.IAsyncResult OnBeginSetNextFrame(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte[] frame = ((byte[])(inValues[0]));
            string UID = ((string)(inValues[1]));
            return ((CloudObserverUserInterface.CloudObserverBroadcastServiceReference.ICloudObserverBroadcastService)(this)).BeginSetNextFrame(frame, UID, callback, asyncState);
        }
        
        private object[] OnEndSetNextFrame(System.IAsyncResult result) {
            ((CloudObserverUserInterface.CloudObserverBroadcastServiceReference.ICloudObserverBroadcastService)(this)).EndSetNextFrame(result);
            return null;
        }
        
        private void OnSetNextFrameCompleted(object state) {
            if ((this.SetNextFrameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetNextFrameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetNextFrameAsync(byte[] frame, string UID) {
            this.SetNextFrameAsync(frame, UID, null);
        }
        
        public void SetNextFrameAsync(byte[] frame, string UID, object userState) {
            if ((this.onBeginSetNextFrameDelegate == null)) {
                this.onBeginSetNextFrameDelegate = new BeginOperationDelegate(this.OnBeginSetNextFrame);
            }
            if ((this.onEndSetNextFrameDelegate == null)) {
                this.onEndSetNextFrameDelegate = new EndOperationDelegate(this.OnEndSetNextFrame);
            }
            if ((this.onSetNextFrameCompletedDelegate == null)) {
                this.onSetNextFrameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetNextFrameCompleted);
            }
            base.InvokeAsync(this.onBeginSetNextFrameDelegate, new object[] {
                        frame,
                        UID}, this.onEndSetNextFrameDelegate, this.onSetNextFrameCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override CloudObserverUserInterface.CloudObserverBroadcastServiceReference.ICloudObserverBroadcastService CreateChannel() {
            return new CloudObserverBroadcastServiceClientChannel(this);
        }
        
        private class CloudObserverBroadcastServiceClientChannel : ChannelBase<CloudObserverUserInterface.CloudObserverBroadcastServiceReference.ICloudObserverBroadcastService>, CloudObserverUserInterface.CloudObserverBroadcastServiceReference.ICloudObserverBroadcastService {
            
            public CloudObserverBroadcastServiceClientChannel(System.ServiceModel.ClientBase<CloudObserverUserInterface.CloudObserverBroadcastServiceReference.ICloudObserverBroadcastService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginBindMeToCamera(int clientID, int cameraID, string UID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = clientID;
                _args[1] = cameraID;
                _args[2] = UID;
                System.IAsyncResult _result = base.BeginInvoke("BindMeToCamera", _args, callback, asyncState);
                return _result;
            }
            
            public void EndBindMeToCamera(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("BindMeToCamera", _args, result);
            }
            
            public System.IAsyncResult BeginSetMeAsCamera(int cameraID, string UID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = cameraID;
                _args[1] = UID;
                System.IAsyncResult _result = base.BeginInvoke("SetMeAsCamera", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSetMeAsCamera(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SetMeAsCamera", _args, result);
            }
            
            public System.IAsyncResult BeginGetNextFrame(int cameraID, string UID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = cameraID;
                _args[1] = UID;
                System.IAsyncResult _result = base.BeginInvoke("GetNextFrame", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndGetNextFrame(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("GetNextFrame", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSetNextFrame(byte[] frame, string UID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = frame;
                _args[1] = UID;
                System.IAsyncResult _result = base.BeginInvoke("SetNextFrame", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSetNextFrame(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SetNextFrame", _args, result);
            }
        }
    }
}
