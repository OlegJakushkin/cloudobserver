//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40624.0
// 
namespace CloudObserverUserInterface.CloudObserverServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CloudObserverServiceReference.ICloudObserverService")]
    public interface ICloudObserverService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/SetGroupMemberPrivileges", ReplyAction="http://tempuri.org/ICloudObserverService/SetGroupMemberPrivilegesResponse")]
        System.IAsyncResult BeginSetGroupMemberPrivileges(int userID, int groupID, int privileges, System.AsyncCallback callback, object asyncState);
        
        void EndSetGroupMemberPrivileges(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/RemoveGroupMember", ReplyAction="http://tempuri.org/ICloudObserverService/RemoveGroupMemberResponse")]
        System.IAsyncResult BeginRemoveGroupMember(int userID, int groupID, System.AsyncCallback callback, object asyncState);
        
        void EndRemoveGroupMember(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/AddGroupCamera", ReplyAction="http://tempuri.org/ICloudObserverService/AddGroupCameraResponse")]
        System.IAsyncResult BeginAddGroupCamera(int cameraID, int groupID, System.AsyncCallback callback, object asyncState);
        
        void EndAddGroupCamera(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/RemoveGroupCamera", ReplyAction="http://tempuri.org/ICloudObserverService/RemoveGroupCameraResponse")]
        System.IAsyncResult BeginRemoveGroupCamera(int cameraID, int groupID, System.AsyncCallback callback, object asyncState);
        
        void EndRemoveGroupCamera(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/IsCameraRegistered", ReplyAction="http://tempuri.org/ICloudObserverService/IsCameraRegisteredResponse")]
        System.IAsyncResult BeginIsCameraRegistered(string path, System.AsyncCallback callback, object asyncState);
        
        bool EndIsCameraRegistered(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/RegisterCamera", ReplyAction="http://tempuri.org/ICloudObserverService/RegisterCameraResponse")]
        System.IAsyncResult BeginRegisterCamera(string name, System.AsyncCallback callback, object asyncState);
        
        int EndRegisterCamera(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/RemoveCamera", ReplyAction="http://tempuri.org/ICloudObserverService/RemoveCameraResponse")]
        System.IAsyncResult BeginRemoveCamera(int cameraID, System.AsyncCallback callback, object asyncState);
        
        void EndRemoveCamera(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/GetCameraID", ReplyAction="http://tempuri.org/ICloudObserverService/GetCameraIDResponse")]
        System.IAsyncResult BeginGetCameraID(string path, System.AsyncCallback callback, object asyncState);
        
        int EndGetCameraID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/GetCameraPath", ReplyAction="http://tempuri.org/ICloudObserverService/GetCameraPathResponse")]
        System.IAsyncResult BeginGetCameraPath(int cameraID, System.AsyncCallback callback, object asyncState);
        
        string EndGetCameraPath(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/GetCameraName", ReplyAction="http://tempuri.org/ICloudObserverService/GetCameraNameResponse")]
        System.IAsyncResult BeginGetCameraName(int cameraID, System.AsyncCallback callback, object asyncState);
        
        string EndGetCameraName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/GetCameraDescription", ReplyAction="http://tempuri.org/ICloudObserverService/GetCameraDescriptionResponse")]
        System.IAsyncResult BeginGetCameraDescription(int cameraID, System.AsyncCallback callback, object asyncState);
        
        string EndGetCameraDescription(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/GetCameraIcon", ReplyAction="http://tempuri.org/ICloudObserverService/GetCameraIconResponse")]
        System.IAsyncResult BeginGetCameraIcon(int cameraID, System.AsyncCallback callback, object asyncState);
        
        byte[] EndGetCameraIcon(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/GetCameraRegistrationDate", ReplyAction="http://tempuri.org/ICloudObserverService/GetCameraRegistrationDateResponse")]
        System.IAsyncResult BeginGetCameraRegistrationDate(int cameraID, System.AsyncCallback callback, object asyncState);
        
        System.DateTime EndGetCameraRegistrationDate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/GetCameraGroups", ReplyAction="http://tempuri.org/ICloudObserverService/GetCameraGroupsResponse")]
        System.IAsyncResult BeginGetCameraGroups(int cameraID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<int> EndGetCameraGroups(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/GetCameraFrames", ReplyAction="http://tempuri.org/ICloudObserverService/GetCameraFramesResponse")]
        System.IAsyncResult BeginGetCameraFrames(int cameraID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<int> EndGetCameraFrames(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/SetCameraName", ReplyAction="http://tempuri.org/ICloudObserverService/SetCameraNameResponse")]
        System.IAsyncResult BeginSetCameraName(int cameraID, string name, System.AsyncCallback callback, object asyncState);
        
        void EndSetCameraName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/SetCameraDescription", ReplyAction="http://tempuri.org/ICloudObserverService/SetCameraDescriptionResponse")]
        System.IAsyncResult BeginSetCameraDescription(int cameraID, string description, System.AsyncCallback callback, object asyncState);
        
        void EndSetCameraDescription(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/SetCameraIcon", ReplyAction="http://tempuri.org/ICloudObserverService/SetCameraIconResponse")]
        System.IAsyncResult BeginSetCameraIcon(int cameraID, byte[] icon, System.AsyncCallback callback, object asyncState);
        
        void EndSetCameraIcon(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/AddFrame", ReplyAction="http://tempuri.org/ICloudObserverService/AddFrameResponse")]
        System.IAsyncResult BeginAddFrame(int cameraID, byte[] content, string marker, System.AsyncCallback callback, object asyncState);
        
        void EndAddFrame(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/RemoveFrame", ReplyAction="http://tempuri.org/ICloudObserverService/RemoveFrameResponse")]
        System.IAsyncResult BeginRemoveFrame(int frameID, System.AsyncCallback callback, object asyncState);
        
        void EndRemoveFrame(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/GetFrameContent", ReplyAction="http://tempuri.org/ICloudObserverService/GetFrameContentResponse")]
        System.IAsyncResult BeginGetFrameContent(int frameID, System.AsyncCallback callback, object asyncState);
        
        byte[] EndGetFrameContent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/GetFrameMarker", ReplyAction="http://tempuri.org/ICloudObserverService/GetFrameMarkerResponse")]
        System.IAsyncResult BeginGetFrameMarker(int frameID, System.AsyncCallback callback, object asyncState);
        
        string EndGetFrameMarker(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/IsEmailRegistered", ReplyAction="http://tempuri.org/ICloudObserverService/IsEmailRegisteredResponse")]
        System.IAsyncResult BeginIsEmailRegistered(string email, System.AsyncCallback callback, object asyncState);
        
        bool EndIsEmailRegistered(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/IsUserRegistered", ReplyAction="http://tempuri.org/ICloudObserverService/IsUserRegisteredResponse")]
        System.IAsyncResult BeginIsUserRegistered(string email, string password, System.AsyncCallback callback, object asyncState);
        
        bool EndIsUserRegistered(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/RegisterUser", ReplyAction="http://tempuri.org/ICloudObserverService/RegisterUserResponse")]
        System.IAsyncResult BeginRegisterUser(string email, string password, string name, System.AsyncCallback callback, object asyncState);
        
        int EndRegisterUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/RemoveUser", ReplyAction="http://tempuri.org/ICloudObserverService/RemoveUserResponse")]
        System.IAsyncResult BeginRemoveUser(int userID, System.AsyncCallback callback, object asyncState);
        
        void EndRemoveUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/GetUserID", ReplyAction="http://tempuri.org/ICloudObserverService/GetUserIDResponse")]
        System.IAsyncResult BeginGetUserID(string email, System.AsyncCallback callback, object asyncState);
        
        int EndGetUserID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/GetUserEmail", ReplyAction="http://tempuri.org/ICloudObserverService/GetUserEmailResponse")]
        System.IAsyncResult BeginGetUserEmail(int userID, System.AsyncCallback callback, object asyncState);
        
        string EndGetUserEmail(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/GetUserPassword", ReplyAction="http://tempuri.org/ICloudObserverService/GetUserPasswordResponse")]
        System.IAsyncResult BeginGetUserPassword(int userID, System.AsyncCallback callback, object asyncState);
        
        string EndGetUserPassword(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/GetUserName", ReplyAction="http://tempuri.org/ICloudObserverService/GetUserNameResponse")]
        System.IAsyncResult BeginGetUserName(int userID, System.AsyncCallback callback, object asyncState);
        
        string EndGetUserName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/GetUserDescription", ReplyAction="http://tempuri.org/ICloudObserverService/GetUserDescriptionResponse")]
        System.IAsyncResult BeginGetUserDescription(int userID, System.AsyncCallback callback, object asyncState);
        
        string EndGetUserDescription(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/GetUserIcon", ReplyAction="http://tempuri.org/ICloudObserverService/GetUserIconResponse")]
        System.IAsyncResult BeginGetUserIcon(int userID, System.AsyncCallback callback, object asyncState);
        
        byte[] EndGetUserIcon(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/GetUserRegistrationDate", ReplyAction="http://tempuri.org/ICloudObserverService/GetUserRegistrationDateResponse")]
        System.IAsyncResult BeginGetUserRegistrationDate(int userID, System.AsyncCallback callback, object asyncState);
        
        System.DateTime EndGetUserRegistrationDate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/GetUserGroups", ReplyAction="http://tempuri.org/ICloudObserverService/GetUserGroupsResponse")]
        System.IAsyncResult BeginGetUserGroups(int userID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<int> EndGetUserGroups(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/SetUserPassword", ReplyAction="http://tempuri.org/ICloudObserverService/SetUserPasswordResponse")]
        System.IAsyncResult BeginSetUserPassword(int userID, string password, System.AsyncCallback callback, object asyncState);
        
        void EndSetUserPassword(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/SetUserName", ReplyAction="http://tempuri.org/ICloudObserverService/SetUserNameResponse")]
        System.IAsyncResult BeginSetUserName(int userID, string name, System.AsyncCallback callback, object asyncState);
        
        void EndSetUserName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/SetUserDescription", ReplyAction="http://tempuri.org/ICloudObserverService/SetUserDescriptionResponse")]
        System.IAsyncResult BeginSetUserDescription(int userID, string description, System.AsyncCallback callback, object asyncState);
        
        void EndSetUserDescription(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/SetUserIcon", ReplyAction="http://tempuri.org/ICloudObserverService/SetUserIconResponse")]
        System.IAsyncResult BeginSetUserIcon(int userID, byte[] icon, System.AsyncCallback callback, object asyncState);
        
        void EndSetUserIcon(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/IsGroupRegistered", ReplyAction="http://tempuri.org/ICloudObserverService/IsGroupRegisteredResponse")]
        System.IAsyncResult BeginIsGroupRegistered(string name, System.AsyncCallback callback, object asyncState);
        
        bool EndIsGroupRegistered(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/RegisterGroup", ReplyAction="http://tempuri.org/ICloudObserverService/RegisterGroupResponse")]
        System.IAsyncResult BeginRegisterGroup(string name, int privacy, System.AsyncCallback callback, object asyncState);
        
        int EndRegisterGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/RemoveGroup", ReplyAction="http://tempuri.org/ICloudObserverService/RemoveGroupResponse")]
        System.IAsyncResult BeginRemoveGroup(int groupID, System.AsyncCallback callback, object asyncState);
        
        void EndRemoveGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/GetGroupID", ReplyAction="http://tempuri.org/ICloudObserverService/GetGroupIDResponse")]
        System.IAsyncResult BeginGetGroupID(string name, System.AsyncCallback callback, object asyncState);
        
        int EndGetGroupID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/GetGroupName", ReplyAction="http://tempuri.org/ICloudObserverService/GetGroupNameResponse")]
        System.IAsyncResult BeginGetGroupName(int groupID, System.AsyncCallback callback, object asyncState);
        
        string EndGetGroupName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/GetGroupDescription", ReplyAction="http://tempuri.org/ICloudObserverService/GetGroupDescriptionResponse")]
        System.IAsyncResult BeginGetGroupDescription(int groupID, System.AsyncCallback callback, object asyncState);
        
        string EndGetGroupDescription(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/GetGroupIcon", ReplyAction="http://tempuri.org/ICloudObserverService/GetGroupIconResponse")]
        System.IAsyncResult BeginGetGroupIcon(int groupID, System.AsyncCallback callback, object asyncState);
        
        byte[] EndGetGroupIcon(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/GetGroupPrivacy", ReplyAction="http://tempuri.org/ICloudObserverService/GetGroupPrivacyResponse")]
        System.IAsyncResult BeginGetGroupPrivacy(int groupID, System.AsyncCallback callback, object asyncState);
        
        int EndGetGroupPrivacy(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/GetGroupRegistrationDate", ReplyAction="http://tempuri.org/ICloudObserverService/GetGroupRegistrationDateResponse")]
        System.IAsyncResult BeginGetGroupRegistrationDate(int groupID, System.AsyncCallback callback, object asyncState);
        
        System.DateTime EndGetGroupRegistrationDate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/GetGroupMembers", ReplyAction="http://tempuri.org/ICloudObserverService/GetGroupMembersResponse")]
        System.IAsyncResult BeginGetGroupMembers(int groupID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<int> EndGetGroupMembers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/GetGroupCameras", ReplyAction="http://tempuri.org/ICloudObserverService/GetGroupCamerasResponse")]
        System.IAsyncResult BeginGetGroupCameras(int groupID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<int> EndGetGroupCameras(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/SetGroupName", ReplyAction="http://tempuri.org/ICloudObserverService/SetGroupNameResponse")]
        System.IAsyncResult BeginSetGroupName(int groupID, string name, System.AsyncCallback callback, object asyncState);
        
        void EndSetGroupName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/SetGroupDescription", ReplyAction="http://tempuri.org/ICloudObserverService/SetGroupDescriptionResponse")]
        System.IAsyncResult BeginSetGroupDescription(int groupID, string description, System.AsyncCallback callback, object asyncState);
        
        void EndSetGroupDescription(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/SetGroupIcon", ReplyAction="http://tempuri.org/ICloudObserverService/SetGroupIconResponse")]
        System.IAsyncResult BeginSetGroupIcon(int groupID, byte[] icon, System.AsyncCallback callback, object asyncState);
        
        void EndSetGroupIcon(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/SetGroupPrivacy", ReplyAction="http://tempuri.org/ICloudObserverService/SetGroupPrivacyResponse")]
        System.IAsyncResult BeginSetGroupPrivacy(int groupID, int privacy, System.AsyncCallback callback, object asyncState);
        
        void EndSetGroupPrivacy(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICloudObserverService/AddGroupMember", ReplyAction="http://tempuri.org/ICloudObserverService/AddGroupMemberResponse")]
        System.IAsyncResult BeginAddGroupMember(int userID, int groupID, int privileges, System.AsyncCallback callback, object asyncState);
        
        void EndAddGroupMember(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface ICloudObserverServiceChannel : CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class IsCameraRegisteredCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsCameraRegisteredCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class RegisterCameraCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RegisterCameraCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetCameraIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCameraIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetCameraPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCameraPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetCameraNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCameraNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetCameraDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCameraDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetCameraIconCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCameraIconCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetCameraRegistrationDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCameraRegistrationDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.DateTime Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetCameraGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCameraGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<int> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<int>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetCameraFramesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCameraFramesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<int> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<int>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetFrameContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFrameContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetFrameMarkerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFrameMarkerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class IsEmailRegisteredCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsEmailRegisteredCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class IsUserRegisteredCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsUserRegisteredCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class RegisterUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RegisterUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetUserEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetUserPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetUserNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetUserDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetUserIconCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserIconCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetUserRegistrationDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserRegistrationDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.DateTime Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetUserGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<int> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<int>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class IsGroupRegisteredCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsGroupRegisteredCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class RegisterGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RegisterGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetGroupIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGroupIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetGroupNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGroupNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetGroupDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGroupDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetGroupIconCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGroupIconCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetGroupPrivacyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGroupPrivacyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetGroupRegistrationDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGroupRegistrationDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.DateTime Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetGroupMembersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGroupMembersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<int> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<int>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetGroupCamerasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGroupCamerasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<int> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<int>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class CloudObserverServiceClient : System.ServiceModel.ClientBase<CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService>, CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService {
        
        private BeginOperationDelegate onBeginSetGroupMemberPrivilegesDelegate;
        
        private EndOperationDelegate onEndSetGroupMemberPrivilegesDelegate;
        
        private System.Threading.SendOrPostCallback onSetGroupMemberPrivilegesCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveGroupMemberDelegate;
        
        private EndOperationDelegate onEndRemoveGroupMemberDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveGroupMemberCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddGroupCameraDelegate;
        
        private EndOperationDelegate onEndAddGroupCameraDelegate;
        
        private System.Threading.SendOrPostCallback onAddGroupCameraCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveGroupCameraDelegate;
        
        private EndOperationDelegate onEndRemoveGroupCameraDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveGroupCameraCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsCameraRegisteredDelegate;
        
        private EndOperationDelegate onEndIsCameraRegisteredDelegate;
        
        private System.Threading.SendOrPostCallback onIsCameraRegisteredCompletedDelegate;
        
        private BeginOperationDelegate onBeginRegisterCameraDelegate;
        
        private EndOperationDelegate onEndRegisterCameraDelegate;
        
        private System.Threading.SendOrPostCallback onRegisterCameraCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveCameraDelegate;
        
        private EndOperationDelegate onEndRemoveCameraDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveCameraCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCameraIDDelegate;
        
        private EndOperationDelegate onEndGetCameraIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetCameraIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCameraPathDelegate;
        
        private EndOperationDelegate onEndGetCameraPathDelegate;
        
        private System.Threading.SendOrPostCallback onGetCameraPathCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCameraNameDelegate;
        
        private EndOperationDelegate onEndGetCameraNameDelegate;
        
        private System.Threading.SendOrPostCallback onGetCameraNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCameraDescriptionDelegate;
        
        private EndOperationDelegate onEndGetCameraDescriptionDelegate;
        
        private System.Threading.SendOrPostCallback onGetCameraDescriptionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCameraIconDelegate;
        
        private EndOperationDelegate onEndGetCameraIconDelegate;
        
        private System.Threading.SendOrPostCallback onGetCameraIconCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCameraRegistrationDateDelegate;
        
        private EndOperationDelegate onEndGetCameraRegistrationDateDelegate;
        
        private System.Threading.SendOrPostCallback onGetCameraRegistrationDateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCameraGroupsDelegate;
        
        private EndOperationDelegate onEndGetCameraGroupsDelegate;
        
        private System.Threading.SendOrPostCallback onGetCameraGroupsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCameraFramesDelegate;
        
        private EndOperationDelegate onEndGetCameraFramesDelegate;
        
        private System.Threading.SendOrPostCallback onGetCameraFramesCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetCameraNameDelegate;
        
        private EndOperationDelegate onEndSetCameraNameDelegate;
        
        private System.Threading.SendOrPostCallback onSetCameraNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetCameraDescriptionDelegate;
        
        private EndOperationDelegate onEndSetCameraDescriptionDelegate;
        
        private System.Threading.SendOrPostCallback onSetCameraDescriptionCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetCameraIconDelegate;
        
        private EndOperationDelegate onEndSetCameraIconDelegate;
        
        private System.Threading.SendOrPostCallback onSetCameraIconCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddFrameDelegate;
        
        private EndOperationDelegate onEndAddFrameDelegate;
        
        private System.Threading.SendOrPostCallback onAddFrameCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveFrameDelegate;
        
        private EndOperationDelegate onEndRemoveFrameDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveFrameCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFrameContentDelegate;
        
        private EndOperationDelegate onEndGetFrameContentDelegate;
        
        private System.Threading.SendOrPostCallback onGetFrameContentCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFrameMarkerDelegate;
        
        private EndOperationDelegate onEndGetFrameMarkerDelegate;
        
        private System.Threading.SendOrPostCallback onGetFrameMarkerCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsEmailRegisteredDelegate;
        
        private EndOperationDelegate onEndIsEmailRegisteredDelegate;
        
        private System.Threading.SendOrPostCallback onIsEmailRegisteredCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsUserRegisteredDelegate;
        
        private EndOperationDelegate onEndIsUserRegisteredDelegate;
        
        private System.Threading.SendOrPostCallback onIsUserRegisteredCompletedDelegate;
        
        private BeginOperationDelegate onBeginRegisterUserDelegate;
        
        private EndOperationDelegate onEndRegisterUserDelegate;
        
        private System.Threading.SendOrPostCallback onRegisterUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveUserDelegate;
        
        private EndOperationDelegate onEndRemoveUserDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserIDDelegate;
        
        private EndOperationDelegate onEndGetUserIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserEmailDelegate;
        
        private EndOperationDelegate onEndGetUserEmailDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserEmailCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserPasswordDelegate;
        
        private EndOperationDelegate onEndGetUserPasswordDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserPasswordCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserNameDelegate;
        
        private EndOperationDelegate onEndGetUserNameDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserDescriptionDelegate;
        
        private EndOperationDelegate onEndGetUserDescriptionDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserDescriptionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserIconDelegate;
        
        private EndOperationDelegate onEndGetUserIconDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserIconCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserRegistrationDateDelegate;
        
        private EndOperationDelegate onEndGetUserRegistrationDateDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserRegistrationDateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserGroupsDelegate;
        
        private EndOperationDelegate onEndGetUserGroupsDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserGroupsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetUserPasswordDelegate;
        
        private EndOperationDelegate onEndSetUserPasswordDelegate;
        
        private System.Threading.SendOrPostCallback onSetUserPasswordCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetUserNameDelegate;
        
        private EndOperationDelegate onEndSetUserNameDelegate;
        
        private System.Threading.SendOrPostCallback onSetUserNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetUserDescriptionDelegate;
        
        private EndOperationDelegate onEndSetUserDescriptionDelegate;
        
        private System.Threading.SendOrPostCallback onSetUserDescriptionCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetUserIconDelegate;
        
        private EndOperationDelegate onEndSetUserIconDelegate;
        
        private System.Threading.SendOrPostCallback onSetUserIconCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsGroupRegisteredDelegate;
        
        private EndOperationDelegate onEndIsGroupRegisteredDelegate;
        
        private System.Threading.SendOrPostCallback onIsGroupRegisteredCompletedDelegate;
        
        private BeginOperationDelegate onBeginRegisterGroupDelegate;
        
        private EndOperationDelegate onEndRegisterGroupDelegate;
        
        private System.Threading.SendOrPostCallback onRegisterGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveGroupDelegate;
        
        private EndOperationDelegate onEndRemoveGroupDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGroupIDDelegate;
        
        private EndOperationDelegate onEndGetGroupIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetGroupIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGroupNameDelegate;
        
        private EndOperationDelegate onEndGetGroupNameDelegate;
        
        private System.Threading.SendOrPostCallback onGetGroupNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGroupDescriptionDelegate;
        
        private EndOperationDelegate onEndGetGroupDescriptionDelegate;
        
        private System.Threading.SendOrPostCallback onGetGroupDescriptionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGroupIconDelegate;
        
        private EndOperationDelegate onEndGetGroupIconDelegate;
        
        private System.Threading.SendOrPostCallback onGetGroupIconCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGroupPrivacyDelegate;
        
        private EndOperationDelegate onEndGetGroupPrivacyDelegate;
        
        private System.Threading.SendOrPostCallback onGetGroupPrivacyCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGroupRegistrationDateDelegate;
        
        private EndOperationDelegate onEndGetGroupRegistrationDateDelegate;
        
        private System.Threading.SendOrPostCallback onGetGroupRegistrationDateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGroupMembersDelegate;
        
        private EndOperationDelegate onEndGetGroupMembersDelegate;
        
        private System.Threading.SendOrPostCallback onGetGroupMembersCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGroupCamerasDelegate;
        
        private EndOperationDelegate onEndGetGroupCamerasDelegate;
        
        private System.Threading.SendOrPostCallback onGetGroupCamerasCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetGroupNameDelegate;
        
        private EndOperationDelegate onEndSetGroupNameDelegate;
        
        private System.Threading.SendOrPostCallback onSetGroupNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetGroupDescriptionDelegate;
        
        private EndOperationDelegate onEndSetGroupDescriptionDelegate;
        
        private System.Threading.SendOrPostCallback onSetGroupDescriptionCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetGroupIconDelegate;
        
        private EndOperationDelegate onEndSetGroupIconDelegate;
        
        private System.Threading.SendOrPostCallback onSetGroupIconCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetGroupPrivacyDelegate;
        
        private EndOperationDelegate onEndSetGroupPrivacyDelegate;
        
        private System.Threading.SendOrPostCallback onSetGroupPrivacyCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddGroupMemberDelegate;
        
        private EndOperationDelegate onEndAddGroupMemberDelegate;
        
        private System.Threading.SendOrPostCallback onAddGroupMemberCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public CloudObserverServiceClient() {
        }
        
        public CloudObserverServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CloudObserverServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CloudObserverServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CloudObserverServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetGroupMemberPrivilegesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RemoveGroupMemberCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddGroupCameraCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RemoveGroupCameraCompleted;
        
        public event System.EventHandler<IsCameraRegisteredCompletedEventArgs> IsCameraRegisteredCompleted;
        
        public event System.EventHandler<RegisterCameraCompletedEventArgs> RegisterCameraCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RemoveCameraCompleted;
        
        public event System.EventHandler<GetCameraIDCompletedEventArgs> GetCameraIDCompleted;
        
        public event System.EventHandler<GetCameraPathCompletedEventArgs> GetCameraPathCompleted;
        
        public event System.EventHandler<GetCameraNameCompletedEventArgs> GetCameraNameCompleted;
        
        public event System.EventHandler<GetCameraDescriptionCompletedEventArgs> GetCameraDescriptionCompleted;
        
        public event System.EventHandler<GetCameraIconCompletedEventArgs> GetCameraIconCompleted;
        
        public event System.EventHandler<GetCameraRegistrationDateCompletedEventArgs> GetCameraRegistrationDateCompleted;
        
        public event System.EventHandler<GetCameraGroupsCompletedEventArgs> GetCameraGroupsCompleted;
        
        public event System.EventHandler<GetCameraFramesCompletedEventArgs> GetCameraFramesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetCameraNameCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetCameraDescriptionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetCameraIconCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddFrameCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RemoveFrameCompleted;
        
        public event System.EventHandler<GetFrameContentCompletedEventArgs> GetFrameContentCompleted;
        
        public event System.EventHandler<GetFrameMarkerCompletedEventArgs> GetFrameMarkerCompleted;
        
        public event System.EventHandler<IsEmailRegisteredCompletedEventArgs> IsEmailRegisteredCompleted;
        
        public event System.EventHandler<IsUserRegisteredCompletedEventArgs> IsUserRegisteredCompleted;
        
        public event System.EventHandler<RegisterUserCompletedEventArgs> RegisterUserCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RemoveUserCompleted;
        
        public event System.EventHandler<GetUserIDCompletedEventArgs> GetUserIDCompleted;
        
        public event System.EventHandler<GetUserEmailCompletedEventArgs> GetUserEmailCompleted;
        
        public event System.EventHandler<GetUserPasswordCompletedEventArgs> GetUserPasswordCompleted;
        
        public event System.EventHandler<GetUserNameCompletedEventArgs> GetUserNameCompleted;
        
        public event System.EventHandler<GetUserDescriptionCompletedEventArgs> GetUserDescriptionCompleted;
        
        public event System.EventHandler<GetUserIconCompletedEventArgs> GetUserIconCompleted;
        
        public event System.EventHandler<GetUserRegistrationDateCompletedEventArgs> GetUserRegistrationDateCompleted;
        
        public event System.EventHandler<GetUserGroupsCompletedEventArgs> GetUserGroupsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetUserPasswordCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetUserNameCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetUserDescriptionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetUserIconCompleted;
        
        public event System.EventHandler<IsGroupRegisteredCompletedEventArgs> IsGroupRegisteredCompleted;
        
        public event System.EventHandler<RegisterGroupCompletedEventArgs> RegisterGroupCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RemoveGroupCompleted;
        
        public event System.EventHandler<GetGroupIDCompletedEventArgs> GetGroupIDCompleted;
        
        public event System.EventHandler<GetGroupNameCompletedEventArgs> GetGroupNameCompleted;
        
        public event System.EventHandler<GetGroupDescriptionCompletedEventArgs> GetGroupDescriptionCompleted;
        
        public event System.EventHandler<GetGroupIconCompletedEventArgs> GetGroupIconCompleted;
        
        public event System.EventHandler<GetGroupPrivacyCompletedEventArgs> GetGroupPrivacyCompleted;
        
        public event System.EventHandler<GetGroupRegistrationDateCompletedEventArgs> GetGroupRegistrationDateCompleted;
        
        public event System.EventHandler<GetGroupMembersCompletedEventArgs> GetGroupMembersCompleted;
        
        public event System.EventHandler<GetGroupCamerasCompletedEventArgs> GetGroupCamerasCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetGroupNameCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetGroupDescriptionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetGroupIconCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetGroupPrivacyCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddGroupMemberCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginSetGroupMemberPrivileges(int userID, int groupID, int privileges, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetGroupMemberPrivileges(userID, groupID, privileges, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndSetGroupMemberPrivileges(System.IAsyncResult result) {
            base.Channel.EndSetGroupMemberPrivileges(result);
        }
        
        private System.IAsyncResult OnBeginSetGroupMemberPrivileges(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            int groupID = ((int)(inValues[1]));
            int privileges = ((int)(inValues[2]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginSetGroupMemberPrivileges(userID, groupID, privileges, callback, asyncState);
        }
        
        private object[] OnEndSetGroupMemberPrivileges(System.IAsyncResult result) {
            ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndSetGroupMemberPrivileges(result);
            return null;
        }
        
        private void OnSetGroupMemberPrivilegesCompleted(object state) {
            if ((this.SetGroupMemberPrivilegesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetGroupMemberPrivilegesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetGroupMemberPrivilegesAsync(int userID, int groupID, int privileges) {
            this.SetGroupMemberPrivilegesAsync(userID, groupID, privileges, null);
        }
        
        public void SetGroupMemberPrivilegesAsync(int userID, int groupID, int privileges, object userState) {
            if ((this.onBeginSetGroupMemberPrivilegesDelegate == null)) {
                this.onBeginSetGroupMemberPrivilegesDelegate = new BeginOperationDelegate(this.OnBeginSetGroupMemberPrivileges);
            }
            if ((this.onEndSetGroupMemberPrivilegesDelegate == null)) {
                this.onEndSetGroupMemberPrivilegesDelegate = new EndOperationDelegate(this.OnEndSetGroupMemberPrivileges);
            }
            if ((this.onSetGroupMemberPrivilegesCompletedDelegate == null)) {
                this.onSetGroupMemberPrivilegesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetGroupMemberPrivilegesCompleted);
            }
            base.InvokeAsync(this.onBeginSetGroupMemberPrivilegesDelegate, new object[] {
                        userID,
                        groupID,
                        privileges}, this.onEndSetGroupMemberPrivilegesDelegate, this.onSetGroupMemberPrivilegesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginRemoveGroupMember(int userID, int groupID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveGroupMember(userID, groupID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndRemoveGroupMember(System.IAsyncResult result) {
            base.Channel.EndRemoveGroupMember(result);
        }
        
        private System.IAsyncResult OnBeginRemoveGroupMember(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            int groupID = ((int)(inValues[1]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginRemoveGroupMember(userID, groupID, callback, asyncState);
        }
        
        private object[] OnEndRemoveGroupMember(System.IAsyncResult result) {
            ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndRemoveGroupMember(result);
            return null;
        }
        
        private void OnRemoveGroupMemberCompleted(object state) {
            if ((this.RemoveGroupMemberCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveGroupMemberCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveGroupMemberAsync(int userID, int groupID) {
            this.RemoveGroupMemberAsync(userID, groupID, null);
        }
        
        public void RemoveGroupMemberAsync(int userID, int groupID, object userState) {
            if ((this.onBeginRemoveGroupMemberDelegate == null)) {
                this.onBeginRemoveGroupMemberDelegate = new BeginOperationDelegate(this.OnBeginRemoveGroupMember);
            }
            if ((this.onEndRemoveGroupMemberDelegate == null)) {
                this.onEndRemoveGroupMemberDelegate = new EndOperationDelegate(this.OnEndRemoveGroupMember);
            }
            if ((this.onRemoveGroupMemberCompletedDelegate == null)) {
                this.onRemoveGroupMemberCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveGroupMemberCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveGroupMemberDelegate, new object[] {
                        userID,
                        groupID}, this.onEndRemoveGroupMemberDelegate, this.onRemoveGroupMemberCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginAddGroupCamera(int cameraID, int groupID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddGroupCamera(cameraID, groupID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndAddGroupCamera(System.IAsyncResult result) {
            base.Channel.EndAddGroupCamera(result);
        }
        
        private System.IAsyncResult OnBeginAddGroupCamera(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int cameraID = ((int)(inValues[0]));
            int groupID = ((int)(inValues[1]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginAddGroupCamera(cameraID, groupID, callback, asyncState);
        }
        
        private object[] OnEndAddGroupCamera(System.IAsyncResult result) {
            ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndAddGroupCamera(result);
            return null;
        }
        
        private void OnAddGroupCameraCompleted(object state) {
            if ((this.AddGroupCameraCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddGroupCameraCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddGroupCameraAsync(int cameraID, int groupID) {
            this.AddGroupCameraAsync(cameraID, groupID, null);
        }
        
        public void AddGroupCameraAsync(int cameraID, int groupID, object userState) {
            if ((this.onBeginAddGroupCameraDelegate == null)) {
                this.onBeginAddGroupCameraDelegate = new BeginOperationDelegate(this.OnBeginAddGroupCamera);
            }
            if ((this.onEndAddGroupCameraDelegate == null)) {
                this.onEndAddGroupCameraDelegate = new EndOperationDelegate(this.OnEndAddGroupCamera);
            }
            if ((this.onAddGroupCameraCompletedDelegate == null)) {
                this.onAddGroupCameraCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddGroupCameraCompleted);
            }
            base.InvokeAsync(this.onBeginAddGroupCameraDelegate, new object[] {
                        cameraID,
                        groupID}, this.onEndAddGroupCameraDelegate, this.onAddGroupCameraCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginRemoveGroupCamera(int cameraID, int groupID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveGroupCamera(cameraID, groupID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndRemoveGroupCamera(System.IAsyncResult result) {
            base.Channel.EndRemoveGroupCamera(result);
        }
        
        private System.IAsyncResult OnBeginRemoveGroupCamera(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int cameraID = ((int)(inValues[0]));
            int groupID = ((int)(inValues[1]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginRemoveGroupCamera(cameraID, groupID, callback, asyncState);
        }
        
        private object[] OnEndRemoveGroupCamera(System.IAsyncResult result) {
            ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndRemoveGroupCamera(result);
            return null;
        }
        
        private void OnRemoveGroupCameraCompleted(object state) {
            if ((this.RemoveGroupCameraCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveGroupCameraCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveGroupCameraAsync(int cameraID, int groupID) {
            this.RemoveGroupCameraAsync(cameraID, groupID, null);
        }
        
        public void RemoveGroupCameraAsync(int cameraID, int groupID, object userState) {
            if ((this.onBeginRemoveGroupCameraDelegate == null)) {
                this.onBeginRemoveGroupCameraDelegate = new BeginOperationDelegate(this.OnBeginRemoveGroupCamera);
            }
            if ((this.onEndRemoveGroupCameraDelegate == null)) {
                this.onEndRemoveGroupCameraDelegate = new EndOperationDelegate(this.OnEndRemoveGroupCamera);
            }
            if ((this.onRemoveGroupCameraCompletedDelegate == null)) {
                this.onRemoveGroupCameraCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveGroupCameraCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveGroupCameraDelegate, new object[] {
                        cameraID,
                        groupID}, this.onEndRemoveGroupCameraDelegate, this.onRemoveGroupCameraCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginIsCameraRegistered(string path, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsCameraRegistered(path, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndIsCameraRegistered(System.IAsyncResult result) {
            return base.Channel.EndIsCameraRegistered(result);
        }
        
        private System.IAsyncResult OnBeginIsCameraRegistered(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string path = ((string)(inValues[0]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginIsCameraRegistered(path, callback, asyncState);
        }
        
        private object[] OnEndIsCameraRegistered(System.IAsyncResult result) {
            bool retVal = ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndIsCameraRegistered(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsCameraRegisteredCompleted(object state) {
            if ((this.IsCameraRegisteredCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsCameraRegisteredCompleted(this, new IsCameraRegisteredCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsCameraRegisteredAsync(string path) {
            this.IsCameraRegisteredAsync(path, null);
        }
        
        public void IsCameraRegisteredAsync(string path, object userState) {
            if ((this.onBeginIsCameraRegisteredDelegate == null)) {
                this.onBeginIsCameraRegisteredDelegate = new BeginOperationDelegate(this.OnBeginIsCameraRegistered);
            }
            if ((this.onEndIsCameraRegisteredDelegate == null)) {
                this.onEndIsCameraRegisteredDelegate = new EndOperationDelegate(this.OnEndIsCameraRegistered);
            }
            if ((this.onIsCameraRegisteredCompletedDelegate == null)) {
                this.onIsCameraRegisteredCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsCameraRegisteredCompleted);
            }
            base.InvokeAsync(this.onBeginIsCameraRegisteredDelegate, new object[] {
                        path}, this.onEndIsCameraRegisteredDelegate, this.onIsCameraRegisteredCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginRegisterCamera(string name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegisterCamera(name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndRegisterCamera(System.IAsyncResult result) {
            return base.Channel.EndRegisterCamera(result);
        }
        
        private System.IAsyncResult OnBeginRegisterCamera(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string name = ((string)(inValues[0]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginRegisterCamera(name, callback, asyncState);
        }
        
        private object[] OnEndRegisterCamera(System.IAsyncResult result) {
            int retVal = ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndRegisterCamera(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRegisterCameraCompleted(object state) {
            if ((this.RegisterCameraCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisterCameraCompleted(this, new RegisterCameraCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisterCameraAsync(string name) {
            this.RegisterCameraAsync(name, null);
        }
        
        public void RegisterCameraAsync(string name, object userState) {
            if ((this.onBeginRegisterCameraDelegate == null)) {
                this.onBeginRegisterCameraDelegate = new BeginOperationDelegate(this.OnBeginRegisterCamera);
            }
            if ((this.onEndRegisterCameraDelegate == null)) {
                this.onEndRegisterCameraDelegate = new EndOperationDelegate(this.OnEndRegisterCamera);
            }
            if ((this.onRegisterCameraCompletedDelegate == null)) {
                this.onRegisterCameraCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterCameraCompleted);
            }
            base.InvokeAsync(this.onBeginRegisterCameraDelegate, new object[] {
                        name}, this.onEndRegisterCameraDelegate, this.onRegisterCameraCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginRemoveCamera(int cameraID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveCamera(cameraID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndRemoveCamera(System.IAsyncResult result) {
            base.Channel.EndRemoveCamera(result);
        }
        
        private System.IAsyncResult OnBeginRemoveCamera(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int cameraID = ((int)(inValues[0]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginRemoveCamera(cameraID, callback, asyncState);
        }
        
        private object[] OnEndRemoveCamera(System.IAsyncResult result) {
            ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndRemoveCamera(result);
            return null;
        }
        
        private void OnRemoveCameraCompleted(object state) {
            if ((this.RemoveCameraCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveCameraCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveCameraAsync(int cameraID) {
            this.RemoveCameraAsync(cameraID, null);
        }
        
        public void RemoveCameraAsync(int cameraID, object userState) {
            if ((this.onBeginRemoveCameraDelegate == null)) {
                this.onBeginRemoveCameraDelegate = new BeginOperationDelegate(this.OnBeginRemoveCamera);
            }
            if ((this.onEndRemoveCameraDelegate == null)) {
                this.onEndRemoveCameraDelegate = new EndOperationDelegate(this.OnEndRemoveCamera);
            }
            if ((this.onRemoveCameraCompletedDelegate == null)) {
                this.onRemoveCameraCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveCameraCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveCameraDelegate, new object[] {
                        cameraID}, this.onEndRemoveCameraDelegate, this.onRemoveCameraCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginGetCameraID(string path, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCameraID(path, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndGetCameraID(System.IAsyncResult result) {
            return base.Channel.EndGetCameraID(result);
        }
        
        private System.IAsyncResult OnBeginGetCameraID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string path = ((string)(inValues[0]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginGetCameraID(path, callback, asyncState);
        }
        
        private object[] OnEndGetCameraID(System.IAsyncResult result) {
            int retVal = ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndGetCameraID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCameraIDCompleted(object state) {
            if ((this.GetCameraIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCameraIDCompleted(this, new GetCameraIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCameraIDAsync(string path) {
            this.GetCameraIDAsync(path, null);
        }
        
        public void GetCameraIDAsync(string path, object userState) {
            if ((this.onBeginGetCameraIDDelegate == null)) {
                this.onBeginGetCameraIDDelegate = new BeginOperationDelegate(this.OnBeginGetCameraID);
            }
            if ((this.onEndGetCameraIDDelegate == null)) {
                this.onEndGetCameraIDDelegate = new EndOperationDelegate(this.OnEndGetCameraID);
            }
            if ((this.onGetCameraIDCompletedDelegate == null)) {
                this.onGetCameraIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCameraIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetCameraIDDelegate, new object[] {
                        path}, this.onEndGetCameraIDDelegate, this.onGetCameraIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginGetCameraPath(int cameraID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCameraPath(cameraID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndGetCameraPath(System.IAsyncResult result) {
            return base.Channel.EndGetCameraPath(result);
        }
        
        private System.IAsyncResult OnBeginGetCameraPath(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int cameraID = ((int)(inValues[0]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginGetCameraPath(cameraID, callback, asyncState);
        }
        
        private object[] OnEndGetCameraPath(System.IAsyncResult result) {
            string retVal = ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndGetCameraPath(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCameraPathCompleted(object state) {
            if ((this.GetCameraPathCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCameraPathCompleted(this, new GetCameraPathCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCameraPathAsync(int cameraID) {
            this.GetCameraPathAsync(cameraID, null);
        }
        
        public void GetCameraPathAsync(int cameraID, object userState) {
            if ((this.onBeginGetCameraPathDelegate == null)) {
                this.onBeginGetCameraPathDelegate = new BeginOperationDelegate(this.OnBeginGetCameraPath);
            }
            if ((this.onEndGetCameraPathDelegate == null)) {
                this.onEndGetCameraPathDelegate = new EndOperationDelegate(this.OnEndGetCameraPath);
            }
            if ((this.onGetCameraPathCompletedDelegate == null)) {
                this.onGetCameraPathCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCameraPathCompleted);
            }
            base.InvokeAsync(this.onBeginGetCameraPathDelegate, new object[] {
                        cameraID}, this.onEndGetCameraPathDelegate, this.onGetCameraPathCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginGetCameraName(int cameraID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCameraName(cameraID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndGetCameraName(System.IAsyncResult result) {
            return base.Channel.EndGetCameraName(result);
        }
        
        private System.IAsyncResult OnBeginGetCameraName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int cameraID = ((int)(inValues[0]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginGetCameraName(cameraID, callback, asyncState);
        }
        
        private object[] OnEndGetCameraName(System.IAsyncResult result) {
            string retVal = ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndGetCameraName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCameraNameCompleted(object state) {
            if ((this.GetCameraNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCameraNameCompleted(this, new GetCameraNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCameraNameAsync(int cameraID) {
            this.GetCameraNameAsync(cameraID, null);
        }
        
        public void GetCameraNameAsync(int cameraID, object userState) {
            if ((this.onBeginGetCameraNameDelegate == null)) {
                this.onBeginGetCameraNameDelegate = new BeginOperationDelegate(this.OnBeginGetCameraName);
            }
            if ((this.onEndGetCameraNameDelegate == null)) {
                this.onEndGetCameraNameDelegate = new EndOperationDelegate(this.OnEndGetCameraName);
            }
            if ((this.onGetCameraNameCompletedDelegate == null)) {
                this.onGetCameraNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCameraNameCompleted);
            }
            base.InvokeAsync(this.onBeginGetCameraNameDelegate, new object[] {
                        cameraID}, this.onEndGetCameraNameDelegate, this.onGetCameraNameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginGetCameraDescription(int cameraID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCameraDescription(cameraID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndGetCameraDescription(System.IAsyncResult result) {
            return base.Channel.EndGetCameraDescription(result);
        }
        
        private System.IAsyncResult OnBeginGetCameraDescription(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int cameraID = ((int)(inValues[0]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginGetCameraDescription(cameraID, callback, asyncState);
        }
        
        private object[] OnEndGetCameraDescription(System.IAsyncResult result) {
            string retVal = ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndGetCameraDescription(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCameraDescriptionCompleted(object state) {
            if ((this.GetCameraDescriptionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCameraDescriptionCompleted(this, new GetCameraDescriptionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCameraDescriptionAsync(int cameraID) {
            this.GetCameraDescriptionAsync(cameraID, null);
        }
        
        public void GetCameraDescriptionAsync(int cameraID, object userState) {
            if ((this.onBeginGetCameraDescriptionDelegate == null)) {
                this.onBeginGetCameraDescriptionDelegate = new BeginOperationDelegate(this.OnBeginGetCameraDescription);
            }
            if ((this.onEndGetCameraDescriptionDelegate == null)) {
                this.onEndGetCameraDescriptionDelegate = new EndOperationDelegate(this.OnEndGetCameraDescription);
            }
            if ((this.onGetCameraDescriptionCompletedDelegate == null)) {
                this.onGetCameraDescriptionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCameraDescriptionCompleted);
            }
            base.InvokeAsync(this.onBeginGetCameraDescriptionDelegate, new object[] {
                        cameraID}, this.onEndGetCameraDescriptionDelegate, this.onGetCameraDescriptionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginGetCameraIcon(int cameraID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCameraIcon(cameraID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndGetCameraIcon(System.IAsyncResult result) {
            return base.Channel.EndGetCameraIcon(result);
        }
        
        private System.IAsyncResult OnBeginGetCameraIcon(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int cameraID = ((int)(inValues[0]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginGetCameraIcon(cameraID, callback, asyncState);
        }
        
        private object[] OnEndGetCameraIcon(System.IAsyncResult result) {
            byte[] retVal = ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndGetCameraIcon(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCameraIconCompleted(object state) {
            if ((this.GetCameraIconCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCameraIconCompleted(this, new GetCameraIconCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCameraIconAsync(int cameraID) {
            this.GetCameraIconAsync(cameraID, null);
        }
        
        public void GetCameraIconAsync(int cameraID, object userState) {
            if ((this.onBeginGetCameraIconDelegate == null)) {
                this.onBeginGetCameraIconDelegate = new BeginOperationDelegate(this.OnBeginGetCameraIcon);
            }
            if ((this.onEndGetCameraIconDelegate == null)) {
                this.onEndGetCameraIconDelegate = new EndOperationDelegate(this.OnEndGetCameraIcon);
            }
            if ((this.onGetCameraIconCompletedDelegate == null)) {
                this.onGetCameraIconCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCameraIconCompleted);
            }
            base.InvokeAsync(this.onBeginGetCameraIconDelegate, new object[] {
                        cameraID}, this.onEndGetCameraIconDelegate, this.onGetCameraIconCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginGetCameraRegistrationDate(int cameraID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCameraRegistrationDate(cameraID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.DateTime CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndGetCameraRegistrationDate(System.IAsyncResult result) {
            return base.Channel.EndGetCameraRegistrationDate(result);
        }
        
        private System.IAsyncResult OnBeginGetCameraRegistrationDate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int cameraID = ((int)(inValues[0]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginGetCameraRegistrationDate(cameraID, callback, asyncState);
        }
        
        private object[] OnEndGetCameraRegistrationDate(System.IAsyncResult result) {
            System.DateTime retVal = ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndGetCameraRegistrationDate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCameraRegistrationDateCompleted(object state) {
            if ((this.GetCameraRegistrationDateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCameraRegistrationDateCompleted(this, new GetCameraRegistrationDateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCameraRegistrationDateAsync(int cameraID) {
            this.GetCameraRegistrationDateAsync(cameraID, null);
        }
        
        public void GetCameraRegistrationDateAsync(int cameraID, object userState) {
            if ((this.onBeginGetCameraRegistrationDateDelegate == null)) {
                this.onBeginGetCameraRegistrationDateDelegate = new BeginOperationDelegate(this.OnBeginGetCameraRegistrationDate);
            }
            if ((this.onEndGetCameraRegistrationDateDelegate == null)) {
                this.onEndGetCameraRegistrationDateDelegate = new EndOperationDelegate(this.OnEndGetCameraRegistrationDate);
            }
            if ((this.onGetCameraRegistrationDateCompletedDelegate == null)) {
                this.onGetCameraRegistrationDateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCameraRegistrationDateCompleted);
            }
            base.InvokeAsync(this.onBeginGetCameraRegistrationDateDelegate, new object[] {
                        cameraID}, this.onEndGetCameraRegistrationDateDelegate, this.onGetCameraRegistrationDateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginGetCameraGroups(int cameraID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCameraGroups(cameraID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<int> CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndGetCameraGroups(System.IAsyncResult result) {
            return base.Channel.EndGetCameraGroups(result);
        }
        
        private System.IAsyncResult OnBeginGetCameraGroups(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int cameraID = ((int)(inValues[0]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginGetCameraGroups(cameraID, callback, asyncState);
        }
        
        private object[] OnEndGetCameraGroups(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<int> retVal = ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndGetCameraGroups(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCameraGroupsCompleted(object state) {
            if ((this.GetCameraGroupsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCameraGroupsCompleted(this, new GetCameraGroupsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCameraGroupsAsync(int cameraID) {
            this.GetCameraGroupsAsync(cameraID, null);
        }
        
        public void GetCameraGroupsAsync(int cameraID, object userState) {
            if ((this.onBeginGetCameraGroupsDelegate == null)) {
                this.onBeginGetCameraGroupsDelegate = new BeginOperationDelegate(this.OnBeginGetCameraGroups);
            }
            if ((this.onEndGetCameraGroupsDelegate == null)) {
                this.onEndGetCameraGroupsDelegate = new EndOperationDelegate(this.OnEndGetCameraGroups);
            }
            if ((this.onGetCameraGroupsCompletedDelegate == null)) {
                this.onGetCameraGroupsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCameraGroupsCompleted);
            }
            base.InvokeAsync(this.onBeginGetCameraGroupsDelegate, new object[] {
                        cameraID}, this.onEndGetCameraGroupsDelegate, this.onGetCameraGroupsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginGetCameraFrames(int cameraID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCameraFrames(cameraID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<int> CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndGetCameraFrames(System.IAsyncResult result) {
            return base.Channel.EndGetCameraFrames(result);
        }
        
        private System.IAsyncResult OnBeginGetCameraFrames(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int cameraID = ((int)(inValues[0]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginGetCameraFrames(cameraID, callback, asyncState);
        }
        
        private object[] OnEndGetCameraFrames(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<int> retVal = ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndGetCameraFrames(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCameraFramesCompleted(object state) {
            if ((this.GetCameraFramesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCameraFramesCompleted(this, new GetCameraFramesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCameraFramesAsync(int cameraID) {
            this.GetCameraFramesAsync(cameraID, null);
        }
        
        public void GetCameraFramesAsync(int cameraID, object userState) {
            if ((this.onBeginGetCameraFramesDelegate == null)) {
                this.onBeginGetCameraFramesDelegate = new BeginOperationDelegate(this.OnBeginGetCameraFrames);
            }
            if ((this.onEndGetCameraFramesDelegate == null)) {
                this.onEndGetCameraFramesDelegate = new EndOperationDelegate(this.OnEndGetCameraFrames);
            }
            if ((this.onGetCameraFramesCompletedDelegate == null)) {
                this.onGetCameraFramesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCameraFramesCompleted);
            }
            base.InvokeAsync(this.onBeginGetCameraFramesDelegate, new object[] {
                        cameraID}, this.onEndGetCameraFramesDelegate, this.onGetCameraFramesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginSetCameraName(int cameraID, string name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetCameraName(cameraID, name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndSetCameraName(System.IAsyncResult result) {
            base.Channel.EndSetCameraName(result);
        }
        
        private System.IAsyncResult OnBeginSetCameraName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int cameraID = ((int)(inValues[0]));
            string name = ((string)(inValues[1]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginSetCameraName(cameraID, name, callback, asyncState);
        }
        
        private object[] OnEndSetCameraName(System.IAsyncResult result) {
            ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndSetCameraName(result);
            return null;
        }
        
        private void OnSetCameraNameCompleted(object state) {
            if ((this.SetCameraNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetCameraNameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetCameraNameAsync(int cameraID, string name) {
            this.SetCameraNameAsync(cameraID, name, null);
        }
        
        public void SetCameraNameAsync(int cameraID, string name, object userState) {
            if ((this.onBeginSetCameraNameDelegate == null)) {
                this.onBeginSetCameraNameDelegate = new BeginOperationDelegate(this.OnBeginSetCameraName);
            }
            if ((this.onEndSetCameraNameDelegate == null)) {
                this.onEndSetCameraNameDelegate = new EndOperationDelegate(this.OnEndSetCameraName);
            }
            if ((this.onSetCameraNameCompletedDelegate == null)) {
                this.onSetCameraNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetCameraNameCompleted);
            }
            base.InvokeAsync(this.onBeginSetCameraNameDelegate, new object[] {
                        cameraID,
                        name}, this.onEndSetCameraNameDelegate, this.onSetCameraNameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginSetCameraDescription(int cameraID, string description, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetCameraDescription(cameraID, description, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndSetCameraDescription(System.IAsyncResult result) {
            base.Channel.EndSetCameraDescription(result);
        }
        
        private System.IAsyncResult OnBeginSetCameraDescription(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int cameraID = ((int)(inValues[0]));
            string description = ((string)(inValues[1]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginSetCameraDescription(cameraID, description, callback, asyncState);
        }
        
        private object[] OnEndSetCameraDescription(System.IAsyncResult result) {
            ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndSetCameraDescription(result);
            return null;
        }
        
        private void OnSetCameraDescriptionCompleted(object state) {
            if ((this.SetCameraDescriptionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetCameraDescriptionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetCameraDescriptionAsync(int cameraID, string description) {
            this.SetCameraDescriptionAsync(cameraID, description, null);
        }
        
        public void SetCameraDescriptionAsync(int cameraID, string description, object userState) {
            if ((this.onBeginSetCameraDescriptionDelegate == null)) {
                this.onBeginSetCameraDescriptionDelegate = new BeginOperationDelegate(this.OnBeginSetCameraDescription);
            }
            if ((this.onEndSetCameraDescriptionDelegate == null)) {
                this.onEndSetCameraDescriptionDelegate = new EndOperationDelegate(this.OnEndSetCameraDescription);
            }
            if ((this.onSetCameraDescriptionCompletedDelegate == null)) {
                this.onSetCameraDescriptionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetCameraDescriptionCompleted);
            }
            base.InvokeAsync(this.onBeginSetCameraDescriptionDelegate, new object[] {
                        cameraID,
                        description}, this.onEndSetCameraDescriptionDelegate, this.onSetCameraDescriptionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginSetCameraIcon(int cameraID, byte[] icon, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetCameraIcon(cameraID, icon, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndSetCameraIcon(System.IAsyncResult result) {
            base.Channel.EndSetCameraIcon(result);
        }
        
        private System.IAsyncResult OnBeginSetCameraIcon(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int cameraID = ((int)(inValues[0]));
            byte[] icon = ((byte[])(inValues[1]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginSetCameraIcon(cameraID, icon, callback, asyncState);
        }
        
        private object[] OnEndSetCameraIcon(System.IAsyncResult result) {
            ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndSetCameraIcon(result);
            return null;
        }
        
        private void OnSetCameraIconCompleted(object state) {
            if ((this.SetCameraIconCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetCameraIconCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetCameraIconAsync(int cameraID, byte[] icon) {
            this.SetCameraIconAsync(cameraID, icon, null);
        }
        
        public void SetCameraIconAsync(int cameraID, byte[] icon, object userState) {
            if ((this.onBeginSetCameraIconDelegate == null)) {
                this.onBeginSetCameraIconDelegate = new BeginOperationDelegate(this.OnBeginSetCameraIcon);
            }
            if ((this.onEndSetCameraIconDelegate == null)) {
                this.onEndSetCameraIconDelegate = new EndOperationDelegate(this.OnEndSetCameraIcon);
            }
            if ((this.onSetCameraIconCompletedDelegate == null)) {
                this.onSetCameraIconCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetCameraIconCompleted);
            }
            base.InvokeAsync(this.onBeginSetCameraIconDelegate, new object[] {
                        cameraID,
                        icon}, this.onEndSetCameraIconDelegate, this.onSetCameraIconCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginAddFrame(int cameraID, byte[] content, string marker, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddFrame(cameraID, content, marker, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndAddFrame(System.IAsyncResult result) {
            base.Channel.EndAddFrame(result);
        }
        
        private System.IAsyncResult OnBeginAddFrame(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int cameraID = ((int)(inValues[0]));
            byte[] content = ((byte[])(inValues[1]));
            string marker = ((string)(inValues[2]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginAddFrame(cameraID, content, marker, callback, asyncState);
        }
        
        private object[] OnEndAddFrame(System.IAsyncResult result) {
            ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndAddFrame(result);
            return null;
        }
        
        private void OnAddFrameCompleted(object state) {
            if ((this.AddFrameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddFrameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddFrameAsync(int cameraID, byte[] content, string marker) {
            this.AddFrameAsync(cameraID, content, marker, null);
        }
        
        public void AddFrameAsync(int cameraID, byte[] content, string marker, object userState) {
            if ((this.onBeginAddFrameDelegate == null)) {
                this.onBeginAddFrameDelegate = new BeginOperationDelegate(this.OnBeginAddFrame);
            }
            if ((this.onEndAddFrameDelegate == null)) {
                this.onEndAddFrameDelegate = new EndOperationDelegate(this.OnEndAddFrame);
            }
            if ((this.onAddFrameCompletedDelegate == null)) {
                this.onAddFrameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddFrameCompleted);
            }
            base.InvokeAsync(this.onBeginAddFrameDelegate, new object[] {
                        cameraID,
                        content,
                        marker}, this.onEndAddFrameDelegate, this.onAddFrameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginRemoveFrame(int frameID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveFrame(frameID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndRemoveFrame(System.IAsyncResult result) {
            base.Channel.EndRemoveFrame(result);
        }
        
        private System.IAsyncResult OnBeginRemoveFrame(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int frameID = ((int)(inValues[0]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginRemoveFrame(frameID, callback, asyncState);
        }
        
        private object[] OnEndRemoveFrame(System.IAsyncResult result) {
            ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndRemoveFrame(result);
            return null;
        }
        
        private void OnRemoveFrameCompleted(object state) {
            if ((this.RemoveFrameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveFrameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveFrameAsync(int frameID) {
            this.RemoveFrameAsync(frameID, null);
        }
        
        public void RemoveFrameAsync(int frameID, object userState) {
            if ((this.onBeginRemoveFrameDelegate == null)) {
                this.onBeginRemoveFrameDelegate = new BeginOperationDelegate(this.OnBeginRemoveFrame);
            }
            if ((this.onEndRemoveFrameDelegate == null)) {
                this.onEndRemoveFrameDelegate = new EndOperationDelegate(this.OnEndRemoveFrame);
            }
            if ((this.onRemoveFrameCompletedDelegate == null)) {
                this.onRemoveFrameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveFrameCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveFrameDelegate, new object[] {
                        frameID}, this.onEndRemoveFrameDelegate, this.onRemoveFrameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginGetFrameContent(int frameID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFrameContent(frameID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndGetFrameContent(System.IAsyncResult result) {
            return base.Channel.EndGetFrameContent(result);
        }
        
        private System.IAsyncResult OnBeginGetFrameContent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int frameID = ((int)(inValues[0]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginGetFrameContent(frameID, callback, asyncState);
        }
        
        private object[] OnEndGetFrameContent(System.IAsyncResult result) {
            byte[] retVal = ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndGetFrameContent(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFrameContentCompleted(object state) {
            if ((this.GetFrameContentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFrameContentCompleted(this, new GetFrameContentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFrameContentAsync(int frameID) {
            this.GetFrameContentAsync(frameID, null);
        }
        
        public void GetFrameContentAsync(int frameID, object userState) {
            if ((this.onBeginGetFrameContentDelegate == null)) {
                this.onBeginGetFrameContentDelegate = new BeginOperationDelegate(this.OnBeginGetFrameContent);
            }
            if ((this.onEndGetFrameContentDelegate == null)) {
                this.onEndGetFrameContentDelegate = new EndOperationDelegate(this.OnEndGetFrameContent);
            }
            if ((this.onGetFrameContentCompletedDelegate == null)) {
                this.onGetFrameContentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFrameContentCompleted);
            }
            base.InvokeAsync(this.onBeginGetFrameContentDelegate, new object[] {
                        frameID}, this.onEndGetFrameContentDelegate, this.onGetFrameContentCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginGetFrameMarker(int frameID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFrameMarker(frameID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndGetFrameMarker(System.IAsyncResult result) {
            return base.Channel.EndGetFrameMarker(result);
        }
        
        private System.IAsyncResult OnBeginGetFrameMarker(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int frameID = ((int)(inValues[0]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginGetFrameMarker(frameID, callback, asyncState);
        }
        
        private object[] OnEndGetFrameMarker(System.IAsyncResult result) {
            string retVal = ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndGetFrameMarker(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFrameMarkerCompleted(object state) {
            if ((this.GetFrameMarkerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFrameMarkerCompleted(this, new GetFrameMarkerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFrameMarkerAsync(int frameID) {
            this.GetFrameMarkerAsync(frameID, null);
        }
        
        public void GetFrameMarkerAsync(int frameID, object userState) {
            if ((this.onBeginGetFrameMarkerDelegate == null)) {
                this.onBeginGetFrameMarkerDelegate = new BeginOperationDelegate(this.OnBeginGetFrameMarker);
            }
            if ((this.onEndGetFrameMarkerDelegate == null)) {
                this.onEndGetFrameMarkerDelegate = new EndOperationDelegate(this.OnEndGetFrameMarker);
            }
            if ((this.onGetFrameMarkerCompletedDelegate == null)) {
                this.onGetFrameMarkerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFrameMarkerCompleted);
            }
            base.InvokeAsync(this.onBeginGetFrameMarkerDelegate, new object[] {
                        frameID}, this.onEndGetFrameMarkerDelegate, this.onGetFrameMarkerCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginIsEmailRegistered(string email, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsEmailRegistered(email, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndIsEmailRegistered(System.IAsyncResult result) {
            return base.Channel.EndIsEmailRegistered(result);
        }
        
        private System.IAsyncResult OnBeginIsEmailRegistered(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string email = ((string)(inValues[0]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginIsEmailRegistered(email, callback, asyncState);
        }
        
        private object[] OnEndIsEmailRegistered(System.IAsyncResult result) {
            bool retVal = ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndIsEmailRegistered(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsEmailRegisteredCompleted(object state) {
            if ((this.IsEmailRegisteredCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsEmailRegisteredCompleted(this, new IsEmailRegisteredCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsEmailRegisteredAsync(string email) {
            this.IsEmailRegisteredAsync(email, null);
        }
        
        public void IsEmailRegisteredAsync(string email, object userState) {
            if ((this.onBeginIsEmailRegisteredDelegate == null)) {
                this.onBeginIsEmailRegisteredDelegate = new BeginOperationDelegate(this.OnBeginIsEmailRegistered);
            }
            if ((this.onEndIsEmailRegisteredDelegate == null)) {
                this.onEndIsEmailRegisteredDelegate = new EndOperationDelegate(this.OnEndIsEmailRegistered);
            }
            if ((this.onIsEmailRegisteredCompletedDelegate == null)) {
                this.onIsEmailRegisteredCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsEmailRegisteredCompleted);
            }
            base.InvokeAsync(this.onBeginIsEmailRegisteredDelegate, new object[] {
                        email}, this.onEndIsEmailRegisteredDelegate, this.onIsEmailRegisteredCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginIsUserRegistered(string email, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsUserRegistered(email, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndIsUserRegistered(System.IAsyncResult result) {
            return base.Channel.EndIsUserRegistered(result);
        }
        
        private System.IAsyncResult OnBeginIsUserRegistered(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string email = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginIsUserRegistered(email, password, callback, asyncState);
        }
        
        private object[] OnEndIsUserRegistered(System.IAsyncResult result) {
            bool retVal = ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndIsUserRegistered(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsUserRegisteredCompleted(object state) {
            if ((this.IsUserRegisteredCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsUserRegisteredCompleted(this, new IsUserRegisteredCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsUserRegisteredAsync(string email, string password) {
            this.IsUserRegisteredAsync(email, password, null);
        }
        
        public void IsUserRegisteredAsync(string email, string password, object userState) {
            if ((this.onBeginIsUserRegisteredDelegate == null)) {
                this.onBeginIsUserRegisteredDelegate = new BeginOperationDelegate(this.OnBeginIsUserRegistered);
            }
            if ((this.onEndIsUserRegisteredDelegate == null)) {
                this.onEndIsUserRegisteredDelegate = new EndOperationDelegate(this.OnEndIsUserRegistered);
            }
            if ((this.onIsUserRegisteredCompletedDelegate == null)) {
                this.onIsUserRegisteredCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsUserRegisteredCompleted);
            }
            base.InvokeAsync(this.onBeginIsUserRegisteredDelegate, new object[] {
                        email,
                        password}, this.onEndIsUserRegisteredDelegate, this.onIsUserRegisteredCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginRegisterUser(string email, string password, string name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegisterUser(email, password, name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndRegisterUser(System.IAsyncResult result) {
            return base.Channel.EndRegisterUser(result);
        }
        
        private System.IAsyncResult OnBeginRegisterUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string email = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            string name = ((string)(inValues[2]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginRegisterUser(email, password, name, callback, asyncState);
        }
        
        private object[] OnEndRegisterUser(System.IAsyncResult result) {
            int retVal = ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndRegisterUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRegisterUserCompleted(object state) {
            if ((this.RegisterUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisterUserCompleted(this, new RegisterUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisterUserAsync(string email, string password, string name) {
            this.RegisterUserAsync(email, password, name, null);
        }
        
        public void RegisterUserAsync(string email, string password, string name, object userState) {
            if ((this.onBeginRegisterUserDelegate == null)) {
                this.onBeginRegisterUserDelegate = new BeginOperationDelegate(this.OnBeginRegisterUser);
            }
            if ((this.onEndRegisterUserDelegate == null)) {
                this.onEndRegisterUserDelegate = new EndOperationDelegate(this.OnEndRegisterUser);
            }
            if ((this.onRegisterUserCompletedDelegate == null)) {
                this.onRegisterUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterUserCompleted);
            }
            base.InvokeAsync(this.onBeginRegisterUserDelegate, new object[] {
                        email,
                        password,
                        name}, this.onEndRegisterUserDelegate, this.onRegisterUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginRemoveUser(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveUser(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndRemoveUser(System.IAsyncResult result) {
            base.Channel.EndRemoveUser(result);
        }
        
        private System.IAsyncResult OnBeginRemoveUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginRemoveUser(userID, callback, asyncState);
        }
        
        private object[] OnEndRemoveUser(System.IAsyncResult result) {
            ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndRemoveUser(result);
            return null;
        }
        
        private void OnRemoveUserCompleted(object state) {
            if ((this.RemoveUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveUserAsync(int userID) {
            this.RemoveUserAsync(userID, null);
        }
        
        public void RemoveUserAsync(int userID, object userState) {
            if ((this.onBeginRemoveUserDelegate == null)) {
                this.onBeginRemoveUserDelegate = new BeginOperationDelegate(this.OnBeginRemoveUser);
            }
            if ((this.onEndRemoveUserDelegate == null)) {
                this.onEndRemoveUserDelegate = new EndOperationDelegate(this.OnEndRemoveUser);
            }
            if ((this.onRemoveUserCompletedDelegate == null)) {
                this.onRemoveUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveUserCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveUserDelegate, new object[] {
                        userID}, this.onEndRemoveUserDelegate, this.onRemoveUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginGetUserID(string email, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserID(email, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndGetUserID(System.IAsyncResult result) {
            return base.Channel.EndGetUserID(result);
        }
        
        private System.IAsyncResult OnBeginGetUserID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string email = ((string)(inValues[0]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginGetUserID(email, callback, asyncState);
        }
        
        private object[] OnEndGetUserID(System.IAsyncResult result) {
            int retVal = ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndGetUserID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserIDCompleted(object state) {
            if ((this.GetUserIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserIDCompleted(this, new GetUserIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserIDAsync(string email) {
            this.GetUserIDAsync(email, null);
        }
        
        public void GetUserIDAsync(string email, object userState) {
            if ((this.onBeginGetUserIDDelegate == null)) {
                this.onBeginGetUserIDDelegate = new BeginOperationDelegate(this.OnBeginGetUserID);
            }
            if ((this.onEndGetUserIDDelegate == null)) {
                this.onEndGetUserIDDelegate = new EndOperationDelegate(this.OnEndGetUserID);
            }
            if ((this.onGetUserIDCompletedDelegate == null)) {
                this.onGetUserIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserIDDelegate, new object[] {
                        email}, this.onEndGetUserIDDelegate, this.onGetUserIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginGetUserEmail(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserEmail(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndGetUserEmail(System.IAsyncResult result) {
            return base.Channel.EndGetUserEmail(result);
        }
        
        private System.IAsyncResult OnBeginGetUserEmail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginGetUserEmail(userID, callback, asyncState);
        }
        
        private object[] OnEndGetUserEmail(System.IAsyncResult result) {
            string retVal = ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndGetUserEmail(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserEmailCompleted(object state) {
            if ((this.GetUserEmailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserEmailCompleted(this, new GetUserEmailCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserEmailAsync(int userID) {
            this.GetUserEmailAsync(userID, null);
        }
        
        public void GetUserEmailAsync(int userID, object userState) {
            if ((this.onBeginGetUserEmailDelegate == null)) {
                this.onBeginGetUserEmailDelegate = new BeginOperationDelegate(this.OnBeginGetUserEmail);
            }
            if ((this.onEndGetUserEmailDelegate == null)) {
                this.onEndGetUserEmailDelegate = new EndOperationDelegate(this.OnEndGetUserEmail);
            }
            if ((this.onGetUserEmailCompletedDelegate == null)) {
                this.onGetUserEmailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserEmailCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserEmailDelegate, new object[] {
                        userID}, this.onEndGetUserEmailDelegate, this.onGetUserEmailCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginGetUserPassword(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserPassword(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndGetUserPassword(System.IAsyncResult result) {
            return base.Channel.EndGetUserPassword(result);
        }
        
        private System.IAsyncResult OnBeginGetUserPassword(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginGetUserPassword(userID, callback, asyncState);
        }
        
        private object[] OnEndGetUserPassword(System.IAsyncResult result) {
            string retVal = ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndGetUserPassword(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserPasswordCompleted(object state) {
            if ((this.GetUserPasswordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserPasswordCompleted(this, new GetUserPasswordCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserPasswordAsync(int userID) {
            this.GetUserPasswordAsync(userID, null);
        }
        
        public void GetUserPasswordAsync(int userID, object userState) {
            if ((this.onBeginGetUserPasswordDelegate == null)) {
                this.onBeginGetUserPasswordDelegate = new BeginOperationDelegate(this.OnBeginGetUserPassword);
            }
            if ((this.onEndGetUserPasswordDelegate == null)) {
                this.onEndGetUserPasswordDelegate = new EndOperationDelegate(this.OnEndGetUserPassword);
            }
            if ((this.onGetUserPasswordCompletedDelegate == null)) {
                this.onGetUserPasswordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserPasswordCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserPasswordDelegate, new object[] {
                        userID}, this.onEndGetUserPasswordDelegate, this.onGetUserPasswordCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginGetUserName(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserName(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndGetUserName(System.IAsyncResult result) {
            return base.Channel.EndGetUserName(result);
        }
        
        private System.IAsyncResult OnBeginGetUserName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginGetUserName(userID, callback, asyncState);
        }
        
        private object[] OnEndGetUserName(System.IAsyncResult result) {
            string retVal = ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndGetUserName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserNameCompleted(object state) {
            if ((this.GetUserNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserNameCompleted(this, new GetUserNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserNameAsync(int userID) {
            this.GetUserNameAsync(userID, null);
        }
        
        public void GetUserNameAsync(int userID, object userState) {
            if ((this.onBeginGetUserNameDelegate == null)) {
                this.onBeginGetUserNameDelegate = new BeginOperationDelegate(this.OnBeginGetUserName);
            }
            if ((this.onEndGetUserNameDelegate == null)) {
                this.onEndGetUserNameDelegate = new EndOperationDelegate(this.OnEndGetUserName);
            }
            if ((this.onGetUserNameCompletedDelegate == null)) {
                this.onGetUserNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserNameCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserNameDelegate, new object[] {
                        userID}, this.onEndGetUserNameDelegate, this.onGetUserNameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginGetUserDescription(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserDescription(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndGetUserDescription(System.IAsyncResult result) {
            return base.Channel.EndGetUserDescription(result);
        }
        
        private System.IAsyncResult OnBeginGetUserDescription(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginGetUserDescription(userID, callback, asyncState);
        }
        
        private object[] OnEndGetUserDescription(System.IAsyncResult result) {
            string retVal = ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndGetUserDescription(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserDescriptionCompleted(object state) {
            if ((this.GetUserDescriptionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserDescriptionCompleted(this, new GetUserDescriptionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserDescriptionAsync(int userID) {
            this.GetUserDescriptionAsync(userID, null);
        }
        
        public void GetUserDescriptionAsync(int userID, object userState) {
            if ((this.onBeginGetUserDescriptionDelegate == null)) {
                this.onBeginGetUserDescriptionDelegate = new BeginOperationDelegate(this.OnBeginGetUserDescription);
            }
            if ((this.onEndGetUserDescriptionDelegate == null)) {
                this.onEndGetUserDescriptionDelegate = new EndOperationDelegate(this.OnEndGetUserDescription);
            }
            if ((this.onGetUserDescriptionCompletedDelegate == null)) {
                this.onGetUserDescriptionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserDescriptionCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserDescriptionDelegate, new object[] {
                        userID}, this.onEndGetUserDescriptionDelegate, this.onGetUserDescriptionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginGetUserIcon(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserIcon(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndGetUserIcon(System.IAsyncResult result) {
            return base.Channel.EndGetUserIcon(result);
        }
        
        private System.IAsyncResult OnBeginGetUserIcon(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginGetUserIcon(userID, callback, asyncState);
        }
        
        private object[] OnEndGetUserIcon(System.IAsyncResult result) {
            byte[] retVal = ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndGetUserIcon(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserIconCompleted(object state) {
            if ((this.GetUserIconCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserIconCompleted(this, new GetUserIconCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserIconAsync(int userID) {
            this.GetUserIconAsync(userID, null);
        }
        
        public void GetUserIconAsync(int userID, object userState) {
            if ((this.onBeginGetUserIconDelegate == null)) {
                this.onBeginGetUserIconDelegate = new BeginOperationDelegate(this.OnBeginGetUserIcon);
            }
            if ((this.onEndGetUserIconDelegate == null)) {
                this.onEndGetUserIconDelegate = new EndOperationDelegate(this.OnEndGetUserIcon);
            }
            if ((this.onGetUserIconCompletedDelegate == null)) {
                this.onGetUserIconCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserIconCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserIconDelegate, new object[] {
                        userID}, this.onEndGetUserIconDelegate, this.onGetUserIconCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginGetUserRegistrationDate(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserRegistrationDate(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.DateTime CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndGetUserRegistrationDate(System.IAsyncResult result) {
            return base.Channel.EndGetUserRegistrationDate(result);
        }
        
        private System.IAsyncResult OnBeginGetUserRegistrationDate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginGetUserRegistrationDate(userID, callback, asyncState);
        }
        
        private object[] OnEndGetUserRegistrationDate(System.IAsyncResult result) {
            System.DateTime retVal = ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndGetUserRegistrationDate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserRegistrationDateCompleted(object state) {
            if ((this.GetUserRegistrationDateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserRegistrationDateCompleted(this, new GetUserRegistrationDateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserRegistrationDateAsync(int userID) {
            this.GetUserRegistrationDateAsync(userID, null);
        }
        
        public void GetUserRegistrationDateAsync(int userID, object userState) {
            if ((this.onBeginGetUserRegistrationDateDelegate == null)) {
                this.onBeginGetUserRegistrationDateDelegate = new BeginOperationDelegate(this.OnBeginGetUserRegistrationDate);
            }
            if ((this.onEndGetUserRegistrationDateDelegate == null)) {
                this.onEndGetUserRegistrationDateDelegate = new EndOperationDelegate(this.OnEndGetUserRegistrationDate);
            }
            if ((this.onGetUserRegistrationDateCompletedDelegate == null)) {
                this.onGetUserRegistrationDateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserRegistrationDateCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserRegistrationDateDelegate, new object[] {
                        userID}, this.onEndGetUserRegistrationDateDelegate, this.onGetUserRegistrationDateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginGetUserGroups(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserGroups(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<int> CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndGetUserGroups(System.IAsyncResult result) {
            return base.Channel.EndGetUserGroups(result);
        }
        
        private System.IAsyncResult OnBeginGetUserGroups(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginGetUserGroups(userID, callback, asyncState);
        }
        
        private object[] OnEndGetUserGroups(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<int> retVal = ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndGetUserGroups(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserGroupsCompleted(object state) {
            if ((this.GetUserGroupsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserGroupsCompleted(this, new GetUserGroupsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserGroupsAsync(int userID) {
            this.GetUserGroupsAsync(userID, null);
        }
        
        public void GetUserGroupsAsync(int userID, object userState) {
            if ((this.onBeginGetUserGroupsDelegate == null)) {
                this.onBeginGetUserGroupsDelegate = new BeginOperationDelegate(this.OnBeginGetUserGroups);
            }
            if ((this.onEndGetUserGroupsDelegate == null)) {
                this.onEndGetUserGroupsDelegate = new EndOperationDelegate(this.OnEndGetUserGroups);
            }
            if ((this.onGetUserGroupsCompletedDelegate == null)) {
                this.onGetUserGroupsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserGroupsCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserGroupsDelegate, new object[] {
                        userID}, this.onEndGetUserGroupsDelegate, this.onGetUserGroupsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginSetUserPassword(int userID, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetUserPassword(userID, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndSetUserPassword(System.IAsyncResult result) {
            base.Channel.EndSetUserPassword(result);
        }
        
        private System.IAsyncResult OnBeginSetUserPassword(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginSetUserPassword(userID, password, callback, asyncState);
        }
        
        private object[] OnEndSetUserPassword(System.IAsyncResult result) {
            ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndSetUserPassword(result);
            return null;
        }
        
        private void OnSetUserPasswordCompleted(object state) {
            if ((this.SetUserPasswordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetUserPasswordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetUserPasswordAsync(int userID, string password) {
            this.SetUserPasswordAsync(userID, password, null);
        }
        
        public void SetUserPasswordAsync(int userID, string password, object userState) {
            if ((this.onBeginSetUserPasswordDelegate == null)) {
                this.onBeginSetUserPasswordDelegate = new BeginOperationDelegate(this.OnBeginSetUserPassword);
            }
            if ((this.onEndSetUserPasswordDelegate == null)) {
                this.onEndSetUserPasswordDelegate = new EndOperationDelegate(this.OnEndSetUserPassword);
            }
            if ((this.onSetUserPasswordCompletedDelegate == null)) {
                this.onSetUserPasswordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetUserPasswordCompleted);
            }
            base.InvokeAsync(this.onBeginSetUserPasswordDelegate, new object[] {
                        userID,
                        password}, this.onEndSetUserPasswordDelegate, this.onSetUserPasswordCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginSetUserName(int userID, string name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetUserName(userID, name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndSetUserName(System.IAsyncResult result) {
            base.Channel.EndSetUserName(result);
        }
        
        private System.IAsyncResult OnBeginSetUserName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            string name = ((string)(inValues[1]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginSetUserName(userID, name, callback, asyncState);
        }
        
        private object[] OnEndSetUserName(System.IAsyncResult result) {
            ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndSetUserName(result);
            return null;
        }
        
        private void OnSetUserNameCompleted(object state) {
            if ((this.SetUserNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetUserNameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetUserNameAsync(int userID, string name) {
            this.SetUserNameAsync(userID, name, null);
        }
        
        public void SetUserNameAsync(int userID, string name, object userState) {
            if ((this.onBeginSetUserNameDelegate == null)) {
                this.onBeginSetUserNameDelegate = new BeginOperationDelegate(this.OnBeginSetUserName);
            }
            if ((this.onEndSetUserNameDelegate == null)) {
                this.onEndSetUserNameDelegate = new EndOperationDelegate(this.OnEndSetUserName);
            }
            if ((this.onSetUserNameCompletedDelegate == null)) {
                this.onSetUserNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetUserNameCompleted);
            }
            base.InvokeAsync(this.onBeginSetUserNameDelegate, new object[] {
                        userID,
                        name}, this.onEndSetUserNameDelegate, this.onSetUserNameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginSetUserDescription(int userID, string description, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetUserDescription(userID, description, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndSetUserDescription(System.IAsyncResult result) {
            base.Channel.EndSetUserDescription(result);
        }
        
        private System.IAsyncResult OnBeginSetUserDescription(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            string description = ((string)(inValues[1]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginSetUserDescription(userID, description, callback, asyncState);
        }
        
        private object[] OnEndSetUserDescription(System.IAsyncResult result) {
            ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndSetUserDescription(result);
            return null;
        }
        
        private void OnSetUserDescriptionCompleted(object state) {
            if ((this.SetUserDescriptionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetUserDescriptionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetUserDescriptionAsync(int userID, string description) {
            this.SetUserDescriptionAsync(userID, description, null);
        }
        
        public void SetUserDescriptionAsync(int userID, string description, object userState) {
            if ((this.onBeginSetUserDescriptionDelegate == null)) {
                this.onBeginSetUserDescriptionDelegate = new BeginOperationDelegate(this.OnBeginSetUserDescription);
            }
            if ((this.onEndSetUserDescriptionDelegate == null)) {
                this.onEndSetUserDescriptionDelegate = new EndOperationDelegate(this.OnEndSetUserDescription);
            }
            if ((this.onSetUserDescriptionCompletedDelegate == null)) {
                this.onSetUserDescriptionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetUserDescriptionCompleted);
            }
            base.InvokeAsync(this.onBeginSetUserDescriptionDelegate, new object[] {
                        userID,
                        description}, this.onEndSetUserDescriptionDelegate, this.onSetUserDescriptionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginSetUserIcon(int userID, byte[] icon, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetUserIcon(userID, icon, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndSetUserIcon(System.IAsyncResult result) {
            base.Channel.EndSetUserIcon(result);
        }
        
        private System.IAsyncResult OnBeginSetUserIcon(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            byte[] icon = ((byte[])(inValues[1]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginSetUserIcon(userID, icon, callback, asyncState);
        }
        
        private object[] OnEndSetUserIcon(System.IAsyncResult result) {
            ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndSetUserIcon(result);
            return null;
        }
        
        private void OnSetUserIconCompleted(object state) {
            if ((this.SetUserIconCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetUserIconCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetUserIconAsync(int userID, byte[] icon) {
            this.SetUserIconAsync(userID, icon, null);
        }
        
        public void SetUserIconAsync(int userID, byte[] icon, object userState) {
            if ((this.onBeginSetUserIconDelegate == null)) {
                this.onBeginSetUserIconDelegate = new BeginOperationDelegate(this.OnBeginSetUserIcon);
            }
            if ((this.onEndSetUserIconDelegate == null)) {
                this.onEndSetUserIconDelegate = new EndOperationDelegate(this.OnEndSetUserIcon);
            }
            if ((this.onSetUserIconCompletedDelegate == null)) {
                this.onSetUserIconCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetUserIconCompleted);
            }
            base.InvokeAsync(this.onBeginSetUserIconDelegate, new object[] {
                        userID,
                        icon}, this.onEndSetUserIconDelegate, this.onSetUserIconCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginIsGroupRegistered(string name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsGroupRegistered(name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndIsGroupRegistered(System.IAsyncResult result) {
            return base.Channel.EndIsGroupRegistered(result);
        }
        
        private System.IAsyncResult OnBeginIsGroupRegistered(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string name = ((string)(inValues[0]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginIsGroupRegistered(name, callback, asyncState);
        }
        
        private object[] OnEndIsGroupRegistered(System.IAsyncResult result) {
            bool retVal = ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndIsGroupRegistered(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsGroupRegisteredCompleted(object state) {
            if ((this.IsGroupRegisteredCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsGroupRegisteredCompleted(this, new IsGroupRegisteredCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsGroupRegisteredAsync(string name) {
            this.IsGroupRegisteredAsync(name, null);
        }
        
        public void IsGroupRegisteredAsync(string name, object userState) {
            if ((this.onBeginIsGroupRegisteredDelegate == null)) {
                this.onBeginIsGroupRegisteredDelegate = new BeginOperationDelegate(this.OnBeginIsGroupRegistered);
            }
            if ((this.onEndIsGroupRegisteredDelegate == null)) {
                this.onEndIsGroupRegisteredDelegate = new EndOperationDelegate(this.OnEndIsGroupRegistered);
            }
            if ((this.onIsGroupRegisteredCompletedDelegate == null)) {
                this.onIsGroupRegisteredCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsGroupRegisteredCompleted);
            }
            base.InvokeAsync(this.onBeginIsGroupRegisteredDelegate, new object[] {
                        name}, this.onEndIsGroupRegisteredDelegate, this.onIsGroupRegisteredCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginRegisterGroup(string name, int privacy, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegisterGroup(name, privacy, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndRegisterGroup(System.IAsyncResult result) {
            return base.Channel.EndRegisterGroup(result);
        }
        
        private System.IAsyncResult OnBeginRegisterGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string name = ((string)(inValues[0]));
            int privacy = ((int)(inValues[1]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginRegisterGroup(name, privacy, callback, asyncState);
        }
        
        private object[] OnEndRegisterGroup(System.IAsyncResult result) {
            int retVal = ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndRegisterGroup(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRegisterGroupCompleted(object state) {
            if ((this.RegisterGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisterGroupCompleted(this, new RegisterGroupCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisterGroupAsync(string name, int privacy) {
            this.RegisterGroupAsync(name, privacy, null);
        }
        
        public void RegisterGroupAsync(string name, int privacy, object userState) {
            if ((this.onBeginRegisterGroupDelegate == null)) {
                this.onBeginRegisterGroupDelegate = new BeginOperationDelegate(this.OnBeginRegisterGroup);
            }
            if ((this.onEndRegisterGroupDelegate == null)) {
                this.onEndRegisterGroupDelegate = new EndOperationDelegate(this.OnEndRegisterGroup);
            }
            if ((this.onRegisterGroupCompletedDelegate == null)) {
                this.onRegisterGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterGroupCompleted);
            }
            base.InvokeAsync(this.onBeginRegisterGroupDelegate, new object[] {
                        name,
                        privacy}, this.onEndRegisterGroupDelegate, this.onRegisterGroupCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginRemoveGroup(int groupID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveGroup(groupID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndRemoveGroup(System.IAsyncResult result) {
            base.Channel.EndRemoveGroup(result);
        }
        
        private System.IAsyncResult OnBeginRemoveGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int groupID = ((int)(inValues[0]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginRemoveGroup(groupID, callback, asyncState);
        }
        
        private object[] OnEndRemoveGroup(System.IAsyncResult result) {
            ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndRemoveGroup(result);
            return null;
        }
        
        private void OnRemoveGroupCompleted(object state) {
            if ((this.RemoveGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveGroupAsync(int groupID) {
            this.RemoveGroupAsync(groupID, null);
        }
        
        public void RemoveGroupAsync(int groupID, object userState) {
            if ((this.onBeginRemoveGroupDelegate == null)) {
                this.onBeginRemoveGroupDelegate = new BeginOperationDelegate(this.OnBeginRemoveGroup);
            }
            if ((this.onEndRemoveGroupDelegate == null)) {
                this.onEndRemoveGroupDelegate = new EndOperationDelegate(this.OnEndRemoveGroup);
            }
            if ((this.onRemoveGroupCompletedDelegate == null)) {
                this.onRemoveGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveGroupCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveGroupDelegate, new object[] {
                        groupID}, this.onEndRemoveGroupDelegate, this.onRemoveGroupCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginGetGroupID(string name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGroupID(name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndGetGroupID(System.IAsyncResult result) {
            return base.Channel.EndGetGroupID(result);
        }
        
        private System.IAsyncResult OnBeginGetGroupID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string name = ((string)(inValues[0]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginGetGroupID(name, callback, asyncState);
        }
        
        private object[] OnEndGetGroupID(System.IAsyncResult result) {
            int retVal = ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndGetGroupID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetGroupIDCompleted(object state) {
            if ((this.GetGroupIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGroupIDCompleted(this, new GetGroupIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGroupIDAsync(string name) {
            this.GetGroupIDAsync(name, null);
        }
        
        public void GetGroupIDAsync(string name, object userState) {
            if ((this.onBeginGetGroupIDDelegate == null)) {
                this.onBeginGetGroupIDDelegate = new BeginOperationDelegate(this.OnBeginGetGroupID);
            }
            if ((this.onEndGetGroupIDDelegate == null)) {
                this.onEndGetGroupIDDelegate = new EndOperationDelegate(this.OnEndGetGroupID);
            }
            if ((this.onGetGroupIDCompletedDelegate == null)) {
                this.onGetGroupIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGroupIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetGroupIDDelegate, new object[] {
                        name}, this.onEndGetGroupIDDelegate, this.onGetGroupIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginGetGroupName(int groupID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGroupName(groupID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndGetGroupName(System.IAsyncResult result) {
            return base.Channel.EndGetGroupName(result);
        }
        
        private System.IAsyncResult OnBeginGetGroupName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int groupID = ((int)(inValues[0]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginGetGroupName(groupID, callback, asyncState);
        }
        
        private object[] OnEndGetGroupName(System.IAsyncResult result) {
            string retVal = ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndGetGroupName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetGroupNameCompleted(object state) {
            if ((this.GetGroupNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGroupNameCompleted(this, new GetGroupNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGroupNameAsync(int groupID) {
            this.GetGroupNameAsync(groupID, null);
        }
        
        public void GetGroupNameAsync(int groupID, object userState) {
            if ((this.onBeginGetGroupNameDelegate == null)) {
                this.onBeginGetGroupNameDelegate = new BeginOperationDelegate(this.OnBeginGetGroupName);
            }
            if ((this.onEndGetGroupNameDelegate == null)) {
                this.onEndGetGroupNameDelegate = new EndOperationDelegate(this.OnEndGetGroupName);
            }
            if ((this.onGetGroupNameCompletedDelegate == null)) {
                this.onGetGroupNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGroupNameCompleted);
            }
            base.InvokeAsync(this.onBeginGetGroupNameDelegate, new object[] {
                        groupID}, this.onEndGetGroupNameDelegate, this.onGetGroupNameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginGetGroupDescription(int groupID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGroupDescription(groupID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndGetGroupDescription(System.IAsyncResult result) {
            return base.Channel.EndGetGroupDescription(result);
        }
        
        private System.IAsyncResult OnBeginGetGroupDescription(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int groupID = ((int)(inValues[0]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginGetGroupDescription(groupID, callback, asyncState);
        }
        
        private object[] OnEndGetGroupDescription(System.IAsyncResult result) {
            string retVal = ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndGetGroupDescription(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetGroupDescriptionCompleted(object state) {
            if ((this.GetGroupDescriptionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGroupDescriptionCompleted(this, new GetGroupDescriptionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGroupDescriptionAsync(int groupID) {
            this.GetGroupDescriptionAsync(groupID, null);
        }
        
        public void GetGroupDescriptionAsync(int groupID, object userState) {
            if ((this.onBeginGetGroupDescriptionDelegate == null)) {
                this.onBeginGetGroupDescriptionDelegate = new BeginOperationDelegate(this.OnBeginGetGroupDescription);
            }
            if ((this.onEndGetGroupDescriptionDelegate == null)) {
                this.onEndGetGroupDescriptionDelegate = new EndOperationDelegate(this.OnEndGetGroupDescription);
            }
            if ((this.onGetGroupDescriptionCompletedDelegate == null)) {
                this.onGetGroupDescriptionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGroupDescriptionCompleted);
            }
            base.InvokeAsync(this.onBeginGetGroupDescriptionDelegate, new object[] {
                        groupID}, this.onEndGetGroupDescriptionDelegate, this.onGetGroupDescriptionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginGetGroupIcon(int groupID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGroupIcon(groupID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndGetGroupIcon(System.IAsyncResult result) {
            return base.Channel.EndGetGroupIcon(result);
        }
        
        private System.IAsyncResult OnBeginGetGroupIcon(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int groupID = ((int)(inValues[0]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginGetGroupIcon(groupID, callback, asyncState);
        }
        
        private object[] OnEndGetGroupIcon(System.IAsyncResult result) {
            byte[] retVal = ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndGetGroupIcon(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetGroupIconCompleted(object state) {
            if ((this.GetGroupIconCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGroupIconCompleted(this, new GetGroupIconCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGroupIconAsync(int groupID) {
            this.GetGroupIconAsync(groupID, null);
        }
        
        public void GetGroupIconAsync(int groupID, object userState) {
            if ((this.onBeginGetGroupIconDelegate == null)) {
                this.onBeginGetGroupIconDelegate = new BeginOperationDelegate(this.OnBeginGetGroupIcon);
            }
            if ((this.onEndGetGroupIconDelegate == null)) {
                this.onEndGetGroupIconDelegate = new EndOperationDelegate(this.OnEndGetGroupIcon);
            }
            if ((this.onGetGroupIconCompletedDelegate == null)) {
                this.onGetGroupIconCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGroupIconCompleted);
            }
            base.InvokeAsync(this.onBeginGetGroupIconDelegate, new object[] {
                        groupID}, this.onEndGetGroupIconDelegate, this.onGetGroupIconCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginGetGroupPrivacy(int groupID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGroupPrivacy(groupID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndGetGroupPrivacy(System.IAsyncResult result) {
            return base.Channel.EndGetGroupPrivacy(result);
        }
        
        private System.IAsyncResult OnBeginGetGroupPrivacy(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int groupID = ((int)(inValues[0]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginGetGroupPrivacy(groupID, callback, asyncState);
        }
        
        private object[] OnEndGetGroupPrivacy(System.IAsyncResult result) {
            int retVal = ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndGetGroupPrivacy(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetGroupPrivacyCompleted(object state) {
            if ((this.GetGroupPrivacyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGroupPrivacyCompleted(this, new GetGroupPrivacyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGroupPrivacyAsync(int groupID) {
            this.GetGroupPrivacyAsync(groupID, null);
        }
        
        public void GetGroupPrivacyAsync(int groupID, object userState) {
            if ((this.onBeginGetGroupPrivacyDelegate == null)) {
                this.onBeginGetGroupPrivacyDelegate = new BeginOperationDelegate(this.OnBeginGetGroupPrivacy);
            }
            if ((this.onEndGetGroupPrivacyDelegate == null)) {
                this.onEndGetGroupPrivacyDelegate = new EndOperationDelegate(this.OnEndGetGroupPrivacy);
            }
            if ((this.onGetGroupPrivacyCompletedDelegate == null)) {
                this.onGetGroupPrivacyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGroupPrivacyCompleted);
            }
            base.InvokeAsync(this.onBeginGetGroupPrivacyDelegate, new object[] {
                        groupID}, this.onEndGetGroupPrivacyDelegate, this.onGetGroupPrivacyCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginGetGroupRegistrationDate(int groupID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGroupRegistrationDate(groupID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.DateTime CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndGetGroupRegistrationDate(System.IAsyncResult result) {
            return base.Channel.EndGetGroupRegistrationDate(result);
        }
        
        private System.IAsyncResult OnBeginGetGroupRegistrationDate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int groupID = ((int)(inValues[0]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginGetGroupRegistrationDate(groupID, callback, asyncState);
        }
        
        private object[] OnEndGetGroupRegistrationDate(System.IAsyncResult result) {
            System.DateTime retVal = ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndGetGroupRegistrationDate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetGroupRegistrationDateCompleted(object state) {
            if ((this.GetGroupRegistrationDateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGroupRegistrationDateCompleted(this, new GetGroupRegistrationDateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGroupRegistrationDateAsync(int groupID) {
            this.GetGroupRegistrationDateAsync(groupID, null);
        }
        
        public void GetGroupRegistrationDateAsync(int groupID, object userState) {
            if ((this.onBeginGetGroupRegistrationDateDelegate == null)) {
                this.onBeginGetGroupRegistrationDateDelegate = new BeginOperationDelegate(this.OnBeginGetGroupRegistrationDate);
            }
            if ((this.onEndGetGroupRegistrationDateDelegate == null)) {
                this.onEndGetGroupRegistrationDateDelegate = new EndOperationDelegate(this.OnEndGetGroupRegistrationDate);
            }
            if ((this.onGetGroupRegistrationDateCompletedDelegate == null)) {
                this.onGetGroupRegistrationDateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGroupRegistrationDateCompleted);
            }
            base.InvokeAsync(this.onBeginGetGroupRegistrationDateDelegate, new object[] {
                        groupID}, this.onEndGetGroupRegistrationDateDelegate, this.onGetGroupRegistrationDateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginGetGroupMembers(int groupID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGroupMembers(groupID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<int> CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndGetGroupMembers(System.IAsyncResult result) {
            return base.Channel.EndGetGroupMembers(result);
        }
        
        private System.IAsyncResult OnBeginGetGroupMembers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int groupID = ((int)(inValues[0]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginGetGroupMembers(groupID, callback, asyncState);
        }
        
        private object[] OnEndGetGroupMembers(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<int> retVal = ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndGetGroupMembers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetGroupMembersCompleted(object state) {
            if ((this.GetGroupMembersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGroupMembersCompleted(this, new GetGroupMembersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGroupMembersAsync(int groupID) {
            this.GetGroupMembersAsync(groupID, null);
        }
        
        public void GetGroupMembersAsync(int groupID, object userState) {
            if ((this.onBeginGetGroupMembersDelegate == null)) {
                this.onBeginGetGroupMembersDelegate = new BeginOperationDelegate(this.OnBeginGetGroupMembers);
            }
            if ((this.onEndGetGroupMembersDelegate == null)) {
                this.onEndGetGroupMembersDelegate = new EndOperationDelegate(this.OnEndGetGroupMembers);
            }
            if ((this.onGetGroupMembersCompletedDelegate == null)) {
                this.onGetGroupMembersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGroupMembersCompleted);
            }
            base.InvokeAsync(this.onBeginGetGroupMembersDelegate, new object[] {
                        groupID}, this.onEndGetGroupMembersDelegate, this.onGetGroupMembersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginGetGroupCameras(int groupID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGroupCameras(groupID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<int> CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndGetGroupCameras(System.IAsyncResult result) {
            return base.Channel.EndGetGroupCameras(result);
        }
        
        private System.IAsyncResult OnBeginGetGroupCameras(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int groupID = ((int)(inValues[0]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginGetGroupCameras(groupID, callback, asyncState);
        }
        
        private object[] OnEndGetGroupCameras(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<int> retVal = ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndGetGroupCameras(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetGroupCamerasCompleted(object state) {
            if ((this.GetGroupCamerasCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGroupCamerasCompleted(this, new GetGroupCamerasCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGroupCamerasAsync(int groupID) {
            this.GetGroupCamerasAsync(groupID, null);
        }
        
        public void GetGroupCamerasAsync(int groupID, object userState) {
            if ((this.onBeginGetGroupCamerasDelegate == null)) {
                this.onBeginGetGroupCamerasDelegate = new BeginOperationDelegate(this.OnBeginGetGroupCameras);
            }
            if ((this.onEndGetGroupCamerasDelegate == null)) {
                this.onEndGetGroupCamerasDelegate = new EndOperationDelegate(this.OnEndGetGroupCameras);
            }
            if ((this.onGetGroupCamerasCompletedDelegate == null)) {
                this.onGetGroupCamerasCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGroupCamerasCompleted);
            }
            base.InvokeAsync(this.onBeginGetGroupCamerasDelegate, new object[] {
                        groupID}, this.onEndGetGroupCamerasDelegate, this.onGetGroupCamerasCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginSetGroupName(int groupID, string name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetGroupName(groupID, name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndSetGroupName(System.IAsyncResult result) {
            base.Channel.EndSetGroupName(result);
        }
        
        private System.IAsyncResult OnBeginSetGroupName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int groupID = ((int)(inValues[0]));
            string name = ((string)(inValues[1]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginSetGroupName(groupID, name, callback, asyncState);
        }
        
        private object[] OnEndSetGroupName(System.IAsyncResult result) {
            ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndSetGroupName(result);
            return null;
        }
        
        private void OnSetGroupNameCompleted(object state) {
            if ((this.SetGroupNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetGroupNameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetGroupNameAsync(int groupID, string name) {
            this.SetGroupNameAsync(groupID, name, null);
        }
        
        public void SetGroupNameAsync(int groupID, string name, object userState) {
            if ((this.onBeginSetGroupNameDelegate == null)) {
                this.onBeginSetGroupNameDelegate = new BeginOperationDelegate(this.OnBeginSetGroupName);
            }
            if ((this.onEndSetGroupNameDelegate == null)) {
                this.onEndSetGroupNameDelegate = new EndOperationDelegate(this.OnEndSetGroupName);
            }
            if ((this.onSetGroupNameCompletedDelegate == null)) {
                this.onSetGroupNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetGroupNameCompleted);
            }
            base.InvokeAsync(this.onBeginSetGroupNameDelegate, new object[] {
                        groupID,
                        name}, this.onEndSetGroupNameDelegate, this.onSetGroupNameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginSetGroupDescription(int groupID, string description, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetGroupDescription(groupID, description, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndSetGroupDescription(System.IAsyncResult result) {
            base.Channel.EndSetGroupDescription(result);
        }
        
        private System.IAsyncResult OnBeginSetGroupDescription(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int groupID = ((int)(inValues[0]));
            string description = ((string)(inValues[1]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginSetGroupDescription(groupID, description, callback, asyncState);
        }
        
        private object[] OnEndSetGroupDescription(System.IAsyncResult result) {
            ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndSetGroupDescription(result);
            return null;
        }
        
        private void OnSetGroupDescriptionCompleted(object state) {
            if ((this.SetGroupDescriptionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetGroupDescriptionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetGroupDescriptionAsync(int groupID, string description) {
            this.SetGroupDescriptionAsync(groupID, description, null);
        }
        
        public void SetGroupDescriptionAsync(int groupID, string description, object userState) {
            if ((this.onBeginSetGroupDescriptionDelegate == null)) {
                this.onBeginSetGroupDescriptionDelegate = new BeginOperationDelegate(this.OnBeginSetGroupDescription);
            }
            if ((this.onEndSetGroupDescriptionDelegate == null)) {
                this.onEndSetGroupDescriptionDelegate = new EndOperationDelegate(this.OnEndSetGroupDescription);
            }
            if ((this.onSetGroupDescriptionCompletedDelegate == null)) {
                this.onSetGroupDescriptionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetGroupDescriptionCompleted);
            }
            base.InvokeAsync(this.onBeginSetGroupDescriptionDelegate, new object[] {
                        groupID,
                        description}, this.onEndSetGroupDescriptionDelegate, this.onSetGroupDescriptionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginSetGroupIcon(int groupID, byte[] icon, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetGroupIcon(groupID, icon, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndSetGroupIcon(System.IAsyncResult result) {
            base.Channel.EndSetGroupIcon(result);
        }
        
        private System.IAsyncResult OnBeginSetGroupIcon(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int groupID = ((int)(inValues[0]));
            byte[] icon = ((byte[])(inValues[1]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginSetGroupIcon(groupID, icon, callback, asyncState);
        }
        
        private object[] OnEndSetGroupIcon(System.IAsyncResult result) {
            ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndSetGroupIcon(result);
            return null;
        }
        
        private void OnSetGroupIconCompleted(object state) {
            if ((this.SetGroupIconCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetGroupIconCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetGroupIconAsync(int groupID, byte[] icon) {
            this.SetGroupIconAsync(groupID, icon, null);
        }
        
        public void SetGroupIconAsync(int groupID, byte[] icon, object userState) {
            if ((this.onBeginSetGroupIconDelegate == null)) {
                this.onBeginSetGroupIconDelegate = new BeginOperationDelegate(this.OnBeginSetGroupIcon);
            }
            if ((this.onEndSetGroupIconDelegate == null)) {
                this.onEndSetGroupIconDelegate = new EndOperationDelegate(this.OnEndSetGroupIcon);
            }
            if ((this.onSetGroupIconCompletedDelegate == null)) {
                this.onSetGroupIconCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetGroupIconCompleted);
            }
            base.InvokeAsync(this.onBeginSetGroupIconDelegate, new object[] {
                        groupID,
                        icon}, this.onEndSetGroupIconDelegate, this.onSetGroupIconCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginSetGroupPrivacy(int groupID, int privacy, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetGroupPrivacy(groupID, privacy, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndSetGroupPrivacy(System.IAsyncResult result) {
            base.Channel.EndSetGroupPrivacy(result);
        }
        
        private System.IAsyncResult OnBeginSetGroupPrivacy(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int groupID = ((int)(inValues[0]));
            int privacy = ((int)(inValues[1]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginSetGroupPrivacy(groupID, privacy, callback, asyncState);
        }
        
        private object[] OnEndSetGroupPrivacy(System.IAsyncResult result) {
            ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndSetGroupPrivacy(result);
            return null;
        }
        
        private void OnSetGroupPrivacyCompleted(object state) {
            if ((this.SetGroupPrivacyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetGroupPrivacyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetGroupPrivacyAsync(int groupID, int privacy) {
            this.SetGroupPrivacyAsync(groupID, privacy, null);
        }
        
        public void SetGroupPrivacyAsync(int groupID, int privacy, object userState) {
            if ((this.onBeginSetGroupPrivacyDelegate == null)) {
                this.onBeginSetGroupPrivacyDelegate = new BeginOperationDelegate(this.OnBeginSetGroupPrivacy);
            }
            if ((this.onEndSetGroupPrivacyDelegate == null)) {
                this.onEndSetGroupPrivacyDelegate = new EndOperationDelegate(this.OnEndSetGroupPrivacy);
            }
            if ((this.onSetGroupPrivacyCompletedDelegate == null)) {
                this.onSetGroupPrivacyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetGroupPrivacyCompleted);
            }
            base.InvokeAsync(this.onBeginSetGroupPrivacyDelegate, new object[] {
                        groupID,
                        privacy}, this.onEndSetGroupPrivacyDelegate, this.onSetGroupPrivacyCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.BeginAddGroupMember(int userID, int groupID, int privileges, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddGroupMember(userID, groupID, privileges, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService.EndAddGroupMember(System.IAsyncResult result) {
            base.Channel.EndAddGroupMember(result);
        }
        
        private System.IAsyncResult OnBeginAddGroupMember(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            int groupID = ((int)(inValues[1]));
            int privileges = ((int)(inValues[2]));
            return ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).BeginAddGroupMember(userID, groupID, privileges, callback, asyncState);
        }
        
        private object[] OnEndAddGroupMember(System.IAsyncResult result) {
            ((CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService)(this)).EndAddGroupMember(result);
            return null;
        }
        
        private void OnAddGroupMemberCompleted(object state) {
            if ((this.AddGroupMemberCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddGroupMemberCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddGroupMemberAsync(int userID, int groupID, int privileges) {
            this.AddGroupMemberAsync(userID, groupID, privileges, null);
        }
        
        public void AddGroupMemberAsync(int userID, int groupID, int privileges, object userState) {
            if ((this.onBeginAddGroupMemberDelegate == null)) {
                this.onBeginAddGroupMemberDelegate = new BeginOperationDelegate(this.OnBeginAddGroupMember);
            }
            if ((this.onEndAddGroupMemberDelegate == null)) {
                this.onEndAddGroupMemberDelegate = new EndOperationDelegate(this.OnEndAddGroupMember);
            }
            if ((this.onAddGroupMemberCompletedDelegate == null)) {
                this.onAddGroupMemberCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddGroupMemberCompleted);
            }
            base.InvokeAsync(this.onBeginAddGroupMemberDelegate, new object[] {
                        userID,
                        groupID,
                        privileges}, this.onEndAddGroupMemberDelegate, this.onAddGroupMemberCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService CreateChannel() {
            return new CloudObserverServiceClientChannel(this);
        }
        
        private class CloudObserverServiceClientChannel : ChannelBase<CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService>, CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService {
            
            public CloudObserverServiceClientChannel(System.ServiceModel.ClientBase<CloudObserverUserInterface.CloudObserverServiceReference.ICloudObserverService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginSetGroupMemberPrivileges(int userID, int groupID, int privileges, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = userID;
                _args[1] = groupID;
                _args[2] = privileges;
                System.IAsyncResult _result = base.BeginInvoke("SetGroupMemberPrivileges", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSetGroupMemberPrivileges(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SetGroupMemberPrivileges", _args, result);
            }
            
            public System.IAsyncResult BeginRemoveGroupMember(int userID, int groupID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userID;
                _args[1] = groupID;
                System.IAsyncResult _result = base.BeginInvoke("RemoveGroupMember", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRemoveGroupMember(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("RemoveGroupMember", _args, result);
            }
            
            public System.IAsyncResult BeginAddGroupCamera(int cameraID, int groupID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = cameraID;
                _args[1] = groupID;
                System.IAsyncResult _result = base.BeginInvoke("AddGroupCamera", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddGroupCamera(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddGroupCamera", _args, result);
            }
            
            public System.IAsyncResult BeginRemoveGroupCamera(int cameraID, int groupID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = cameraID;
                _args[1] = groupID;
                System.IAsyncResult _result = base.BeginInvoke("RemoveGroupCamera", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRemoveGroupCamera(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("RemoveGroupCamera", _args, result);
            }
            
            public System.IAsyncResult BeginIsCameraRegistered(string path, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = path;
                System.IAsyncResult _result = base.BeginInvoke("IsCameraRegistered", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndIsCameraRegistered(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("IsCameraRegistered", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRegisterCamera(string name, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = name;
                System.IAsyncResult _result = base.BeginInvoke("RegisterCamera", _args, callback, asyncState);
                return _result;
            }
            
            public int EndRegisterCamera(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("RegisterCamera", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemoveCamera(int cameraID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cameraID;
                System.IAsyncResult _result = base.BeginInvoke("RemoveCamera", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRemoveCamera(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("RemoveCamera", _args, result);
            }
            
            public System.IAsyncResult BeginGetCameraID(string path, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = path;
                System.IAsyncResult _result = base.BeginInvoke("GetCameraID", _args, callback, asyncState);
                return _result;
            }
            
            public int EndGetCameraID(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("GetCameraID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCameraPath(int cameraID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cameraID;
                System.IAsyncResult _result = base.BeginInvoke("GetCameraPath", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetCameraPath(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetCameraPath", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCameraName(int cameraID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cameraID;
                System.IAsyncResult _result = base.BeginInvoke("GetCameraName", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetCameraName(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetCameraName", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCameraDescription(int cameraID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cameraID;
                System.IAsyncResult _result = base.BeginInvoke("GetCameraDescription", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetCameraDescription(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetCameraDescription", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCameraIcon(int cameraID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cameraID;
                System.IAsyncResult _result = base.BeginInvoke("GetCameraIcon", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndGetCameraIcon(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("GetCameraIcon", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCameraRegistrationDate(int cameraID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cameraID;
                System.IAsyncResult _result = base.BeginInvoke("GetCameraRegistrationDate", _args, callback, asyncState);
                return _result;
            }
            
            public System.DateTime EndGetCameraRegistrationDate(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.DateTime _result = ((System.DateTime)(base.EndInvoke("GetCameraRegistrationDate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCameraGroups(int cameraID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cameraID;
                System.IAsyncResult _result = base.BeginInvoke("GetCameraGroups", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<int> EndGetCameraGroups(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<int> _result = ((System.Collections.ObjectModel.ObservableCollection<int>)(base.EndInvoke("GetCameraGroups", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCameraFrames(int cameraID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cameraID;
                System.IAsyncResult _result = base.BeginInvoke("GetCameraFrames", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<int> EndGetCameraFrames(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<int> _result = ((System.Collections.ObjectModel.ObservableCollection<int>)(base.EndInvoke("GetCameraFrames", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSetCameraName(int cameraID, string name, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = cameraID;
                _args[1] = name;
                System.IAsyncResult _result = base.BeginInvoke("SetCameraName", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSetCameraName(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SetCameraName", _args, result);
            }
            
            public System.IAsyncResult BeginSetCameraDescription(int cameraID, string description, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = cameraID;
                _args[1] = description;
                System.IAsyncResult _result = base.BeginInvoke("SetCameraDescription", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSetCameraDescription(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SetCameraDescription", _args, result);
            }
            
            public System.IAsyncResult BeginSetCameraIcon(int cameraID, byte[] icon, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = cameraID;
                _args[1] = icon;
                System.IAsyncResult _result = base.BeginInvoke("SetCameraIcon", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSetCameraIcon(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SetCameraIcon", _args, result);
            }
            
            public System.IAsyncResult BeginAddFrame(int cameraID, byte[] content, string marker, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = cameraID;
                _args[1] = content;
                _args[2] = marker;
                System.IAsyncResult _result = base.BeginInvoke("AddFrame", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddFrame(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddFrame", _args, result);
            }
            
            public System.IAsyncResult BeginRemoveFrame(int frameID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = frameID;
                System.IAsyncResult _result = base.BeginInvoke("RemoveFrame", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRemoveFrame(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("RemoveFrame", _args, result);
            }
            
            public System.IAsyncResult BeginGetFrameContent(int frameID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = frameID;
                System.IAsyncResult _result = base.BeginInvoke("GetFrameContent", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndGetFrameContent(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("GetFrameContent", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFrameMarker(int frameID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = frameID;
                System.IAsyncResult _result = base.BeginInvoke("GetFrameMarker", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetFrameMarker(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetFrameMarker", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginIsEmailRegistered(string email, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = email;
                System.IAsyncResult _result = base.BeginInvoke("IsEmailRegistered", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndIsEmailRegistered(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("IsEmailRegistered", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginIsUserRegistered(string email, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = email;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("IsUserRegistered", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndIsUserRegistered(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("IsUserRegistered", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRegisterUser(string email, string password, string name, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = email;
                _args[1] = password;
                _args[2] = name;
                System.IAsyncResult _result = base.BeginInvoke("RegisterUser", _args, callback, asyncState);
                return _result;
            }
            
            public int EndRegisterUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("RegisterUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemoveUser(int userID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userID;
                System.IAsyncResult _result = base.BeginInvoke("RemoveUser", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRemoveUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("RemoveUser", _args, result);
            }
            
            public System.IAsyncResult BeginGetUserID(string email, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = email;
                System.IAsyncResult _result = base.BeginInvoke("GetUserID", _args, callback, asyncState);
                return _result;
            }
            
            public int EndGetUserID(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("GetUserID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUserEmail(int userID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userID;
                System.IAsyncResult _result = base.BeginInvoke("GetUserEmail", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetUserEmail(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetUserEmail", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUserPassword(int userID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userID;
                System.IAsyncResult _result = base.BeginInvoke("GetUserPassword", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetUserPassword(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetUserPassword", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUserName(int userID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userID;
                System.IAsyncResult _result = base.BeginInvoke("GetUserName", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetUserName(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetUserName", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUserDescription(int userID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userID;
                System.IAsyncResult _result = base.BeginInvoke("GetUserDescription", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetUserDescription(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetUserDescription", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUserIcon(int userID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userID;
                System.IAsyncResult _result = base.BeginInvoke("GetUserIcon", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndGetUserIcon(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("GetUserIcon", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUserRegistrationDate(int userID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userID;
                System.IAsyncResult _result = base.BeginInvoke("GetUserRegistrationDate", _args, callback, asyncState);
                return _result;
            }
            
            public System.DateTime EndGetUserRegistrationDate(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.DateTime _result = ((System.DateTime)(base.EndInvoke("GetUserRegistrationDate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUserGroups(int userID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userID;
                System.IAsyncResult _result = base.BeginInvoke("GetUserGroups", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<int> EndGetUserGroups(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<int> _result = ((System.Collections.ObjectModel.ObservableCollection<int>)(base.EndInvoke("GetUserGroups", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSetUserPassword(int userID, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userID;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("SetUserPassword", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSetUserPassword(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SetUserPassword", _args, result);
            }
            
            public System.IAsyncResult BeginSetUserName(int userID, string name, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userID;
                _args[1] = name;
                System.IAsyncResult _result = base.BeginInvoke("SetUserName", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSetUserName(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SetUserName", _args, result);
            }
            
            public System.IAsyncResult BeginSetUserDescription(int userID, string description, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userID;
                _args[1] = description;
                System.IAsyncResult _result = base.BeginInvoke("SetUserDescription", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSetUserDescription(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SetUserDescription", _args, result);
            }
            
            public System.IAsyncResult BeginSetUserIcon(int userID, byte[] icon, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userID;
                _args[1] = icon;
                System.IAsyncResult _result = base.BeginInvoke("SetUserIcon", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSetUserIcon(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SetUserIcon", _args, result);
            }
            
            public System.IAsyncResult BeginIsGroupRegistered(string name, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = name;
                System.IAsyncResult _result = base.BeginInvoke("IsGroupRegistered", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndIsGroupRegistered(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("IsGroupRegistered", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRegisterGroup(string name, int privacy, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = name;
                _args[1] = privacy;
                System.IAsyncResult _result = base.BeginInvoke("RegisterGroup", _args, callback, asyncState);
                return _result;
            }
            
            public int EndRegisterGroup(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("RegisterGroup", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemoveGroup(int groupID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = groupID;
                System.IAsyncResult _result = base.BeginInvoke("RemoveGroup", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRemoveGroup(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("RemoveGroup", _args, result);
            }
            
            public System.IAsyncResult BeginGetGroupID(string name, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = name;
                System.IAsyncResult _result = base.BeginInvoke("GetGroupID", _args, callback, asyncState);
                return _result;
            }
            
            public int EndGetGroupID(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("GetGroupID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetGroupName(int groupID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = groupID;
                System.IAsyncResult _result = base.BeginInvoke("GetGroupName", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetGroupName(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetGroupName", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetGroupDescription(int groupID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = groupID;
                System.IAsyncResult _result = base.BeginInvoke("GetGroupDescription", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetGroupDescription(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetGroupDescription", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetGroupIcon(int groupID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = groupID;
                System.IAsyncResult _result = base.BeginInvoke("GetGroupIcon", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndGetGroupIcon(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("GetGroupIcon", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetGroupPrivacy(int groupID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = groupID;
                System.IAsyncResult _result = base.BeginInvoke("GetGroupPrivacy", _args, callback, asyncState);
                return _result;
            }
            
            public int EndGetGroupPrivacy(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("GetGroupPrivacy", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetGroupRegistrationDate(int groupID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = groupID;
                System.IAsyncResult _result = base.BeginInvoke("GetGroupRegistrationDate", _args, callback, asyncState);
                return _result;
            }
            
            public System.DateTime EndGetGroupRegistrationDate(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.DateTime _result = ((System.DateTime)(base.EndInvoke("GetGroupRegistrationDate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetGroupMembers(int groupID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = groupID;
                System.IAsyncResult _result = base.BeginInvoke("GetGroupMembers", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<int> EndGetGroupMembers(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<int> _result = ((System.Collections.ObjectModel.ObservableCollection<int>)(base.EndInvoke("GetGroupMembers", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetGroupCameras(int groupID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = groupID;
                System.IAsyncResult _result = base.BeginInvoke("GetGroupCameras", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<int> EndGetGroupCameras(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<int> _result = ((System.Collections.ObjectModel.ObservableCollection<int>)(base.EndInvoke("GetGroupCameras", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSetGroupName(int groupID, string name, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = groupID;
                _args[1] = name;
                System.IAsyncResult _result = base.BeginInvoke("SetGroupName", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSetGroupName(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SetGroupName", _args, result);
            }
            
            public System.IAsyncResult BeginSetGroupDescription(int groupID, string description, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = groupID;
                _args[1] = description;
                System.IAsyncResult _result = base.BeginInvoke("SetGroupDescription", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSetGroupDescription(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SetGroupDescription", _args, result);
            }
            
            public System.IAsyncResult BeginSetGroupIcon(int groupID, byte[] icon, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = groupID;
                _args[1] = icon;
                System.IAsyncResult _result = base.BeginInvoke("SetGroupIcon", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSetGroupIcon(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SetGroupIcon", _args, result);
            }
            
            public System.IAsyncResult BeginSetGroupPrivacy(int groupID, int privacy, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = groupID;
                _args[1] = privacy;
                System.IAsyncResult _result = base.BeginInvoke("SetGroupPrivacy", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSetGroupPrivacy(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SetGroupPrivacy", _args, result);
            }
            
            public System.IAsyncResult BeginAddGroupMember(int userID, int groupID, int privileges, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = userID;
                _args[1] = groupID;
                _args[2] = privileges;
                System.IAsyncResult _result = base.BeginInvoke("AddGroupMember", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddGroupMember(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddGroupMember", _args, result);
            }
        }
    }
}
