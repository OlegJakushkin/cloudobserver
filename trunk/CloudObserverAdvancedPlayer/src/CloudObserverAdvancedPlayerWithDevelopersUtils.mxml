<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   creationComplete="application1_creationCompleteHandler(event)" xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="400" minHeight="500" alignmentBaseline="roman">
	<fx:Style source="COAccordation.css"/>
	<s:states>
		<s:State name="default"/>
		<s:State name="One"/>
		<s:State name="Two"/>
	</s:states>
	<s:transitions>
		<s:Transition fromState="*" toState="*">
			<s:Sequence id="t1" targets="{[ACB]}">
				<s:Parallel>
					<mx:Move  duration="400"/>
					<mx:Resize duration="400"/>
					<mx:Blur duration="401" blurXFrom="5.0" blurXTo="0.0"
							 blurYFrom="5.0" blurYTo="0.0"/>
				</s:Parallel>
			</s:Sequence>
		</s:Transition>
	</s:transitions>
	<fx:Script>
		<![CDATA[
			import com.adobe.net.URI;
			import com.adobe.utils.StringUtil;
			
			import flash.events.*;
			import flash.system.*;
			
			import mx.collections.ArrayCollection;
			import mx.containers.*;
			import mx.controls.*;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			import org.httpclient.*;
			import org.httpclient.events.*;
			import org.httpclient.http.*;
			
			private var ns:NetStream;
			private var nc:NetConnection;
			private var video:Video;
			private var st:SoundTransform;
			private var connection:NetConnection;
			private var netstream:NetStream;
			private var client:HttpClient;
			private var timer:Timer;
			
			[Bindable]
			public var verbs:ArrayCollection = new ArrayCollection([ { label:"GET" }, { label:"HEAD" }, { label:"DELETE" }, { label:"PUT" }, { label:"POST" } ]);
			
			[Bindable]
			public var requestSent:String = "";
			
			[Bindable]
			public var status:String = "";
			
			[Bindable]
			public var responseStatus:String;
			
			[Bindable]
			public var responseHeader:String;
			
			[Bindable]
			public var responseBody:String;    
			
			[Bindable]
			public var videoAddr:String = new String();
			
			[Bindable]
			public var nickName:String = new String();
			
			protected function application1_creationCompleteHandler(event:FlexEvent):void
			{
				st = new SoundTransform();
				timer = new Timer(15000);
				nc = new NetConnection();
				nc.connect(null);
				ns = new NetStream(nc);
				ns.client = this;
				video = new Video;
				video.attachNetStream(ns);
				video.smoothing = true;
				video.width = UIC.width;
				video.height = UIC.height;
				UIC.addChild(video);
				UIC.addEventListener(ResizeEvent.RESIZE, UIC_resizeHandler);
				ns.play(null);
				ns.appendBytesAction(NetStreamAppendBytesAction.RESET_BEGIN);
				this.addEventListener(ResizeEvent.RESIZE, application1_resizeHandler);
				
				for (var s:String in FlexGlobals.topLevelApplication.parameters)
				{
					switch (s)
					{
						case "nick":
							var ss:String = FlexGlobals.topLevelApplication.parameters[s]  as String;
							nickName = ss;
							break;
						default:
							break; 
					}
				}
				var url:String = ExternalInterface.call("window.location.host.toString");
				
				if (nickName.length >= 1) {
					nickName = "http://" + url +"/" + nickName  + "?action=read";
					trace(nickName);
					onRequest(nickName, "GET", "{''}", "");
				} else {
					textArea.text += " Произошла ошибка. Обновите страницу";
					textArea.visible = true;
				}
			}
			
			public function onRequest(urlToPlay:String, verb:String, HeaderText:String,BodyText:String):void {
				
				ns.appendBytesAction(NetStreamAppendBytesAction.RESET_BEGIN);
				
				requestSent = "";
				responseBody = "";
				responseStatus = "";
				responseHeader = "";    
				
				var listeners:Object = { 
					onConnect: function(e:HttpRequestEvent):void {
						status = "Connected";
					},
					onRequest: function(e:HttpRequestEvent):void {
						status = "Request sent";
						requestSent = e.header.replace(/\r\n/g, "\n");
						if (e.request.body) requestSent += e.request.body;
					},
					onStatus: function(e:HttpStatusEvent):void {
						status = "Got response header";
						responseStatus = e.code + " " + e.response.message;
						responseHeader = e.header.toString();
					},
					onData: function(e:HttpDataEvent):void {           
						status = "Received " + e.bytes.length + " bytes";
						ns.appendBytes(e.bytes);
						videoResize();
						responseBody += e.readUTFBytes();
					},        
					onClose: function():void {
						status = "Closed";
						tabNavigator.selectedIndex = 1;
					},
					onComplete: function(e:HttpResponseEvent):void {          
						status = "Completed";
					},
					onError: function(event:ErrorEvent):void {
						status = "Error: " + event.text;
					}
				};
				
				status = "Connecting";
				
				var client:HttpClient = new HttpClient();
				client.timeout = 2000;
				client.listener = new HttpListener(listeners);
				
				var request:HttpRequest = null;  
				if (verb == "GET") request = new Get();        
				else if (verb == "HEAD") request = new Head();
				else if (verb == "DELETE") request = new Delete();
				else if (verb == "PUT") request = new Put();
				else if (verb == "POST") request = new Post();
				else throw new ArgumentError("Invalid verb: " + verb);
				
				addCustomHeaders(request, HeaderText);
				if (verb == "PUT" || verb == "POST") addBody(request, BodyText);
				
				client.request(new URI(urlToPlay), request);
			}
			
			public function addCustomHeaders(request:HttpRequest, HeaderText:String):void {
				var headerToAdd:Array = [];
				var headerLines:Array = HeaderText.split(/\r+/);
				for each(var headerLine:String in headerLines) {
					var index:int = headerLine.indexOf(":");
					if (index != -1) {
						var key:String = StringUtil.trim(headerLine.substring(0, index));
						var value:String = StringUtil.trim(headerLine.substr(index + 1));
						request.addHeader(key, value);
					}
				}      
			}
			
			public function addBody(request:HttpRequest, BodyText:String):void {
				var data:ByteArray = new ByteArray();
				data.writeUTFBytes(BodyText);
				data.position = 0;  
				
				request.body = data;
			}
			
			public function onMetaData(p:Object) : void
			{
				trace("onMetaData")
				trace(p);
				videoResize();
				return;
			}
			
			public function onImageData(p:Object) : void
			{			
				trace("onImageData")
				trace(p);
				return;
			}
			
			public function onTextData(p:Object) : void
			{			
				trace("onTextData")
				trace(p);
				return;
			}
			
			public function onXMPData(p:Object) : void
			{			
				trace("onXMPData")
				trace(p);
				return;
			}
			
			public function onCuePoint(p:Object) : void
			{			
				trace("onCuePoint")
				trace(p);
				return;
			}
			
			private function onComplete(e:Event) : void
			{	
				trace("onComplete")
				ns.appendBytesAction(NetStreamAppendBytesAction.RESET_BEGIN);
				return;
			}
			
			protected function textArea_enterHandler(event:FlexEvent):void
			{
				onRequest(textArea.text, "GET", "{''}", "");
			}
			
			protected function UIC_resizeHandler(event:ResizeEvent):void
			{
				
			}
			protected function videoResize():void
			{
				var VW:Number = this.width - 10; 
				var VH:Number = this.height - tabNavigator.height - 40;
				
				var rw:Number = VW/video.videoWidth;
				var rh:Number = VH/video.videoHeight;
				if (rw>=rh){
					video.height = VH;
					video.width= rh*video.videoWidth;
				}
				else
				{
					video.width = VW;
					video.height= rw*video.videoHeight;
				}
				UIC.width = video.width;
				UIC.height = video.height;
			}
			
			protected function button1_clickHandler(event:Event=null):void
			{
				if( this.stage.displayState == StageDisplayState.NORMAL )
				{
					this.stage.displayState = StageDisplayState.FULL_SCREEN;
				}
				else
				{
					this.stage.displayState = StageDisplayState.NORMAL;
				}
			}
			
			protected function sOne():void
			{
				if((currentState == 'Two')||(currentState == 'default'))
				{
					currentState='One';
					
					if(timer.running)
					{
						timer.reset();
					}
					else
					{
						timer.start();
					}
					timer.addEventListener(TimerEvent.TIMER, timer_timer);
					timer.start();
				}
			}
			
			private function timer_timer(evt:TimerEvent):void {
				sTwo();
			}
			
			protected function sTwo():void
			{
				if((currentState == 'One')||(currentState == 'default'))
				{
					currentState='Two';
				}
			}
			
			protected function button2_clickHandler(event:MouseEvent):void
			{
				if(ns.soundTransform.volume !=0 )
				{
					st.volume=0;
					ns.soundTransform=st;
				}
				else
				{
					st.volume=1;
					ns.soundTransform=st;
				}
			}
			
			
			protected function application1_resizeHandler(event:ResizeEvent):void
			{
				videoResize();
				video.smoothing = true;
			}
			
		]]>
	</fx:Script>
	<mx:DividedBox  width="100%" height="100%">
		
		<mx:TabNavigator id="tabNavigator" width="100%" height="70%" creationPolicy="all" mouseOver="sTwo()">
			
			<mx:VBox label="Request">
				
				<mx:HBox width="100%" paddingRight="10" paddingBottom="10">
					<mx:Label text="URI:" width="60" textAlign="right"/>
					<mx:TextInput id="uriInput" width="100%" text="http://127.0.0.1:4773/1.flv"/>
					
					<mx:ComboBox id="verbCombo" dataProvider="{verbs}" />              
					
					<mx:Button label="Go" click="onRequest(uriInput.text, verbCombo.selectedItem.label, requestHeaderArea.text, requestBodyArea.text);"/>
				</mx:HBox>
				
				<mx:HBox width="100%" height="100" paddingRight="10" paddingBottom="10">
					<mx:Label text="Header:" width="60" textAlign="right"/>
					<mx:TextArea id="requestHeaderArea" width="100%" height="100%" text="{'Content-Type: text/plain\nx-amx-foo: Bar'}" />
				</mx:HBox>
				
				<mx:HBox width="100%" paddingRight="10" paddingBottom="10">
					<mx:Label text="Body:" width="60" textAlign="right"/>
					<mx:TextArea id="requestBodyArea" width="100%" height="100" text="This is a test." />
				</mx:HBox>
				
				<mx:HBox width="100%" paddingRight="10" paddingBottom="10">
					<mx:Label text="Status:" width="60" textAlign="right"/>
					<mx:Label width="100%" text="{status}"/>
				</mx:HBox>
				
				<mx:HBox width="100%" height="100" paddingRight="10" paddingBottom="10">
					<mx:Label text="Sent:" width="60" textAlign="right"/>
					<mx:TextArea editable="false" width="100%" height="100%" text="{requestSent}"/>
				</mx:HBox>
				
			</mx:VBox>    
			
			<mx:VBox label="Response">
				
				<mx:HBox width="100%" paddingRight="10" paddingBottom="10">
					<mx:Label text="Status:" width="60" textAlign="right"/>
					<mx:Label width="100%" text="{responseStatus}"/>
				</mx:HBox>
				
				<mx:HBox width="100%" height="100" paddingRight="10" paddingBottom="10">
					<mx:Label text="Header:" width="60" textAlign="right"/>
					<mx:TextArea editable="false" width="100%" height="100%" text="{responseHeader}"/>
				</mx:HBox>
				
				<mx:HBox width="100%" height="100%" paddingRight="10" paddingBottom="10">
					<mx:Label text="Body:" width="60" textAlign="right"/>
					<mx:TextArea editable="false" width="100%" height="100%" text="{responseBody}"/>
				</mx:HBox>          
				
			</mx:VBox>
			
		</mx:TabNavigator>
		<mx:Canvas width="100%" height="100%"  id="LO" focusOut="sTwo()"  mouseOver="sOne()" mouseMove="sOne()"  mouseDown="sOne()"  >	
			<mx:HBox   id="VUIC" width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
				<mx:UIComponent  id="UIC" />
			</mx:HBox>
			<mx:ApplicationControlBar mouseOver="sOne()" mouseMove="sOne()" mouseDown="sOne()"  id="ACB" width="100%" height="39" dock="false" top="0" top.One="0" top.Two="-50" >
				<s:Button label="Fullscreen" click="button1_clickHandler(event)"/>
				<s:Button label="mute" click="button2_clickHandler(event)"/>
			</mx:ApplicationControlBar>
			<s:TextInput id="textArea" visible="false"  enter="textArea_enterHandler(event)" text="Лог операций:" right="10" height="22" left="10" bottom="0"/> 
		</mx:Canvas>
	</mx:DividedBox>
</s:Application>
