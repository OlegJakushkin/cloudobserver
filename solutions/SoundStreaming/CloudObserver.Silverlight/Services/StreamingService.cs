//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:2.0.50727.4927
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by slsvcutil, version 3.0.40624.0
// 


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace = "Silverlight", ConfigurationName = "IStreamingService", CallbackContract = typeof(IStreamingServiceCallback))]
public interface IStreamingService
{

    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, AsyncPattern = true, Action = "Silverlight/IStreamingService/Send")]
    System.IAsyncResult BeginSend(byte[] data, System.AsyncCallback callback, object asyncState);

    void EndSend(System.IAsyncResult result);

    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, AsyncPattern = true, Action = "Silverlight/IStreamingService/SetSubscriptionResponse")]
    System.IAsyncResult BeginSetSubscriptionResponse(byte[] response, System.AsyncCallback callback, object asyncState);

    void EndSetSubscriptionResponse(System.IAsyncResult result);

    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, AsyncPattern = true, Action = "Silverlight/IStreamingService/Subscribe")]
    System.IAsyncResult BeginSubscribe(System.TimeSpan timeout, System.AsyncCallback callback, object asyncState);

    void EndSubscribe(System.IAsyncResult result);

    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, AsyncPattern = true, Action = "Silverlight/IStreamingService/Unsubscribe")]
    System.IAsyncResult BeginUnsubscribe(System.AsyncCallback callback, object asyncState);

    void EndUnsubscribe(System.IAsyncResult result);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface IStreamingServiceCallback
{

    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, Action = "Silverlight/IStreamingService/DataCallback")]
    void DataCallback(byte[] data);

    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, Action = "Silverlight/IStreamingService/SubscriptionResponse")]
    void SubscriptionResponse(byte[] response);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface IStreamingServiceChannel : IStreamingService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class StreamingServiceClient : System.ServiceModel.DuplexClientBase<IStreamingService>, IStreamingService
{

    private BeginOperationDelegate onBeginSendDelegate;

    private EndOperationDelegate onEndSendDelegate;

    private System.Threading.SendOrPostCallback onSendCompletedDelegate;

    private BeginOperationDelegate onBeginSetSubscriptionResponseDelegate;

    private EndOperationDelegate onEndSetSubscriptionResponseDelegate;

    private System.Threading.SendOrPostCallback onSetSubscriptionResponseCompletedDelegate;

    private BeginOperationDelegate onBeginSubscribeDelegate;

    private EndOperationDelegate onEndSubscribeDelegate;

    private System.Threading.SendOrPostCallback onSubscribeCompletedDelegate;

    private BeginOperationDelegate onBeginUnsubscribeDelegate;

    private EndOperationDelegate onEndUnsubscribeDelegate;

    private System.Threading.SendOrPostCallback onUnsubscribeCompletedDelegate;

    private bool useGeneratedCallback;

    private BeginOperationDelegate onBeginOpenDelegate;

    private EndOperationDelegate onEndOpenDelegate;

    private System.Threading.SendOrPostCallback onOpenCompletedDelegate;

    private BeginOperationDelegate onBeginCloseDelegate;

    private EndOperationDelegate onEndCloseDelegate;

    private System.Threading.SendOrPostCallback onCloseCompletedDelegate;

    public StreamingServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
        base(callbackInstance, binding, remoteAddress)
    {
    }

    public StreamingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
        this(new StreamingServiceClientCallback(), binding, remoteAddress)
    {
    }

    private StreamingServiceClient(StreamingServiceClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
        this(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress)
    {
        useGeneratedCallback = true;
        callbackImpl.Initialize(this);
    }

    public System.Net.CookieContainer CookieContainer
    {
        get
        {
            System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
            if ((httpCookieContainerManager != null))
            {
                return httpCookieContainerManager.CookieContainer;
            }
            else
            {
                return null;
            }
        }
        set
        {
            System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
            if ((httpCookieContainerManager != null))
            {
                httpCookieContainerManager.CookieContainer = value;
            }
            else
            {
                throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                        "ookieContainerBindingElement.");
            }
        }
    }

    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SendCompleted;

    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetSubscriptionResponseCompleted;

    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SubscribeCompleted;

    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UnsubscribeCompleted;

    public event System.EventHandler<DataCallbackReceivedEventArgs> DataCallbackReceived;

    public event System.EventHandler<SubscriptionResponseReceivedEventArgs> SubscriptionResponseReceived;

    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;

    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IStreamingService.BeginSend(byte[] data, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginSend(data, callback, asyncState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    void IStreamingService.EndSend(System.IAsyncResult result)
    {
        base.Channel.EndSend(result);
    }

    private System.IAsyncResult OnBeginSend(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        byte[] data = ((byte[])(inValues[0]));
        return ((IStreamingService)(this)).BeginSend(data, callback, asyncState);
    }

    private object[] OnEndSend(System.IAsyncResult result)
    {
        ((IStreamingService)(this)).EndSend(result);
        return null;
    }

    private void OnSendCompleted(object state)
    {
        if ((this.SendCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.SendCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }

    public void SendAsync(byte[] data)
    {
        this.SendAsync(data, null);
    }

    public void SendAsync(byte[] data, object userState)
    {
        if ((this.onBeginSendDelegate == null))
        {
            this.onBeginSendDelegate = new BeginOperationDelegate(this.OnBeginSend);
        }
        if ((this.onEndSendDelegate == null))
        {
            this.onEndSendDelegate = new EndOperationDelegate(this.OnEndSend);
        }
        if ((this.onSendCompletedDelegate == null))
        {
            this.onSendCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendCompleted);
        }
        base.InvokeAsync(this.onBeginSendDelegate, new object[] {
                    data}, this.onEndSendDelegate, this.onSendCompletedDelegate, userState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IStreamingService.BeginSetSubscriptionResponse(byte[] response, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginSetSubscriptionResponse(response, callback, asyncState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    void IStreamingService.EndSetSubscriptionResponse(System.IAsyncResult result)
    {
        base.Channel.EndSetSubscriptionResponse(result);
    }

    private System.IAsyncResult OnBeginSetSubscriptionResponse(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        byte[] response = ((byte[])(inValues[0]));
        return ((IStreamingService)(this)).BeginSetSubscriptionResponse(response, callback, asyncState);
    }

    private object[] OnEndSetSubscriptionResponse(System.IAsyncResult result)
    {
        ((IStreamingService)(this)).EndSetSubscriptionResponse(result);
        return null;
    }

    private void OnSetSubscriptionResponseCompleted(object state)
    {
        if ((this.SetSubscriptionResponseCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.SetSubscriptionResponseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }

    public void SetSubscriptionResponseAsync(byte[] response)
    {
        this.SetSubscriptionResponseAsync(response, null);
    }

    public void SetSubscriptionResponseAsync(byte[] response, object userState)
    {
        if ((this.onBeginSetSubscriptionResponseDelegate == null))
        {
            this.onBeginSetSubscriptionResponseDelegate = new BeginOperationDelegate(this.OnBeginSetSubscriptionResponse);
        }
        if ((this.onEndSetSubscriptionResponseDelegate == null))
        {
            this.onEndSetSubscriptionResponseDelegate = new EndOperationDelegate(this.OnEndSetSubscriptionResponse);
        }
        if ((this.onSetSubscriptionResponseCompletedDelegate == null))
        {
            this.onSetSubscriptionResponseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetSubscriptionResponseCompleted);
        }
        base.InvokeAsync(this.onBeginSetSubscriptionResponseDelegate, new object[] {
                    response}, this.onEndSetSubscriptionResponseDelegate, this.onSetSubscriptionResponseCompletedDelegate, userState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IStreamingService.BeginSubscribe(System.TimeSpan timeout, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginSubscribe(timeout, callback, asyncState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    void IStreamingService.EndSubscribe(System.IAsyncResult result)
    {
        base.Channel.EndSubscribe(result);
    }

    private System.IAsyncResult OnBeginSubscribe(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        System.TimeSpan timeout = ((System.TimeSpan)(inValues[0]));
        return ((IStreamingService)(this)).BeginSubscribe(timeout, callback, asyncState);
    }

    private object[] OnEndSubscribe(System.IAsyncResult result)
    {
        ((IStreamingService)(this)).EndSubscribe(result);
        return null;
    }

    private void OnSubscribeCompleted(object state)
    {
        if ((this.SubscribeCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.SubscribeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }

    public void SubscribeAsync(System.TimeSpan timeout)
    {
        this.SubscribeAsync(timeout, null);
    }

    public void SubscribeAsync(System.TimeSpan timeout, object userState)
    {
        if ((this.onBeginSubscribeDelegate == null))
        {
            this.onBeginSubscribeDelegate = new BeginOperationDelegate(this.OnBeginSubscribe);
        }
        if ((this.onEndSubscribeDelegate == null))
        {
            this.onEndSubscribeDelegate = new EndOperationDelegate(this.OnEndSubscribe);
        }
        if ((this.onSubscribeCompletedDelegate == null))
        {
            this.onSubscribeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSubscribeCompleted);
        }
        base.InvokeAsync(this.onBeginSubscribeDelegate, new object[] {
                    timeout}, this.onEndSubscribeDelegate, this.onSubscribeCompletedDelegate, userState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IStreamingService.BeginUnsubscribe(System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginUnsubscribe(callback, asyncState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    void IStreamingService.EndUnsubscribe(System.IAsyncResult result)
    {
        base.Channel.EndUnsubscribe(result);
    }

    private System.IAsyncResult OnBeginUnsubscribe(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((IStreamingService)(this)).BeginUnsubscribe(callback, asyncState);
    }

    private object[] OnEndUnsubscribe(System.IAsyncResult result)
    {
        ((IStreamingService)(this)).EndUnsubscribe(result);
        return null;
    }

    private void OnUnsubscribeCompleted(object state)
    {
        if ((this.UnsubscribeCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.UnsubscribeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }

    public void UnsubscribeAsync()
    {
        this.UnsubscribeAsync(null);
    }

    public void UnsubscribeAsync(object userState)
    {
        if ((this.onBeginUnsubscribeDelegate == null))
        {
            this.onBeginUnsubscribeDelegate = new BeginOperationDelegate(this.OnBeginUnsubscribe);
        }
        if ((this.onEndUnsubscribeDelegate == null))
        {
            this.onEndUnsubscribeDelegate = new EndOperationDelegate(this.OnEndUnsubscribe);
        }
        if ((this.onUnsubscribeCompletedDelegate == null))
        {
            this.onUnsubscribeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUnsubscribeCompleted);
        }
        base.InvokeAsync(this.onBeginUnsubscribeDelegate, null, this.onEndUnsubscribeDelegate, this.onUnsubscribeCompletedDelegate, userState);
    }

    private void OnDataCallbackReceived(object state)
    {
        if ((this.DataCallbackReceived != null))
        {
            object[] results = ((object[])(state));
            this.DataCallbackReceived(this, new DataCallbackReceivedEventArgs(results, null, false, null));
        }
    }

    private void OnSubscriptionResponseReceived(object state)
    {
        if ((this.SubscriptionResponseReceived != null))
        {
            object[] results = ((object[])(state));
            this.SubscriptionResponseReceived(this, new SubscriptionResponseReceivedEventArgs(results, null, false, null));
        }
    }

    private void VerifyCallbackEvents()
    {
        if (((this.useGeneratedCallback != true)
                    && ((this.DataCallbackReceived != null)
                    || (this.SubscriptionResponseReceived != null))))
        {
            throw new System.InvalidOperationException("Callback events cannot be used when the callback InstanceContext is specified. Pl" +
                    "ease choose between specifying the callback InstanceContext or subscribing to th" +
                    "e callback events.");
        }
    }

    private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        this.VerifyCallbackEvents();
        return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
    }

    private object[] OnEndOpen(System.IAsyncResult result)
    {
        ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
        return null;
    }

    private void OnOpenCompleted(object state)
    {
        if ((this.OpenCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }

    public void OpenAsync()
    {
        this.OpenAsync(null);
    }

    public void OpenAsync(object userState)
    {
        if ((this.onBeginOpenDelegate == null))
        {
            this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
        }
        if ((this.onEndOpenDelegate == null))
        {
            this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
        }
        if ((this.onOpenCompletedDelegate == null))
        {
            this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
        }
        base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
    }

    private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
    }

    private object[] OnEndClose(System.IAsyncResult result)
    {
        ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
        return null;
    }

    private void OnCloseCompleted(object state)
    {
        if ((this.CloseCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }

    public void CloseAsync()
    {
        this.CloseAsync(null);
    }

    public void CloseAsync(object userState)
    {
        if ((this.onBeginCloseDelegate == null))
        {
            this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
        }
        if ((this.onEndCloseDelegate == null))
        {
            this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
        }
        if ((this.onCloseCompletedDelegate == null))
        {
            this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
        }
        base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
    }

    protected override IStreamingService CreateChannel()
    {
        return new StreamingServiceClientChannel(this);
    }

    private class StreamingServiceClientCallback : object, IStreamingServiceCallback
    {

        private StreamingServiceClient proxy;

        public void Initialize(StreamingServiceClient proxy)
        {
            this.proxy = proxy;
        }

        public void DataCallback(byte[] data)
        {
            this.proxy.OnDataCallbackReceived(new object[] {
                        data});
        }

        public void SubscriptionResponse(byte[] response)
        {
            this.proxy.OnSubscriptionResponseReceived(new object[] {
                        response});
        }
    }

    private class StreamingServiceClientChannel : ChannelBase<IStreamingService>, IStreamingService
    {

        public StreamingServiceClientChannel(System.ServiceModel.DuplexClientBase<IStreamingService> client) :
            base(client)
        {
        }

        public System.IAsyncResult BeginSend(byte[] data, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = data;
            System.IAsyncResult _result = base.BeginInvoke("Send", _args, callback, asyncState);
            return _result;
        }

        public void EndSend(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            base.EndInvoke("Send", _args, result);
        }

        public System.IAsyncResult BeginSetSubscriptionResponse(byte[] response, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = response;
            System.IAsyncResult _result = base.BeginInvoke("SetSubscriptionResponse", _args, callback, asyncState);
            return _result;
        }

        public void EndSetSubscriptionResponse(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            base.EndInvoke("SetSubscriptionResponse", _args, result);
        }

        public System.IAsyncResult BeginSubscribe(System.TimeSpan timeout, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = timeout;
            System.IAsyncResult _result = base.BeginInvoke("Subscribe", _args, callback, asyncState);
            return _result;
        }

        public void EndSubscribe(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            base.EndInvoke("Subscribe", _args, result);
        }

        public System.IAsyncResult BeginUnsubscribe(System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[0];
            System.IAsyncResult _result = base.BeginInvoke("Unsubscribe", _args, callback, asyncState);
            return _result;
        }

        public void EndUnsubscribe(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            base.EndInvoke("Unsubscribe", _args, result);
        }
    }
}

public class DataCallbackReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    public DataCallbackReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
        base(exception, cancelled, userState)
    {
        this.results = results;
    }

    public byte[] data
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((byte[])(this.results[0]));
        }
    }
}

public class SubscriptionResponseReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    public SubscriptionResponseReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
        base(exception, cancelled, userState)
    {
        this.results = results;
    }

    public byte[] response
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((byte[])(this.results[0]));
        }
    }
}