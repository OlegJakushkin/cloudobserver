<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   creationComplete="creationCompleteHandler(event)" xmlns:mx="library://ns.adobe.com/flex/mx" alignmentBaseline="roman">
	<s:states>
		<s:State name="default"/>
		<s:State name="One"/>
		<s:State name="Two"/>
	</s:states>
	<s:transitions>
		<s:Transition fromState="*" toState="*">
			<s:Sequence id="t1" targets="{[ACB]}">
				<s:Parallel>
					<mx:Move  duration="400"/>
					<mx:Resize duration="400"/>
					<mx:Blur duration="401" blurXFrom="5.0" blurXTo="0.0"
							 blurYFrom="5.0" blurYTo="0.0"/>
				</s:Parallel>
			</s:Sequence>
		</s:Transition>
	</s:transitions>
	<fx:Script>
		<![CDATA[
			import com.adobe.net.URI;
			import com.adobe.utils.StringUtil;
			
			import flash.events.*;
			import flash.system.*;
			
			import mx.containers.*;
			import mx.controls.*;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			import org.httpclient.*;
			import org.httpclient.events.*;
			import org.httpclient.http.*;
			
			private var ns:NetStream;
			private var nc:NetConnection;
			private var video:Video;
			private var st:SoundTransform;
			private var connection:NetConnection;
			private var netstream:NetStream;
			private var client:HttpClient;
			private var timer:Timer;
			private var uri:String;
			private var videoAddr:String = new String();
			private var nickName:String = new String();
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				st = new SoundTransform();
				timer = new Timer(5000);
				nc = new NetConnection();
				nc.connect(null);
				ns = new NetStream(nc);
				ns.client = this;
				
				video = new Video;
				video.attachNetStream(ns);
				video.smoothing = true;
				video.width = UIC.width;
				video.height = UIC.height;
				
				UIC.addChild(video);
				UIC.addEventListener(ResizeEvent.RESIZE, UIC_resizeHandler);
				
				ns.play(null);
				ns.appendBytesAction(NetStreamAppendBytesAction.RESET_BEGIN);
				
				this.addEventListener(ResizeEvent.RESIZE, resizeHandler);
				
				for (var s:String in FlexGlobals.topLevelApplication.parameters)
				{
					switch (s)
					{
						case "nick":
							var ss:String = FlexGlobals.topLevelApplication.parameters[s]  as String;
							nickName = ss;
							break;
						default:
							break;
					}
				}
				var url:String = ExternalInterface.call("window.location.href.folderOf");
				if (nickName.length >= 1) {
					uri = url + nickName  + "?action=read";
					onRequest(uri, "{''}", "");
				} 
			}
			
			protected function onRequest(urlToPlay:String, HeaderText:String,BodyText:String):void {
				ns.appendBytesAction(NetStreamAppendBytesAction.RESET_BEGIN);	
				var listeners:Object = { 
					onConnect: function(e:HttpRequestEvent):void {},
					onRequest: function(e:HttpRequestEvent):void {},
					onStatus: function(e:HttpStatusEvent):void {},
					onData: function(e:HttpDataEvent):void
					{           
						ns.appendBytes(e.bytes);
						videoResize();
					},        
					onClose: function():void {},
					onComplete: function(e:HttpResponseEvent):void {},
					onError: function(event:ErrorEvent):void {}
				};
				
				var client:HttpClient = new HttpClient();
				client.listener = new HttpListener(listeners);
				
				var request:HttpRequest = null;  
				request = new Get();        
				addCustomHeaders(request, HeaderText);
				client.request(new URI(urlToPlay), request);
			}
			
			protected function addCustomHeaders(request:HttpRequest, HeaderText:String):void {
				var headerToAdd:Array = [];
				var headerLines:Array = HeaderText.split(/\r+/);
				for each(var headerLine:String in headerLines) {
					var index:int = headerLine.indexOf(":");
					if (index != -1) {
						var key:String = StringUtil.trim(headerLine.substring(0, index));
						var value:String = StringUtil.trim(headerLine.substr(index + 1));
						request.addHeader(key, value);
					}
				}      
			}
			
			protected function onMetaData(p:Object) : void
			{
				videoResize();
				return;
			}
			
			protected function onImageData(p:Object) : void{}
			protected function onTextData(p:Object) : void{}
			protected function onXMPData(p:Object) : void{}
			protected function onCuePoint(p:Object) : void{}
			protected function onComplete(e:Event) : void
			{	
				ns.appendBytesAction(NetStreamAppendBytesAction.RESET_BEGIN);
				onRequest(uri, "{''}", "");
				return;
			}
			
			protected function UIC_resizeHandler(event:ResizeEvent):void{}
			
			protected function videoResize():void
			{
				var VW:Number = this.width - 16; 
				var VH:Number = this.height - 16;
				
				var rw:Number = VW/video.videoWidth;
				var rh:Number = VH/video.videoHeight;
				if (rw>=rh){
					video.height = VH;
					video.width= rh*video.videoWidth;
				}
				else
				{
					video.width = VW;
					video.height= rw*video.videoHeight;
				}
				UIC.width = video.width;
				UIC.height = video.height;
			}
			
			protected function button1_clickHandler(event:Event=null):void
			{
				sOne();
				if( this.stage.displayState == StageDisplayState.NORMAL )
				{
					this.stage.displayState = StageDisplayState.FULL_SCREEN;
				}
				else
				{
					this.stage.displayState = StageDisplayState.NORMAL;
				}
			}
			
			protected function sOne():void
			{
				if((currentState == 'Two')||(currentState == 'default'))
				{
					currentState='One';
				}	
				if(timer.running)
				{
					timer.reset();
				}
				else
				{
					timer.start();
				}
				timer.addEventListener(TimerEvent.TIMER, timer_timer);
				timer.start();
				
			}
			
			private function timer_timer(evt:TimerEvent):void {
				sTwo();
			}
			
			protected function sTwo():void
			{
				if((currentState == 'One')||(currentState == 'default'))
				{
					currentState='Two';
				}
			}
			
			protected function button2_clickHandler(event:MouseEvent):void
			{	
				sOne();
				if(ns.soundTransform.volume !=0 )
				{
					st.volume=0;
					ns.soundTransform=st;
				}
				else
				{
					st.volume=1;
					ns.soundTransform=st;
				}
			}
			
			protected function resizeHandler(event:ResizeEvent):void
			{
				videoResize();
				video.smoothing = true;
			}
			
		]]>
	</fx:Script>
	<fx:Style>
		/* CSS file */
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		mx|ApplicationControlBar
		{
			horizontalAlign: center;
			verticalAlign: middle;
			fill-alphas: 0.9, 0.8;
		}
		global
		{
			fontFamily: 						"Arial";
			rollOverColor:						#CCCCCC;
			color:								#333333;
			textRollOverColor:					#CCCCCC;
			textSelectedColor:					#333333;
			focus-color:						#4B6F9E;
			selection-color: 					#D1E5F2;
			font-size: 							11pt;
		}
		mx|Button
		{
			disabledSkin: 						Embed(source="assets/Button_disabledSkin.png",
				scaleGridTop="5",
				scaleGridLeft="5",
				scaleGridRight="59",
				scaleGridBottom="17");
			downSkin: 							Embed(source="assets/Button_downSkin.png",
				scaleGridTop="5",
				scaleGridLeft="5",
				scaleGridRight="59",
				scaleGridBottom="17");
			overSkin: 							Embed(source="assets/Button_overSkin.png",
				scaleGridTop="5",
				scaleGridLeft="5",
				scaleGridRight="59",
				scaleGridBottom="17");
			upSkin: 							Embed(source="assets/Button_upSkin.png",
				scaleGridTop="5",
				scaleGridLeft="5",
				scaleGridRight="59",
				scaleGridBottom="17");
			selectedDisabledSkin: 				Embed(source="assets/Button_selectedDisabledSkin.png",
				scaleGridTop="5",
				scaleGridLeft="5",
				scaleGridRight="59",
				scaleGridBottom="17");
			selectedDownSkin: 					Embed(source="assets/Button_selectedDownSkin.png",
				scaleGridTop="5",
				scaleGridLeft="5",
				scaleGridRight="59",
				scaleGridBottom="17");
			selectedOverSkin: 					Embed(source="assets/Button_selectedUpSkin.png",
				scaleGridTop="5",
				scaleGridLeft="5",
				scaleGridRight="59",
				scaleGridBottom="17");
			selectedUpSkin: 					Embed(source="assets/Button_selectedUpSkin.png",
				scaleGridTop="5",
				scaleGridLeft="5",
				scaleGridRight="59",
				scaleGridBottom="17");
			color: 								#D3E7F3;
			textRollOverColor: 					#FFFFFF;
			textSelectedColor: 					#FFFFFF;
			focus-rounded-corners: "tl, tr, br, bl";
			corner-radius: 4;			
		}
	</fx:Style>
	<mx:Canvas width="100%" height="100%"  id="LO" mouseMove="sOne()"  >	
		<mx:HBox   id="VUIC" width="100%" height="100%" verticalAlign="middle" horizontalAlign="center" backgroundColor="#FFFFFF">
			<mx:UIComponent  id="UIC" />
		</mx:HBox>
		<mx:ApplicationControlBar mouseMove="sOne()" id="ACB" width="100%" height="39" dock="false" top="0"  top.Two="-50" horizontalAlign="center" verticalAlign="middle">
			<mx:Button label="Mute" click="button2_clickHandler(event)"/>
			<mx:Button label="Full Screen" click="button1_clickHandler(event)"/>
		</mx:ApplicationControlBar>
	</mx:Canvas>
</s:Application>
