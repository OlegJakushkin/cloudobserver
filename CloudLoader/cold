#!/bin/bash

# Display usage information.
help()
{
	echo -ne "\
${CYAN}Usage: $(basename $0) [options] command${NORMAL}

${MAGENTA}Commands:${NORMAL}
   ${YELLOW}auto                 ${BLUE}${BOLD}Run maintenance mode in the background${NORMAL}
   ${YELLOW}build                ${BLUE}${BOLD}Build Cloud Client and Cloud Server applications${NORMAL}
   ${YELLOW}check-for-updates    ${BLUE}${BOLD}Check if a new version of this script is available${NORMAL}
   ${YELLOW}devbuild             ${BLUE}${BOLD}Same as '--development build'${NORMAL}
   ${YELLOW}deploy               ${BLUE}${BOLD}Deploy Cloud Client and Cloud Server applications${NORMAL}
   ${YELLOW}help                 ${BLUE}${BOLD}Display this information${NORMAL}
   ${YELLOW}maintain             ${BLUE}${BOLD}Maintain everything up-to-date and running${NORMAL}
   ${YELLOW}restart              ${BLUE}${BOLD}Restart Cloud Server and demonstration robots${NORMAL}
   ${YELLOW}self-install         ${BLUE}${BOLD}Install this script in the system ${RED}[require administer]${NORMAL}
   ${YELLOW}self-uninstall       ${BLUE}${BOLD}Remove this script from the system ${RED}[require administer]${NORMAL}
   ${YELLOW}self-update          ${BLUE}${BOLD}Update this script to the latest available version${NORMAL}
   ${YELLOW}start                ${BLUE}${BOLD}Start Cloud Server and demonstration robots${NORMAL}
   ${YELLOW}status               ${BLUE}${BOLD}Display state of the server, robots and maintenance mode${NORMAL}
   ${YELLOW}stop                 ${BLUE}${BOLD}Stop Cloud Server and demonstration robots${NORMAL}
   ${YELLOW}version              ${BLUE}${BOLD}Display version information${NORMAL}

${MAGENTA}Options:${NORMAL}
  ${YELLOW}--checkout-source     ${BLUE}${BOLD}Checkout latest source from version control system${NORMAL}
  ${YELLOW}--development         ${BLUE}${BOLD}Deploy development environment${NORMAL}
  ${YELLOW}--rebuild-libraries   ${BLUE}${BOLD}Rebuild all libraries and utilities${NORMAL}
  ${YELLOW}--verbose             ${BLUE}${BOLD}Echo all executed commands${NORMAL}
"
	
	if [ "$OS" == "windows" ]; then
		cmd /c pause
	fi
}

setNumberOfStages() # 1 - number of stages
{
	STAGES=$1
	STAGE=0
}

nextStage() # 1 - stage message
{
	if [ "$OS" == "windows" ]; then
		COLS=80
	else
		COLS=$(tput cols)
	fi
	STAGE=$[STAGE+1]
	STAGE_MSG="${YELLOW}[$STAGE/$STAGES] ${NORMAL}${BOLD}$1${NORMAL}"
	let STAGE_COL=$COLS-${#STAGE_MSG}+${#YELLOW}+${#NORMAL}+${#BOLD}+${#NORMAL}
	echo -ne "$STAGE_MSG"
}

stageOK()
{
	RESULT_MSG="${GREEN}[OK]${NORMAL}"
	let STAGE_COL=$STAGE_COL+${#GREEN}+${#NORMAL}-${#RESULT_MSG}
	printf "%${STAGE_COL}s"
	echo -ne "$RESULT_MSG"
}

stageFailed()
{
	RESULT_MSG="${RED}[FAILED]${NORMAL}"
	let STAGE_COL=$STAGE_COL+${#RED}+${#NORMAL}-${#RESULT_MSG}
	printf "%${STAGE_COL}s"
	echo -ne "$RESULT_MSG"
}

usage()
{
	echo -e "${CYAN}Type '$(basename $0) help' to display usage information.${NORMAL}"
	if [ "$OS" == "windows" ]; then
		cmd /c pause
	fi
	exit 1
}

# Perform a check that there is no command already encountered.
checkForACommand()
{
	if [ "$COMMAND" != "" ]; then
		echo -e "${RED}Several commands specified!${NORMAL}"
		usage
	fi
}

# Query the number of the latest available revision of this script.
queryLatestRevision()
{
	export LC_MESSAGES=C
	LOADER_URL=http://$LOADER_SRCSITE$LOADER_SRCPATH/$LOADER_SRCFILE
	if [ "$OS" == "windows" ]; then
		LATEST_REVISION=$("$SUBVERSION_INSTALL"/bin/svn info $LOADER_URL | grep '^Last Changed Rev:')
	else
		LATEST_REVISION=$(svn info $LOADER_URL | grep '^Last Changed Rev:')
	fi
	LATEST_REVISION=${LATEST_REVISION#'Last Changed Rev: '}
	export -n LC_MESSAGES
}

auto()
{
	if [ "$OS" == "windows" ]; then
		maintain
	else
		nohup ./$(basename "$0") maintain >& /dev/null &
	fi
}

# Perform a check for a new version of this script.
checkForUpdates()
{
	echo -e "${CYAN}Checking for updates...${NORMAL}"
	echo -ne "${YELLOW}Current version: ${BLUE}${BOLD}$LOADER_VERSION"
	if $REVISION_DEFINED; then
		echo -n "-$REVISION"
	else
		echo -n " [unknown revision]"
	fi
	echo -e "${NORMAL}"
	
	queryLatestRevision
	
	echo -e "${YELLOW}Latest version: ${BLUE}${BOLD}$LOADER_VERSION-$LATEST_REVISION${NORMAL}"
	
	if [ $LATEST_REVISION -gt $REVISION ]; then
		echo -e "${RED}New version of this script is available.${NORMAL}"
		echo -e "${CYAN}Type '$(basename $0) self-update' to update it.${NORMAL}"
		exit 1
	else
		echo -e "${GREEN}You are using the most recent version of this script.${NORMAL}"
		exit 0
	fi
}

deploy()
{
	echo -e "${CYAN}Deploying...${NORMAL}"

	if [ ! -d $DEPLOY ]; then
		mkdir $DEPLOY
	fi
	
	if [ ! -d "$CLOUD_INSTALL" ]; then
		echo -e "${RED}Applications were not built!${NORMAL}"
		echo -e "${CYAN}Type '$(basename $0) build' to build them.${NORMAL}"
		exit 1
	fi
	
	cp -r "$CLOUD_INSTALL"/* $DEPLOY
	if [ $? -ne 0 ]; then
		echo -e "${RED}Deploy failed.${NORMAL}"
		exit 1
	fi
	echo -e "${GREEN}Deploy succeeded.${NORMAL}"
	exit 0
}

maintain()
{
	if [ "$OS" == "windows" ]; then
		cmd /c 'title Cloud Observer Maintenance Mode'
	fi
	echo -e "${CYAN}Entering the maintenance mode...${NORMAL}"
	
	if [ ! -d "$SUBVERSION_INSTALL" -a "$OS" == "windows" ]; then
		prepare $SUBVERSION_BINFILE "$SUBVERSION_INSTALL" $SUBVERSION_BINBASE $SUBVERSION_BINSITE $SUBVERSION_BINPATH
	fi
	
	LOCAL_REV=0
	LOADER=$(basename "$0")
	REMOTE_REPO="http://cloudobserver.googlecode.com/svn/"
	
	export LC_MESSAGES=C
	
	./$LOADER stop
	
	if [ -d "$CLOUD_INSTALL" ]; then
		./$LOADER deploy
		
		LOCAL_REV=$(cat $DEPLOY/htdocs/js/cf.js | grep 'Revision' | tr -cd '[[:digit:]]')
		if [[ "$LOCAL_REV" -ne "" ]]; then
			echo -e "${YELLOW}Current revision: ${BLUE}${BOLD}$LOCAL_REV${NORMAL}"
		fi
		
		./$LOADER start
	fi
	
	while true; do
		echo -e "${CYAN}Checking for new revision...${NORMAL}"
		if [ "$OS" == "windows" ]; then
			REMOTE_REV=$("$SUBVERSION_INSTALL"/bin/svn info $REMOTE_REPO | grep '^Revision:' | awk '{ print $2 }')
		else
			REMOTE_REV=$(svn info $REMOTE_REPO | grep '^Revision:' | awk '{ print $2 }')
		fi
		if [[ $REMOTE_REV -ne $LOCAL_REV ]]; then
			echo -e "${RED}Latest revision: ${BLUE}${BOLD}$REMOTE_REV${NORMAL}"
			./$LOADER "check-for-updates"
			if [ $? -eq 1 ]; then
				selfUpdate true "--rebuild-libraries maintain"
			fi
			
			if $REBUILD_LIBRARIES; then
				./$LOADER --checkout-source --rebuild-libraries build
				REBUILD_LIBRARIES=false
			else
				./$LOADER --checkout-source build
			fi
			
			./$LOADER stop
			./$LOADER deploy
			./$LOADER start
			
			LOCAL_REV=$REMOTE_REV
			echo -e "${YELLOW}Current revision: ${BLUE}${BOLD}$LOCAL_REV${NORMAL}"
		else
			echo -e "${CYAN}No new revisions found.${NORMAL}"
		fi
		sleep 250
	done
	
	echo -e "${CYAN}Leaving the maintenance mode...${NORMAL}"
}

restart()
{
	LOADER=$(basename "$0")
	./$LOADER stop
	./$LOADER start
}

selfInstall()
{
	if [ "$OS" == "windows" ]; then
		cat > $WINDIR/cold.bat << EOF
@echo off
cmd /c "$(cmd /c 'echo %CD%')\\cold.bat %*"
EOF
	else
		ln -s "$WD"/$LOADER_SRCFILE /bin/$LOADER_SRCFILE
	fi
}

selfUninstall()
{
	if [ "$OS" == "windows" ]; then
		rm $WINDIR/cold.bat
	else
		rm /bin/$LOADER_SRCFILE
	fi
}

# Update the script to the latest available version.
selfUpdate() # 1 - restart after the update, 2 - arguments to be passed on restart
{
	echo -e "${CYAN}Checking for updates...${NORMAL}"
	echo -ne "${YELLOW}Current version: ${BLUE}${BOLD}$LOADER_VERSION"
	if $REVISION_DEFINED; then
		echo -n "-$REVISION"
	else
		echo -n " [unknown revision]"
	fi
	echo -e "${NORMAL}"
	
	queryLatestRevision
	
	echo -e "${YELLOW}Latest version: ${BLUE}${BOLD}$LOADER_VERSION-$LATEST_REVISION${NORMAL}"
	if [ $LATEST_REVISION -eq $REVISION ]; then
		echo -e "${GREEN}You already use the most recent version of this script.${NORMAL}"
		exit 0
	fi
	echo -e "${CYAN}Updating the script...${NORMAL}"
	
	SELF=$(basename "$0")
	UPDATER=cold-updater.sh
	
	setNumberOfStages 7
	nextStage "Downloading the latest version"
	if [ "$OS" == "windows" ]; then
		"$SUBVERSION_INSTALL"/bin/svn export $LOADER_URL $SELF.new >& /dev/null
	else
		svn export $LOADER_URL $SELF.new >& /dev/null
	fi
	if [ $? -ne 0 ]; then
		stageFailed
		echo -e "${RED}Update failed.${NORMAL}"
		exit 1
	fi
	stageOK
	
	nextStage "Reading file modes"
	OCTAL_MODE=$($STAT_PERMISSIONS $SELF)
	if [ $? -ne 0 ]; then
		stageFailed
		echo -e "${RED}Update failed.${NORMAL}"
		exit 1
	fi
	stageOK
	
	nextStage "Copying file modes"
	chmod $OCTAL_MODE $SELF.new
	if [ $? -ne 0 ]; then
		stageFailed
		echo -e "${RED}Update failed.${NORMAL}"
		exit 1
	fi
	stageOK
	
	nextStage "Generating update script"
	cat > $UPDATER << EOF
#!/bin/bash

nextStage() # 1 - stage message
{
	if [ "$OS" == "windows" ]; then
		COLS=80
	else
		COLS=\$(tput cols)
	fi
	STAGE=\$[STAGE+1]
	STAGE_MSG="\${YELLOW}[\$STAGE/\$STAGES] \${BLUE}\${BOLD}\$1...\${NORMAL}"
	let STAGE_COL=\$COLS-\${#STAGE_MSG}+\${#YELLOW}+\${#BLUE}+\${#BOLD}+\${#NORMAL}
	echo -ne "\$STAGE_MSG"
}

stageOK()
{
	RESULT_MSG="\${GREEN}[OK]\${NORMAL}"
	let STAGE_COL=\$STAGE_COL+\${#GREEN}+\${#NORMAL}-${#RESULT_MSG}
	printf "%\${STAGE_COL}s"
	echo -ne "\$RESULT_MSG"
}

stageFailed()
{
	RESULT_MSG="\${RED}[FAILED]\${NORMAL}"
	let STAGE_COL=\$STAGE_COL+\${#RED}+\${#NORMAL}-${#RESULT_MSG}
	printf "%\${STAGE_COL}s"
	echo -ne "\$RESULT_MSG"
}

stageOK

nextStage "Replacing old version with the new one"
mv $SELF.new $SELF
if [ $? -ne 0 ]; then
	stageFailed
	echo -e "${RED}Update failed.${NORMAL}"
	exit 1
fi
stageOK

nextStage "Deleting update script"
rm \$0
if [ $? -ne 0 ]; then
	stageFailed
	echo -e "${RED}Update failed.${NORMAL}"
	exit 1
fi
stageOK

echo -e "${GREEN}Update succeeded.${NORMAL}"

if $1; then
	echo -e "${CYAN}Running the updated version...${NORMAL}"
	exec /bin/bash $SELF $2
fi

exit 0
EOF
	if [ $? -ne 0 ]; then
		stageFailed
		echo -e "${RED}Update failed.${NORMAL}"
		exit 1
	fi
	stageOK
	
	nextStage "Running update script"
	export STAGE STAGE_COL STAGES
	exec /bin/bash $UPDATER
}

start()
{
	if [ ! -d $DEPLOY ]; then
		echo -e "${RED}Applications were not deployed!${NORMAL}"
		echo -e "${CYAN}Type '$(basename $0) deploy' to deploy them.${NORMAL}"
		exit 1
	fi
	cd $DEPLOY
	
	setNumberOfStages 3
	
	echo -e "${CYAN}Starting the server...${NORMAL}"
	
	nextStage "Starting Cloud Server"
	if [ "$OS" == "windows" ]; then
		cmd /c 'start /min "Cloud Server" CloudServer.exe'
	else
		nohup ./CloudServer >& /dev/null &
	fi
	if [ $? -ne 0 ]; then
		stageFailed
		exit 1
	fi
	sleep 5
	stageOK
	
	echo -e "${CYAN}Starting demonstration robots...${NORMAL}"
	
	nextStage "Starting RobotAlpha"
	if [ "$OS" == "windows" ]; then
		cmd /c 'start /min "Cloud Client - RobotAlpha" CloudClient.exe --server=localhost:4773 --robot --username=RobotAlpha'
	else
		nohup ./CloudClient --server=localhost:4773 --robot --username=RobotAlpha >& /dev/null &
	fi
	if [ $? -ne 0 ]; then
		stageFailed
		exit 1
	fi
	stageOK
	
	nextStage "Starting RobotBeta"
	if [ "$OS" == "windows" ]; then
		cmd /c 'start /min "Cloud Client - RobotBeta" CloudClient.exe --server=localhost:4773 --robot --username=RobotBeta'
	else
		nohup ./CloudClient --server=localhost:4773 --robot --username=RobotBeta >& /dev/null &
	fi
	if [ $? -ne 0 ]; then
		stageFailed
		exit 1
	fi
	stageOK
}

status()
{
	if [ "$OS" == "windows" ]; then
		cmd /c 'title Cloud Observer Status'
		
		CLOUD_PID=$(tasklist //FI "WINDOWTITLE eq Cloud Server" //NH | awk '{ print $2 }' 2>/dev/null)
		ROBOTALPHA_PID=$(tasklist //FI "WINDOWTITLE eq Cloud Client - RobotAlpha" //NH | awk '{ print $2 }' 2>/dev/null)
		ROBOTBETA_PID=$(tasklist //FI "WINDOWTITLE eq Cloud Client - RobotBeta" //NH | awk '{ print $2 }' 2>/dev/null)
		COLD_PID=$(tasklist //FI "WINDOWTITLE eq Cloud Observer Maintenance Mode*" //NH | awk '{ print $2 }' 2>/dev/null)
	else
		CLOUD_PID=$(ps -fe | grep -F 'CloudServer' | grep -v -F 'grep' | awk '{ print $2 }')
		ROBOTALPHA_PID=$(ps -fe | grep -F 'RobotAlpha' | grep -v -F 'grep' | awk '{ print $2 }')
		ROBOTBETA_PID=$(ps -fe | grep -F 'RobotBeta' | grep -v -F 'grep' | awk '{ print $2 }')
		COLD_PID=$(ps -fe | grep -F 'cold' | grep -v -F 'grep' | grep -v -F 'status')
	fi
	
	if [ "$CLOUD_PID" -eq "$CLOUD_PID" ] 2>/dev/null; then
		echo -e "${CYAN}Cloud Server is up and running:${GREEN}"
		if [ "$OS" == "windows" ]; then
			tasklist //FI "WINDOWTITLE eq Cloud Server"
		else
			ps -fe | grep -F 'CloudServer' | grep -v -F 'grep'
		fi
	else
		echo -e "${CYAN}Cloud Server is ${RED}not running${CYAN}."
	fi
	echo -e "${NORMAL}"
	
	if [ "$ROBOTALPHA_PID" -eq "$ROBOTALPHA_PID" ] 2>/dev/null; then
		echo -e "${CYAN}First demonstration robot (RobotAlpha) is running:${GREEN}"
		if [ "$OS" == "windows" ]; then
			tasklist //FI "WINDOWTITLE eq Cloud Client - RobotAlpha"
		else
			ps -fe | grep -F 'RobotAlpha' | grep -v -F 'grep'
		fi
	else
		echo -e "${CYAN}First demonstration robot (RobotAlpha) is ${RED}not running${CYAN}."
	fi
	echo -ne "${NORMAL}"
	
	if [ "$ROBOTBETA_PID" -eq "$ROBOTBETA_PID" ] 2>/dev/null; then
		echo -e "${CYAN}Second demonstration robot (RobotBeta) is running:${GREEN}"
		if [ "$OS" == "windows" ]; then
			tasklist //FI "WINDOWTITLE eq Cloud Client - RobotBeta"
		else
			ps -fe | grep -F 'RobotBeta' | grep -v -F 'grep'
		fi
	else
		echo -e "${CYAN}Second demonstration robot (RobotBeta) is ${RED}not running${CYAN}."
	fi
	echo -e "${NORMAL}"
	
	if [ "$COLD_PID" -eq "$COLD_PID" ] 2>/dev/null; then
		echo -e "${CYAN}Maintenance mode is enabled:${GREEN}"
		if [ "$OS" == "windows" ]; then
			tasklist //FI "WINDOWTITLE eq Cloud Observer Maintenance Mode*"
		else
			ps -fe | grep -F 'cold' | grep -v -F 'grep' | grep -v -F 'status'
		fi
	else
		echo -e "${CYAN}Maintenance mode is ${RED}disabled${CYAN}.${NORMAL}"
	fi
	echo -ne "${NORMAL}"
	
	if [ "$OS" == "windows" ]; then
		cmd /c pause
	fi
}

stop()
{
	if [ "$OS" == "windows" ]; then
		CLOUD_PID=$(tasklist //FI "WINDOWTITLE eq Cloud Server" //NH 2>/dev/null | awk '{ print $2 }')
		ROBOTALPHA_PID=$(tasklist //FI "WINDOWTITLE eq Cloud Client - RobotAlpha" //NH 2>/dev/null | awk '{ print $2 }')
		ROBOTBETA_PID=$(tasklist //FI "WINDOWTITLE eq Cloud Client - RobotBeta" //NH 2>/dev/null | awk '{ print $2 }')
	else
		CLOUD_PID=$(ps -fe | grep -F 'CloudServer' | grep -v -F 'grep' | awk '{ print $2 }')
		ROBOTALPHA_PID=$(ps -fe | grep -F 'RobotAlpha' | grep -v -F 'grep' | awk '{ print $2 }')
		ROBOTBETA_PID=$(ps -fe | grep -F 'RobotBeta' | grep -v -F 'grep' | awk '{ print $2 }')
	fi
	
	COUNTER=0
	if [ "$CLOUD_PID" -eq "$CLOUD_PID" ] 2>/dev/null; then COUNTER=$[COUNTER+1]; fi
	if [ "$ROBOTALPHA_PID" -eq "$ROBOTALPHA_PID" ] 2>/dev/null; then COUNTER=$[COUNTER+1]; fi
	if [ "$ROBOTBETA_PID" -eq "$ROBOTBETA_PID" ] 2>/dev/null; then COUNTER=$[COUNTER+1]; fi
	setNumberOfStages $COUNTER
	
	if [ "$ROBOTALPHA_PID" -eq "$ROBOTALPHA_PID" ] 2>/dev/null || [ "$ROBOTBETA_PID" -eq "$ROBOTBETA_PID" ] 2>/dev/null; then
		echo -e "${CYAN}Stopping demonstration robots...${NORMAL}"
	fi
	
	if [ "$ROBOTALPHA_PID" -eq "$ROBOTALPHA_PID" ] 2>/dev/null; then
		nextStage "Stopping RobotAlpha"
		if [ "$OS" == "windows" ]; then
			taskkill //F //PID $ROBOTALPHA_PID >& /dev/null
		else
			kill $ROBOTALPHA_PID
		fi
		stageOK
	fi
	
	if [ "$ROBOTBETA_PID" -eq "$ROBOTBETA_PID" ] 2>/dev/null; then
		nextStage "Stopping RobotBeta"
		if [ "$OS" == "windows" ]; then
			taskkill //F //PID $ROBOTBETA_PID >& /dev/null
		else
			kill $ROBOTBETA_PID
		fi
		stageOK
	fi
	
	if [ "$CLOUD_PID" -eq "$CLOUD_PID" ] 2>/dev/null; then
		echo -e "${CYAN}Stopping the server...${NORMAL}"
	
		nextStage "Stopping Cloud Server"
		if [ "$OS" == "windows" ]; then
			taskkill //F //PID $CLOUD_PID >& /dev/null
		else
			kill $CLOUD_PID
		fi
		stageOK
	fi
}

version()
{
	echo -ne "${CYAN}Cloud Loader $LOADER_VERSION"
	if $REVISION_DEFINED; then
		echo -n "-$REVISION"
	else
		echo -n " [unknown revision]"
	fi
	echo -e "${NORMAL}"
	echo -e "${CYAN}Copyright (C) 2012 Cloud Forever. All rights reserved.${NORMAL}"
}

# Print the command and run it. Exit the script on failure.
run()
{
	if $VERBOSE; then
		echo "$@"
		"$@" >> "$WD"/cold.log 2>&1
	else
		"$@" >> "$WD"/cold.log 2>&1
	fi
	result=$?
	if [ $result -ne 0 ]; then
		exit $result
	fi
}

# Prepare the library or utility by extracting its source to compile directory.
# Download the source archive if necessary.
prepare() # 1=SRCFILE 2=COMPILE 3=SRCBASE 4=SRCSITE 5=SRCPATH
{
	if [ ! -d $DOWNLOADS ]; then
		run mkdir -p $DOWNLOADS
	fi
	
	if [ ! -e $DOWNLOADS/$1 ]; then
		if [ "$OS" == "macosx" ]; then
			run curl -L http://$4$5/$1 -o $DOWNLOADS/$1
		else
			run wget http://$4$5/$1 -O $DOWNLOADS/$1
		fi
	fi
	
	case ${1##*.} in
		bz2 )
			if [ "$OS" == "windows" ]; then
				run bsdtar -xjf $DOWNLOADS/$1
			else
				run tar -xjf $DOWNLOADS/$1
			fi
			;;
		gz  )
			run tar -xzf $DOWNLOADS/$1
			;;
		zip )
			run unzip -q $DOWNLOADS/$1
			;;
		*   )
			echo "Error: unknown archive type."
			exit 1
			;;
	esac
	
	run rm -rf $2
	run mv $3 $2
}

build()
{
	# Force using GCC on non-windows systems.
	if [ "$OS" != "windows" ]; then
		export CC=$(which gcc)
		export CXX=$(which g++)
	fi
	
	# Detect the number of stages.
	COUNTER=2
	if $REBUILD_LIBRARIES; then
		COUNTER=$[COUNTER+8]
		if [ "$OS" == "windows" ]; then COUNTER=$[COUNTER+2]; fi
	else
		if [ ! -d "$CMAKE_INSTALL" ]; then COUNTER=$[COUNTER+1]; fi
		if [ ! -d "$NASM_INSTALL" -a "$OS" == "windows" ]; then COUNTER=$[COUNTER+1]; fi
		if [ ! -d "$PREMAKE_INSTALL" ]; then COUNTER=$[COUNTER+1]; fi
		if [ ! -d "$SUBVERSION_INSTALL" -a "$OS" == "windows" ]; then COUNTER=$[COUNTER+1]; fi
		if [ ! -d "$YASM_INSTALL" ]; then COUNTER=$[COUNTER+1]; fi
		if [ ! -d "$BOOST_INSTALL" ]; then COUNTER=$[COUNTER+1]; fi
		if [ ! -d "$FFMPEG_INSTALL" ]; then COUNTER=$[COUNTER+1]; fi
		if [ ! -d "$OPENAL_INSTALL" ]; then COUNTER=$[COUNTER+1]; fi
		if [ ! -d "$OPENCV_INSTALL" ]; then COUNTER=$[COUNTER+1]; fi
		if [ ! -d "$OPENSSL_INSTALL" ]; then COUNTER=$[COUNTER+1]; fi
	fi
	setNumberOfStages $COUNTER
	
	# Delete existing libraries and utilities if they should be rebuilt.
	if $REBUILD_LIBRARIES; then
		run rm -rf "$CMAKE_INSTALL"
		if [ "$OS" == "windows" ]; then run rm -rf "$NASM_INSTALL"; fi
		run rm -rf "$PREMAKE_INSTALL"
		if [ "$OS" == "windows" ]; then run rm -rf "$SUBVERSION_INSTALL"; fi
		run rm -rf "$YASM_INSTALL"
		run rm -rf "$BOOST_INSTALL"
		run rm -rf "$FFMPEG_INSTALL"
		run rm -rf "$OPENAL_INSTALL"
		run rm -rf "$OPENCV_INSTALL"
		run rm -rf "$OPENSSL_INSTALL"
	fi

	# Delete existing application sources if they should be checked out.
	if $CHECKOUT_SOURCE; then
		run rm -rf "$CLOUDCLIENT_COMPILE"
		run rm -rf "$CLOUD_COMPILE"
	fi

	echo -e "${CYAN}Please wait until all components are ready.${NORMAL}"
	# Build CMake utility if necessary.
	if [ ! -d "$CMAKE_INSTALL" ]; then
		nextStage "CMake utility"
		prepare $CMAKE_SRCFILE "$CMAKE_COMPILE" $CMAKE_SRCBASE $CMAKE_SRCSITE $CMAKE_SRCPATH
		run cd "$CMAKE_COMPILE"
		if [ "$OS" == "windows" ]; then
			run ./bootstrap --parallel=$JOBS --prefix=../cmake
			# Building CMake in several concurrent jobs on Windows
			# sometimes results in a deadlock.
			run make install
		else
			run ./bootstrap --parallel=$JOBS --prefix="$CMAKE_INSTALL"
			run make -j$JOBS install
		fi
		run cd $WD
		run rm -rf "$CMAKE_COMPILE"
		stageOK
	fi

	# Build NASM utility if necessary.
	if [ ! -d "$NASM_INSTALL" -a "$OS" == "windows" ]; then
		nextStage "NASM utility"
		prepare $NASM_SRCFILE "$NASM_COMPILE" $NASM_SRCBASE $NASM_SRCSITE $NASM_SRCPATH
		run cd "$NASM_COMPILE"
		run ./configure --prefix="$NASM_INSTALL"
		run make -j$JOBS install
		run cd $WD
		run rm -rf "$NASM_COMPILE"
		stageOK
	fi

	# Build Premake utility if necessary.
	if [ ! -d "$PREMAKE_INSTALL" ]; then
		nextStage "Premake utility"
		prepare $PREMAKE_SRCFILE "$PREMAKE_COMPILE" $PREMAKE_SRCBASE $PREMAKE_SRCSITE $PREMAKE_SRCPATH
		if [ "$OS" == "windows" ]; then
			run cd "$PREMAKE_COMPILE"/build/gmake.windows
		else
			run cd "$PREMAKE_COMPILE"/build/gmake.unix
		fi
		run make -j$JOBS config=release
		run cd ../..
		run mkdir -p "$PREMAKE_INSTALL"/bin
		run cp bin/release/premake4 "$PREMAKE_INSTALL"/bin
		run cd $WD
		run rm -rf "$PREMAKE_COMPILE"
		stageOK
	fi

	# Download Subversion utility if necessary.
	if [ ! -d "$SUBVERSION_INSTALL" -a "$OS" == "windows" ]; then
		nextStage "Subversion utility"
		prepare $SUBVERSION_BINFILE "$SUBVERSION_INSTALL" $SUBVERSION_BINBASE $SUBVERSION_BINSITE $SUBVERSION_BINPATH
		stageOK
	fi

	# Build YASM utility if necessary.
	if [ ! -d "$YASM_INSTALL" ]; then
		nextStage "YASM utility"
		prepare $YASM_SRCFILE "$YASM_COMPILE" $YASM_SRCBASE $YASM_SRCSITE $YASM_SRCPATH
		run cd "$YASM_COMPILE"
		run ./configure --prefix="$YASM_INSTALL"
		run make -j$JOBS install
		run cd $WD
		run rm -rf "$YASM_COMPILE"
		stageOK
	fi

	# Build Boost libraries if necessary.
	if [ ! -d "$BOOST_INSTALL" ]; then
		nextStage "Boost libraries"
		prepare $BOOST_SRCFILE "$BOOST_COMPILE" $BOOST_SRCBASE $BOOST_SRCSITE $BOOST_SRCPATH
		prepare $ZLIB_SRCFILE "$BOOST_ZLIBSRC" $ZLIB_SRCBASE $ZLIB_SRCSITE $ZLIB_SRCPATH
		run cd "$BOOST_COMPILE"
		if [ "$OS" == "windows" ]; then
			run cmd /c bootstrap.bat
			if $DEVELOPMENT; then
				run ./b2 -j$JOBS -d0 --with-chrono --with-thread --with-system --with-filesystem --with-serialization --with-program_options --with-regex --with-date_time --with-iostreams -sZLIB_SOURCE="$BOOST_ZLIBSRC" -sNO_BZIP2=1 link=static runtime-link=static --prefix="$BOOST_INSTALL" debug release install
			else
				run ./b2 -j$JOBS -d0 --with-chrono --with-thread --with-system --with-filesystem --with-serialization --with-program_options --with-regex --with-date_time --with-iostreams -sZLIB_SOURCE="$BOOST_ZLIBSRC" -sNO_BZIP2=1 link=static runtime-link=static --prefix="$BOOST_INSTALL" release install
			fi
		else
			run ./bootstrap.sh
			run ./b2 -j$JOBS -d0 --with-chrono --with-thread --with-system --with-filesystem --with-serialization --with-program_options --with-regex --with-date_time --with-iostreams -sZLIB_SOURCE="$BOOST_ZLIBSRC" -sNO_BZIP2=1 cflags=-fPIC cxxflags=-fPIC link=static --prefix="$BOOST_INSTALL" release install
		fi
		run cd $WD
		run rm -rf "$BOOST_COMPILE"
		stageOK
	fi

	# Build FFmpeg libraries if necessary.
	if [ ! -d "$FFMPEG_INSTALL" ]; then
		nextStage "FFmpeg libraries"
		prepare $FFMPEG_SRCFILE "$FFMPEG_COMPILE" $FFMPEG_SRCBASE $FFMPEG_SRCSITE $FFMPEG_SRCPATH
		run cd "$FFMPEG_COMPILE"
		export PATH=$PATH:"$YASM_INSTALL"/bin
		if [ "$OS" == "windows" ]; then
			run ./configure --enable-static --disable-shared --enable-memalign-hack --enable-w32threads --disable-bzlib --disable-pthreads --prefix="$FFMPEG_INSTALL"
		else
			run ./configure --enable-static --disable-shared --disable-bzlib --prefix="$FFMPEG_INSTALL"
		fi
		run make -j$JOBS install
		if [ "$OS" == "windows" ]; then
			run cd "$FFMPEG_INSTALL/lib"
			run cp "$WD/mingw/lib/gcc/mingw32/$(gcc -v 2>&1 | tail -1 | awk '{print $3}')/libgcc.a" ./
			run cp "$WD/mingw/lib/libmingwex.a" ./
			for f in *.a; do mv "$f" "`basename "$f" .a`.lib"; done;
			run lib //nologo -remove:sqrtf.o libmingwex.lib
		fi
		run cd $WD
		run rm -rf "$FFMPEG_COMPILE"
		stageOK
	fi

	# Build OpenAL libraries if necessary.
	if [ ! -d "$OPENAL_INSTALL" ]; then
		nextStage "OpenAL libraries"
		prepare $OPENAL_SRCFILE "$OPENAL_COMPILE" $OPENAL_SRCBASE $OPENAL_SRCSITE $OPENAL_SRCPATH
		run cd "$OPENAL_COMPILE"
		if [ "$OS" == "windows" ]; then
			run patch -p1 << "EOF"
diff -cr original/Alc/ALc.c modified/Alc/ALc.c
*** original/Alc/ALc.c	Wed Feb  9 19:52:20 2011
--- modified/Alc/ALc.c	Sat Aug  6 15:28:10 2011
***************
*** 337,342 ****
--- 337,344 ----
  ///////////////////////////////////////////////////////
  // Global Variables
  
+ static ALCuint g_ulInitCount = 0;
+ 
  static ALCdevice *g_pDeviceList = NULL;
  static ALCuint    g_ulDeviceCount = 0;
  
***************
*** 2334,2337 ****
--- 2336,2355 ----
      }
  }
  
+ ALC_API void ALC_APIENTRY alcInit(void)
+ {
+ 	if (g_ulInitCount == 0)
+ 		DllMain(NULL, DLL_PROCESS_ATTACH, NULL);
+ 
+ 	g_ulInitCount++;
+ }
+ 
+ ALC_API void ALC_APIENTRY alcRelease(void)
+ {
+ 	g_ulInitCount--;
+ 
+ 	if (g_ulInitCount == 0)
+ 		DllMain(NULL, DLL_PROCESS_DETACH, NULL);
+ }
+ 
  ///////////////////////////////////////////////////////
diff -cr original/include/AL/alc.h modified/include/AL/alc.h
*** original/include/AL/alc.h	Sun Nov 28 22:51:16 2010
--- modified/include/AL/alc.h	Sat Aug  6 15:37:47 2011
***************
*** 177,182 ****
--- 177,190 ----
  
  
  /*
+  * Initialization and deinitialization
+  */
+ ALC_API void            ALC_APIENTRY alcInit( void );
+ 
+ ALC_API void            ALC_APIENTRY alcRelease( void );
+ 
+ 
+ /*
   * Context Management
   */
  ALC_API ALCcontext *    ALC_APIENTRY alcCreateContext( ALCdevice *device, const ALCint* attrlist );
diff -cr original/utils/openal-info.c modified/utils/openal-info.c
*** original/utils/openal-info.c	Wed Aug  4 12:41:12 2010
--- modified/utils/openal-info.c	Sat Aug  6 14:59:10 2011
***************
*** 279,284 ****
--- 279,286 ----
      ALCdevice *device;
      ALCcontext *context;
  
+ 	alcInit();
+ 
      if(argc > 1 && (strcmp(argv[1], "--help") == 0 ||
                      strcmp(argv[1], "-h") == 0))
      {
***************
*** 328,332 ****
--- 330,336 ----
      alcDestroyContext(context);
      alcCloseDevice(device);
  
+ 	alcRelease();
+ 
      return 0;
  }
EOF
			run "$CMAKE_INSTALL"/bin/cmake \
				-DCMAKE_BUILD_TYPE=Release \
				-DCMAKE_DEBUG_POSTFIX=d \
				-DCMAKE_INSTALL_PREFIX="$OPENAL_INSTALL" \
				-DFORCE_STATIC_VCRT=ON \
				-DLIBTYPE=STATIC \
				-G "$VSCMAKE"
			if $DEVELOPMENT; then
				run msbuild.exe /maxcpucount:$JOBS OpenAL.sln //p:Configuration=Debug //p:Platform=Win32
				if [ $VSVERSION -eq 9 ]; then
					run msbuild.exe /maxcpucount:$JOBS INSTALL.vcproj //p:Configuration=Debug //p:Platform=Win32
				elif [ $VSVERSION -eq 10 ]; then
					run msbuild.exe /maxcpucount:$JOBS INSTALL.vcxproj //p:Configuration=Debug //p:Platform=Win32
				fi
				cp Debug/openal32d.pdb "$OPENAL_INSTALL"/lib
			fi
			run msbuild.exe /maxcpucount:$JOBS OpenAL.sln //p:Configuration=Release //p:Platform=Win32
			if [ $VSVERSION -eq 9 ]; then
				run msbuild.exe /maxcpucount:$JOBS INSTALL.vcproj //p:Configuration=Release //p:Platform=Win32
			elif [ $VSVERSION -eq 10 ]; then
				run msbuild.exe /maxcpucount:$JOBS INSTALL.vcxproj //p:Configuration=Release //p:Platform=Win32
			fi
		else
			run "$CMAKE_INSTALL"/bin/cmake \
				-DALSA=OFF \
				-DALSOFT_CONFIG=OFF \
				-DCMAKE_BACKWARDS_COMPATIBILITY=2.8.2 \
				-DCMAKE_BUILD_TYPE=Release \
				-DCMAKE_DEBUG_POSTFIX=d \
				-DCMAKE_INSTALL_PREFIX="$OPENAL_INSTALL" \
				-DDLOPEN=OFF \
				-DDSOUND=OFF \
				-DEXECUTABLE_OUTPUT_PATH= \
				-DLIBRARY_OUTPUT_PATH= \
				-DLIBTYPE=STATIC \
				-DOSS=OFF \
				-DPORTAUDIO=OFF \
				-DPULSEAUDIO=OFF \
				-DSOLARIS=OFF \
				-DUTILS=OFF \
				-DWAVE=OFF \
				-DWERROR=OFF \
				-DWINMM=OFF
			run make -j$JOBS install
		fi
		run cd $WD
		run rm -rf "$OPENAL_COMPILE"
		stageOK
	fi

	# Build OpenCV libraries if necessary.
	if [ ! -d "$OPENCV_INSTALL" ]; then
		nextStage "OpenCV libraries"
		prepare $OPENCV_SRCFILE "$OPENCV_COMPILE" $OPENCV_SRCBASE $OPENCV_SRCSITE $OPENCV_SRCPATH
		prepare $ZLIB_SRCFILE "$OPENCV_ZLIBSRC" $ZLIB_SRCBASE $ZLIB_SRCSITE $ZLIB_SRCPATH
		run cd "$OPENCV_COMPILE"
		run cp $(echo "$OPENCV_ZLIBSRC"/*.[ch]) ./3rdparty/zlib
		if [ "$OS" == "windows" ]; then
			run touch 3rdparty/ffmpeg/opencv_ffmpeg.dll
			run "$CMAKE_INSTALL"/bin/cmake \
				-DBUILD_DOCS=OFF \
				-DBUILD_EXAMPLES=OFF \
				-DBUILD_SHARED_LIBS=OFF \
				-DBUILD_TESTS=OFF \
				-DBUILD_WITH_STATIC_CRT=ON \
				-DCMAKE_BUILD_TYPE=Release \
				-DCMAKE_INSTALL_PREFIX="$WD/opencv" \
				-DWITH_CUDA=OFF \
				-G "$VSCMAKE"
			if $DEVELOPMENT; then
				run msbuild.exe /maxcpucount:$JOBS OpenCV.sln //p:Configuration=Debug //p:Platform=Win32
				if [ $VSVERSION -eq 9 ]; then
					run msbuild.exe /maxcpucount:$JOBS INSTALL.vcproj //p:Configuration=Debug //p:Platform=Win32
				elif [ $VSVERSION -eq 10 ]; then
					run msbuild.exe /maxcpucount:$JOBS INSTALL.vcxproj //p:Configuration=Debug //p:Platform=Win32
				fi
				cp lib/Debug/*.pdb "$OPENCV_INSTALL"/lib
				cp 3rdparty/lib/Debug/*.pdb "$OPENCV_INSTALL"/lib
			fi
			run msbuild.exe /maxcpucount:$JOBS OpenCV.sln //p:Configuration=Release //p:Platform=Win32
			if [ $VSVERSION -eq 9 ]; then
				run msbuild.exe /maxcpucount:$JOBS INSTALL.vcproj //p:Configuration=Release //p:Platform=Win32
			elif [ $VSVERSION -eq 10 ]; then
				run msbuild.exe /maxcpucount:$JOBS INSTALL.vcxproj //p:Configuration=Release //p:Platform=Win32
			fi
			run rm "$OPENCV_INSTALL"/bin/opencv_ffmpeg.dll
		else
			# Adding the following option:
			#   -DEXECUTABLE_OUTPUT_PATH="$OPENCV_INSTALL"/bin
			# to the CMake call leads to an error during the build
			# with 'opencv_traincascade' executable not being created.
			# It seems like a bug in OpenCV CMake script.
			run "$CMAKE_INSTALL"/bin/cmake \
				-DBUILD_DOCS=OFF \
				-DBUILD_EXAMPLES=OFF \
				-DBUILD_NEW_PYTHON_SUPPORT=OFF \
				-DBUILD_PACKAGE=OFF \
				-DBUILD_SHARED_LIBS=OFF \
				-DBUILD_TESTS=OFF \
				-DBUILD_WITH_DEBUG_INFO=OFF \
				-DCMAKE_BACKWARDS_COMPATIBILITY=2.8.2 \
				-DCMAKE_BUILD_TYPE=Release \
				-DCMAKE_CONFIGURATION_TYPES=Release \
				-DCMAKE_INSTALL_PREFIX="$OPENCV_INSTALL" \
				-DCMAKE_VERBOSE=OFF \
				-DENABLE_PROFILING=OFF \
				-DENABLE_SOLUTION_FOLDERS=OFF \
				-DENABLE_SSE=OFF \
				-DENABLE_SSE2=OFF \
				-DENABLE_SSE3=OFF \
				-DENABLE_SSE41=OFF \
				-DENABLE_SSE42=OFF \
				-DENABLE_SSSE3=OFF \
				-DINSTALL_C_EXAMPLES=OFF \
				-DINSTALL_PYTHON_EXAMPLES=OFF \
				-DLIBRARY_OUTPUT_PATH="$OPENCV_INSTALL"/lib \
				-DOPENCV_BUILD_3RDPARTY_LIBS=TRUE \
				-DOPENCV_CONFIG_FILE_INCLUDE_DIR=./ \
				-DOPENCV_EXTRA_C_FLAGS=-fPIC \
				-DOPENCV_EXTRA_C_FLAGS_DEBUG= \
				-DOPENCV_EXTRA_C_FLAGS_RELEASE= \
				-DOPENCV_EXTRA_EXE_LINKER_FLAGS= \
				-DOPENCV_EXTRA_EXE_LINKER_FLAGS_DEBUG= \
				-DOPENCV_EXTRA_EXE_LINKER_FLAGS_RELEASE= \
				-DOPENCV_WARNINGS_ARE_ERRORS=OFF \
				-DPYTHON_PACKAGES_PATH= \
				-DUSE_FAST_MATH=OFF \
				-DUSE_OMIT_FRAME_POINTER=OFF \
				-DUSE_PRECOMPILED_HEADERS=OFF \
				-DWITH_1394=OFF \
				-DWITH_CUDA=OFF \
				-DWITH_EIGEN=OFF \
				-DWITH_FFMPEG=OFF \
				-DWITH_GSTREAMER=OFF \
				-DWITH_GTK=OFF \
				-DWITH_IPP=OFF \
				-DWITH_JASPER=ON \
				-DWITH_JPEG=ON \
				-DWITH_OPENEXR=OFF \
				-DWITH_OPENNI=OFF \
				-DWITH_PNG=ON \
				-DWITH_PVAPI=OFF \
				-DWITH_QT=OFF \
				-DWITH_QT_OPENGL=OFF \
				-DWITH_TBB=OFF \
				-DWITH_TIFF=ON \
				-DWITH_UNICAP=OFF \
				-DWITH_V4L=OFF \
				-DWITH_XIMEA=OFF \
				-DWITH_XINE=OFF
			run make -j$JOBS install
		fi
		run mv "$OPENCV_INSTALL"/share/OpenCV/3rdparty/lib/* "$OPENCV_INSTALL"/lib
		run rm -rf "$OPENCV_INSTALL"/share
		run cd $WD
		run rm -rf "$OPENCV_COMPILE"
		stageOK
	fi

	# Build OpenSSL libraries if necessary.
	if [ ! -d "$OPENSSL_INSTALL" ]; then
		nextStage "OpenSSL libraries"
		prepare $OPENSSL_SRCFILE "$OPENSSL_COMPILE" $OPENSSL_SRCBASE $OPENSSL_SRCSITE $OPENSSL_SRCPATH
		run cd "$OPENSSL_COMPILE"
		if [ "$OS" == "windows" ]; then
			run patch -p1 << "EOF"
diff -cr original/util/mk1mf.pl modified/util/mk1mf.pl
*** original/util/mk1mf.pl	Fri Dec  3 23:31:06 2010
--- modified/util/mk1mf.pl	Tue Jan 17 05:15:54 2012
***************
*** 317,323 ****
  for (;;)
  	{
  	chop;
! 
  	($key,$val)=/^([^=]+)=(.*)/;
  	if ($key eq "RELATIVE_DIRECTORY")
  		{
--- 317,323 ----
  for (;;)
  	{
  	chop;
! 	s/\r$//; #remove carriage return too! 
  	($key,$val)=/^([^=]+)=(.*)/;
  	if ($key eq "RELATIVE_DIRECTORY")
  		{
EOF
			export PATH=$PATH:"$WD/nasm/bin"
			run perl Configure VC-WIN32 --prefix="$OPENSSL_INSTALL" --openssldir="$OPENSSL_INSTALL"/share
			run cmd /c "ms\do_nasm.bat"
			run nmake -f ms/nt.mak install
			if $DEVELOPMENT; then
				cp out32/*.pdb "$OPENSSL_INSTALL"/lib
			fi
		else
			run ./config shared no-asm --prefix="$OPENSSL_INSTALL" --openssldir="$OPENSSL_INSTALL"/share
			run make install
		fi
		run cd $WD
		run rm -rf "$OPENSSL_COMPILE"
		stageOK
	fi

	# Build Cloud Client application.
	nextStage "Cloud Client application"
	if [ ! -d "$CLOUDCLIENT_COMPILE" ]; then
		if [ "$OS" == "windows" ]; then
			run "$SUBVERSION_INSTALL"/bin/svn checkout http://$CLOUDCLIENT_SRCSITE$CLOUDCLIENT_SRCPATH "$CLOUDCLIENT_COMPILE"
		else
			run svn checkout http://$CLOUDCLIENT_SRCSITE$CLOUDCLIENT_SRCPATH "$CLOUDCLIENT_COMPILE"
			run rm "$CLOUDCLIENT_COMPILE"/src/3rdparty/ffmpeg/inttypes.h
		fi
	fi
	run cd "$CLOUDCLIENT_COMPILE"
	if [ ! -e $CLOUDCLIENT_PREMAKE ]; then
		if [ "$OS" == "windows" ]; then
			cat > $CLOUDCLIENT_PREMAKE << EOF
"$PREMAKE_INSTALL"/bin/premake4 --os=$OS --BoostLibsPath="$BOOST_INSTALL"/lib --FFmpegLibsPath="$FFMPEG_INSTALL"/lib --OpenALLibsPath="$OPENAL_INSTALL"/lib --OpenCVLibsPath="$OPENCV_INSTALL"/lib --BoostIncludesPath="$BOOST_INSTALL"/include/$BOOST_INCLUDE --FFmpegIncludesPath="$FFMPEG_INSTALL"/include --OpenALIncludesPath="$OPENAL_INSTALL"/include --OpenCVIncludesPath="$OPENCV_INSTALL"/include --platform=x32 $VSPREMAKE
EOF
		else
			cat > $CLOUDCLIENT_PREMAKE << EOF
"$PREMAKE_INSTALL"/bin/premake4 --os=$OS --BoostLibsPath="$BOOST_INSTALL"/lib --FFmpegLibsPath="$FFMPEG_INSTALL"/lib --OpenALLibsPath="$OPENAL_INSTALL"/lib --OpenCVLibsPath="$OPENCV_INSTALL"/lib --BoostIncludesPath="$BOOST_INSTALL"/include --FFmpegIncludesPath="$FFMPEG_INSTALL"/include --OpenALIncludesPath="$OPENAL_INSTALL"/include --OpenCVIncludesPath="$OPENCV_INSTALL"/include --platform=x32 gmake
EOF
		fi
		run chmod u+x ./$CLOUDCLIENT_PREMAKE
	fi
	run ./$CLOUDCLIENT_PREMAKE
	if [ "$OS" == "windows" ]; then
		run cd projects/$OS-$VSPREMAKE
		if $DEVELOPMENT; then
			run msbuild.exe /maxcpucount:$JOBS CloudClient.sln //p:Configuration=DebugStatic //p:Platform=Win32
		else
			run msbuild.exe /maxcpucount:$JOBS CloudClient.sln //p:Configuration=ReleaseStatic //p:Platform=Win32
		fi
	else
		run cd projects/$OS-gmake
		if $DEVELOPMENT; then
			run make -j$JOBS config=debugstatic
		else
			run make -j$JOBS config=releasestatic
		fi
	fi
	run cd $WD
	if [ ! -d "$CLOUDCLIENT_INSTALL" ]; then
		run mkdir "$CLOUDCLIENT_INSTALL"
	fi
	if [ "$OS" == "windows" ]; then
		if $DEVELOPMENT; then
			run cp -r "$CLOUDCLIENT_COMPILE"/projects/$OS-$VSPREMAKE/bin/debug-static/* "$CLOUDCLIENT_INSTALL"
		else
			run cp -r "$CLOUDCLIENT_COMPILE"/projects/$OS-$VSPREMAKE/bin/release-static/* "$CLOUDCLIENT_INSTALL"
			run rm -rf "$CLOUDCLIENT_COMPILE"
		fi
	else
		if $DEVELOPMENT; then
			run cp -r "$CLOUDCLIENT_COMPILE"/projects/$OS-gmake/bin/debug-static/* "$CLOUDCLIENT_INSTALL"
		else
			run cp -r "$CLOUDCLIENT_COMPILE"/projects/$OS-gmake/bin/release-static/* "$CLOUDCLIENT_INSTALL"
			run rm -rf "$CLOUDCLIENT_COMPILE"
		fi
	fi
	stageOK


	# Build Cloud Server application.
	nextStage "Cloud Server application"
	if [ ! -d "$CLOUD_COMPILE" ]; then
		if [ "$OS" == "windows" ]; then
			run "$SUBVERSION_INSTALL"/bin/svn checkout http://$CLOUD_SRCSITE$CLOUD_SRCPATH "$CLOUD_COMPILE"
		else
			run svn checkout http://$CLOUD_SRCSITE$CLOUD_SRCPATH "$CLOUD_COMPILE"
		fi
	fi
	run cd "$CLOUD_COMPILE"
	if [ ! -e $CLOUD_PREMAKE ]; then
		if [ "$OS" == "windows" ]; then
			cat > $CLOUD_PREMAKE << EOF
"$PREMAKE_INSTALL"/bin/premake4 --os=$OS --BoostLibsPath="$BOOST_INSTALL"/lib  --OpenCVLibsPath="$OPENCV_INSTALL"/lib --OpenSSLLibsPath="$OPENSSL_INSTALL"/lib  --BoostIncludesPath="$BOOST_INSTALL"/include/$BOOST_INCLUDE  --OpenCVIncludesPath="$OPENCV_INSTALL"/include --OpenSSLIncludesPath="$OPENSSL_INSTALL"/include --platform=x32 $VSPREMAKE
EOF
		else
			cat > $CLOUD_PREMAKE << EOF
"$PREMAKE_INSTALL"/bin/premake4 --os=$OS --BoostLibsPath="$BOOST_INSTALL"/lib  --OpenCVLibsPath="$OPENCV_INSTALL"/lib --OpenSSLLibsPath="$OPENSSL_INSTALL"/lib  --BoostIncludesPath="$BOOST_INSTALL"/include  --OpenCVIncludesPath="$OPENCV_INSTALL"/include --OpenSSLIncludesPath="$OPENSSL_INSTALL"/include --platform=x32 gmake
EOF
		fi
		run chmod u+x ./$CLOUD_PREMAKE
	fi
	run ./$CLOUD_PREMAKE
	if [ "$OS" == "windows" ]; then
		REVISION_INFORMATION="\$(document).ready(function() {\$('#rol').after('. Revision $("$SUBVERSION_INSTALL"/bin/svnversion -n)');});"
		echo $REVISION_INFORMATION >> projects/$OS-$VSPREMAKE/htdocs/js/cf.js
		echo $REVISION_INFORMATION >> projects/$OS-$VSPREMAKE/bin/debug/htdocs/js/cf.js
		echo $REVISION_INFORMATION >> projects/$OS-$VSPREMAKE/bin/release/htdocs/js/cf.js
		run cd projects/$OS-$VSPREMAKE
		if $DEVELOPMENT; then
			run msbuild.exe /maxcpucount:$JOBS CloudServer.sln //p:Configuration=Debug //p:Platform=Win32
		else
			run msbuild.exe /maxcpucount:$JOBS CloudServer.sln //p:Configuration=Release //p:Platform=Win32
		fi
	else
		REVISION_INFORMATION="\$(document).ready(function() {\$('#rol').after('. Revision $(svnversion -n)');});"
		echo $REVISION_INFORMATION >> projects/$OS-gmake/htdocs/js/cf.js
		echo $REVISION_INFORMATION >> projects/$OS-gmake/bin/debug/htdocs/js/cf.js
		echo $REVISION_INFORMATION >> projects/$OS-gmake/bin/release/htdocs/js/cf.js
		run cd projects/$OS-gmake
		if $DEVELOPMENT; then
			run make -j$JOBS config=debug
		else
			run make -j$JOBS config=release
		fi
	fi
	run cd $WD
	if [ ! -d "$CLOUD_INSTALL" ]; then
		run mkdir "$CLOUD_INSTALL"
	else
		run rm -rf "$CLOUD_INSTALL"/htdocs
		run rm -rf "$CLOUD_INSTALL"/config.xml
	fi
	if [ "$OS" == "windows" ]; then
		if $DEVELOPMENT; then
			run cp -r "$CLOUD_COMPILE"/projects/$OS-$VSPREMAKE/bin/debug/* "$CLOUD_INSTALL"
		else
			run cp -r "$CLOUD_COMPILE"/projects/$OS-$VSPREMAKE/bin/release/* "$CLOUD_INSTALL"
			run rm -rf "$CLOUD_COMPILE"
		fi
	else
		if $DEVELOPMENT; then
			run cp -r "$CLOUD_COMPILE"/projects/$OS-gmake/bin/debug/* "$CLOUD_INSTALL"
		else
			run cp -r "$CLOUD_COMPILE"/projects/$OS-gmake/bin/release/* "$CLOUD_INSTALL"
			run rm -rf "$CLOUD_COMPILE"
		fi
	fi
	stageOK
}

# Declare variables related to this loader script.
LOADER_VERSION=0.5.0
LOADER_SRCFILE=cold
LOADER_SRCPATH=/svn/trunk/CloudLoader
LOADER_SRCSITE=cloudobserver.googlecode.com

# Declare style variables.
export NORMAL="\033[0m"
export BOLD="\033[1m"
export BLACK="\033[;30m"
export RED="\033[;31m"
export GREEN="\033[;32m"
export YELLOW="\033[;33m"
export BLUE="\033[;34m"
export MAGENTA="\033[;35m"
export CYAN="\033[;36m"
export WHITE="\033[;37m"

# Declare command variable.
COMMAND=

# Declare option variables.
CHECKOUT_SOURCE=false
DEVELOPMENT=false
REBUILD_LIBRARIES=false
VERBOSE=false

# Parse command line arguments.
for i in $*
do
	case $i in
		auto                )
			checkForACommand
			COMMAND=auto
			;;
		build               )
			checkForACommand
			COMMAND=build
			;;
		check-for-updates )
			checkForACommand
			COMMAND=checkForUpdates
			;;
		--checkout-source   )
			CHECKOUT_SOURCE=true
			;;
		--development       )
			DEVELOPMENT=true
			;;
		devbuild          )
			checkForACommand
			COMMAND=build
			DEVELOPMENT=true
			;;
		deploy            )
			checkForACommand
			COMMAND=deploy
			;;
		help              )
			checkForACommand
			COMMAND=help
			;;
		maintain          )
			checkForACommand
			COMMAND=maintain
			;;
		--rebuild-libraries )
			REBUILD_LIBRARIES=true
			;;
		restart           )
			checkForACommand
			COMMAND=restart
			;;
		self-install      )
			checkForACommand
			COMMAND='selfInstall'
			;;
		self-uninstall    )
			checkForACommand
			COMMAND='selfUninstall'
			;;
		self-update       )
			checkForACommand
			COMMAND='selfUpdate false'
			;;
		start             )
			checkForACommand
			COMMAND=start
			;;
		status            )
			checkForACommand
			COMMAND=status
			;;
		stop              )
			checkForACommand
			COMMAND=stop
			;;
		--verbose           )
			VERBOSE=true
			;;
		version           )
			checkForACommand
			COMMAND=version
			;;
		-*                   )
			echo -e "${RED}Invalid option: $i${NORMAL}"
			usage
			;;
		*                   )
			echo -e "${RED}Unknown command: '$i'${NORMAL}"
			usage
			;;
	esac
done

# Move to the directory containing the script.
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do SOURCE="$(readlink "$SOURCE")"; done
cd "$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# Remember the workspace directory path.
WD=$(pwd)

# Declare variables related to CMake utility.
CMAKE_VERSION=2.8.6
CMAKE_COMPILE="$WD"/cmake-src
CMAKE_INSTALL="$WD"/cmake
CMAKE_SRCBASE=cmake-$CMAKE_VERSION
CMAKE_SRCFILE=$CMAKE_SRCBASE.tar.gz
CMAKE_SRCPATH=/files/v${CMAKE_VERSION%.*}
CMAKE_SRCSITE=www.cmake.org

# Declare variables related to NASM utility.
NASM_VERSION=2.09.10
NASM_COMPILE="$WD"/nasm-src
NASM_INSTALL="$WD"/nasm
NASM_SRCBASE=nasm-$NASM_VERSION
NASM_SRCFILE=$NASM_SRCBASE.tar.bz2
NASM_SRCPATH=/pub/nasm/releasebuilds/$NASM_VERSION
NASM_SRCSITE=www.nasm.us

# Declare variables related to Premake utility.
PREMAKE_VERSION=4.3
PREMAKE_COMPILE="$WD"/premake-src
PREMAKE_INSTALL="$WD"/premake
PREMAKE_SRCBASE=premake-$PREMAKE_VERSION
PREMAKE_SRCFILE=$PREMAKE_SRCBASE-src.zip
PREMAKE_SRCPATH=/projects/premake/files/Premake/$PREMAKE_VERSION
PREMAKE_SRCSITE=sourceforge.net

# Declare variables related to Subversion utility.
SUBVERSION_VERSION=1.7.2
SUBVERSION_INSTALL="$WD"/subversion
SUBVERSION_BINBASE=svn-win32-$SUBVERSION_VERSION
SUBVERSION_BINFILE=$SUBVERSION_BINBASE.zip
SUBVERSION_BINPATH=/projects/win32svn/files/$SUBVERSION_VERSION
SUBVERSION_BINSITE=sourceforge.net

# Declare variables related to YASM utility.
YASM_VERSION=1.2.0
YASM_COMPILE="$WD"/yasm-src
YASM_INSTALL="$WD"/yasm
YASM_SRCBASE=yasm-$YASM_VERSION
YASM_SRCFILE=$YASM_SRCBASE.tar.gz
YASM_SRCPATH=/projects/yasm/releases
YASM_SRCSITE=www.tortall.net

# Declare variables related to Boost libraries.
BOOST_VERSION=1.52.0
BOOST_COMPILE="$WD"/boost-src
BOOST_INCLUDE=boost-${BOOST_VERSION//./_}
BOOST_INCLUDE=${BOOST_INCLUDE%_*}
BOOST_INSTALL="$WD"/boost
BOOST_SRCBASE=boost_${BOOST_VERSION//./_}
BOOST_SRCFILE=$BOOST_SRCBASE.tar.bz2
BOOST_SRCPATH=/projects/boost/files/boost/$BOOST_VERSION
BOOST_SRCSITE=sourceforge.net
BOOST_ZLIBSRC="$BOOST_COMPILE"/zlib-src

# Declare variables related to FFmpeg libraries.
FFMPEG_VERSION=0.10
FFMPEG_COMPILE="$WD"/ffmpeg-src
FFMPEG_INSTALL="$WD"/ffmpeg
FFMPEG_SRCBASE=ffmpeg-$FFMPEG_VERSION
FFMPEG_SRCFILE=$FFMPEG_SRCBASE.tar.bz2
FFMPEG_SRCPATH=/releases
FFMPEG_SRCSITE=ffmpeg.org

# Declare variables related to OpenAL libraries.
OPENAL_VERSION=1.13
OPENAL_COMPILE="$WD"/openal-src
OPENAL_INSTALL="$WD"/openal
OPENAL_SRCBASE=openal-soft-$OPENAL_VERSION
OPENAL_SRCFILE=$OPENAL_SRCBASE.tar.bz2
OPENAL_SRCPATH=/openal-releases
OPENAL_SRCSITE=kcat.strangesoft.net

# Declare variables related to OpenCV libraries.
OPENCV_VERSION=2.3.1
OPENCV_COMPILE="$WD"/opencv-src
OPENCV_INSTALL="$WD"/opencv
OPENCV_SRCBASE=OpenCV-$OPENCV_VERSION
OPENCV_SRCFILE="$OPENCV_SRCBASE"a.tar.bz2 # note the 'a' character (it's 2.3.1a)
OPENCV_SRCPATH=/projects/opencvlibrary/files/opencv-unix/$OPENCV_VERSION
OPENCV_SRCSITE=sourceforge.net
OPENCV_ZLIBSRC="$OPENCV_COMPILE"/zlib-src

# Declare variables related to OpenSSL libraries.
OPENSSL_VERSION=1.0.0d
OPENSSL_COMPILE="$WD"/openssl-src
OPENSSL_INSTALL="$WD"/openssl
OPENSSL_SRCBASE=openssl-$OPENSSL_VERSION
OPENSSL_SRCFILE=$OPENSSL_SRCBASE.tar.gz
OPENSSL_SRCPATH=/source
OPENSSL_SRCSITE=www.openssl.org

# Declare variables related to zlib library.
ZLIB_VERSION=1.2.6
ZLIB_SRCBASE=zlib-$ZLIB_VERSION
ZLIB_SRCFILE=$ZLIB_SRCBASE.tar.bz2
ZLIB_SRCPATH=/projects/libpng/files/zlib/$ZLIB_VERSION
ZLIB_SRCSITE=sourceforge.net

# Declare variables related to Cloud Server application.
CLOUD_COMPILE="$WD"/cloudserver-src
CLOUD_INSTALL="$WD"/install-dir
CLOUD_PREMAKE=build.sh
CLOUD_SRCBASE=CloudServer
CLOUD_SRCPATH=/svn/trunk/$CLOUD_SRCBASE
CLOUD_SRCSITE=cloudobserver.googlecode.com

# Declare variables related to Cloud Client application.
CLOUDCLIENT_COMPILE="$WD"/cloudclient-src
CLOUDCLIENT_INSTALL="$WD"/install-dir
CLOUDCLIENT_PREMAKE=build.sh
CLOUDCLIENT_SRCBASE=CloudClient
CLOUDCLIENT_SRCPATH=/svn/trunk/$CLOUDCLIENT_SRCBASE
CLOUDCLIENT_SRCSITE=cloudobserver.googlecode.com

# Declare other variables.
DOWNLOADS=downloads
DEPLOY=run_dir

# Declare platform-specific variables.
case $OSTYPE in
	darwin* )
		OS=macosx
		JOBS=$(sysctl -n hw.logicalcpu)
		STAT_PERMISSIONS="stat -f %A"
		;;
	msys    )
		OS=windows
		STAT_PERMISSIONS="stat -c %a"
		;;
	*       )
		OS=linux
		JOBS=$(grep ^processor /proc/cpuinfo | wc -l)
		STAT_PERMISSIONS="stat -c %a"
		;;
esac

# Remember the revision of the script.
REVISION='$Revision$'
if [ "$REVISION" != "\$Revision\$" ]; then
	REVISION=${REVISION#'$Revision: '}
	REVISION=${REVISION%' $'}
	REVISION_DEFINED=true
else
	REVISION=0
	REVISION_DEFINED=false
fi

if [ "$COMMAND" == "" ]; then
	usage
fi

$COMMAND
exit 0

